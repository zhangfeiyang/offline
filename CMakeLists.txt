
cmake_minimum_required (VERSION 2.8)

# add this options before PROJECT keyword
# disable in source build
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

project (offline)

# setup Module PATH
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

set(CMAKE_SKIP_BUILD_RPATH TRUE)
set(CMAKE_EXECUTABLE_SUFFIX .exe)

# Put bin/lib/include under CMAKE_BINARY_DIR
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
include_directories(${CMAKE_BINARY_DIR}/include)

# Global Options
## Python 
include_directories($ENV{JUNO_EXTLIB_Python_HOME}/include/python2.7)
find_library(PYTHON_LIBRARIES python
    HINTS $ENV{JUNO_EXTLIB_Python_HOME}/lib
)
link_directories($ENV{JUNO_EXTLIB_Python_HOME}/lib)

## Boost
include_directories($ENV{JUNO_EXTLIB_Boost_HOME})
find_library(BOOST_LIBRARIES boost_python
    HINTS $ENV{JUNO_EXTLIB_Boost_HOME}/lib
)
link_directories($ENV{JUNO_EXTLIB_Boost_HOME}/lib)

## ROOT
include_directories($ENV{JUNO_EXTLIB_ROOT_HOME}/include)
find_program(ROOT_CONFIG_EXECUTABLE root-config
    PATHS $ENV{JUNO_EXTLIB_ROOT_HOME}/bin)
execute_process(
    COMMAND ${ROOT_CONFIG_EXECUTABLE} --evelibs
    OUTPUT_VARIABLE ROOT_LIBRARIES
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
link_directories($ENV{JUNO_EXTLIB_ROOT_HOME}/lib)

## CLHEP
include_directories($ENV{JUNO_EXTLIB_CLHEP_HOME}/include)
find_library(CLHEP_LIBRARIES CLHEP 
    HINTS $ENV{JUNO_EXTLIB_CLHEP_HOME}/lib
)
link_directories($ENV{JUNO_EXTLIB_CLHEP_HOME}/lib)

## Geant4 9.4
include_directories($ENV{JUNO_EXTLIB_Geant4_HOME}/include/geant4)
find_program(GEANT4_CONFIG_EXECUTABLE geant4-config
    PATHS $ENV{JUNO_EXTLIB_Geant4_HOME}/bin)
execute_process(
    COMMAND ${GEANT4_CONFIG_EXECUTABLE} --cflags
    OUTPUT_VARIABLE GEANT4_CFLAGS
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
add_definitions(${GEANT4_CFLAGS})

execute_process(
    COMMAND ${GEANT4_CONFIG_EXECUTABLE} --libs
    OUTPUT_VARIABLE GEANT4_LIBRARIES
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
link_directories($ENV{JUNO_EXTLIB_Geant4_HOME}/lib)

## HepMC
include_directories($ENV{JUNO_EXTLIB_HepMC_HOME}/include)
find_library(HEPMC_LIBRARIES HepMC 
    HINTS $ENV{JUNO_EXTLIB_HepMC_HOME}/lib
)
link_directories($ENV{JUNO_EXTLIB_HepMC_HOME}/lib)

## SNiPER
include_directories(
    $ENV{SNIPERKERNELROOT}
    $ENV{ROOTWRITERROOT}
    $ENV{DATABUFFERROOT}
)
find_library(SNIPERKERNEL_LIBRARIES SniperKernel SniperPython
    HINTS $ENV{SNIPERKERNELROOT}/$ENV{CMTCONFIG}
)
link_directories($ENV{SNIPERKERNELROOT}/$ENV{CMTCONFIG})
find_library(ROOTWRITER_LIBRARIES RootWriter
    HINTS $ENV{ROOTWRITERROOT}/$ENV{CMTCONFIG}
)
link_directories($ENV{ROOTWRITERROOT}/$ENV{CMTCONFIG})

# add macros
include (PRJ)
include (PKG)
include (EDM)

# Add packages
add_subdirectory(Generator)
add_subdirectory(Detector)

add_subdirectory(XmlObjDesc)
add_subdirectory(DataModel)

add_subdirectory(CommonSvc)
add_subdirectory(RootIO)

add_subdirectory(Simulation)
add_subdirectory(Reconstruction)

add_subdirectory(Utilities)

add_subdirectory(EventDisplay)

add_subdirectory(Validation)

add_subdirectory(Examples)

# Show packages
# create setup script
get_property(OFFLINE_ALL_PACKAGES
    GLOBAL
    PROPERTY OFFLINE_PACKAGES
)
message("ALL PACKAGES: " "${OFFLINE_ALL_PACKAGES}")

file(WRITE ${CMAKE_BINARY_DIR}/setup.sh
    "#!/bin/bash\n"
    "# Generated by cmake \n"
    "export PATH=${CMAKE_BINARY_DIR}/bin:\${PATH}\n"
    "export LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:\${LD_LIBRARY_PATH}\n"
    "export PYTHONPATH=${CMAKE_BINARY_DIR}/lib:\${PYTHONPATH}\n"
    "export PYTHONPATH=${CMAKE_BINARY_DIR}/python:\${PYTHONPATH}\n"
    "\n"
)
file(WRITE ${CMAKE_BINARY_DIR}/setup.csh
    "#!/bin/tcsh\n"
    "# Generated by cmake \n"
    "setenv PATH ${CMAKE_BINARY_DIR}/bin:\${PATH}\n"
    "setenv LD_LIBRARY_PATH ${CMAKE_BINARY_DIR}/lib:\${LD_LIBRARY_PATH}\n"
    "setenv PYTHONPATH ${CMAKE_BINARY_DIR}/lib:\${PYTHONPATH}\n"
    "setenv PYTHONPATH ${CMAKE_BINARY_DIR}/python:\${PYTHONPATH}\n"
    "\n"
)
foreach (_p ${OFFLINE_ALL_PACKAGES})
    set(_p_r)
    get_property(_p_r GLOBAL PROPERTY ${_p}_root)

    set(_p_env_name)
    string(TOUPPER "${_p}ROOT" _p_env_name)

    message("PACKAGE ${_p} ${_p_env_name} ${_p_r}")
    file(APPEND ${CMAKE_BINARY_DIR}/setup.sh
        "export ${_p_env_name}=${_p_r}\n"
    )
    file(APPEND ${CMAKE_BINARY_DIR}/setup.csh
        "setenv ${_p_env_name} ${_p_r}\n"
    )
endforeach(_p)
