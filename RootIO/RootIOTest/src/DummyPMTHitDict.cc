//
// File generated by /cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Pre-Release/J18v1r1-Pre1/ExternalLibs/ROOT/5.34.11/bin/rootcint at Thu Dec 28 13:50:19 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIsrcdIDummyPMTHitDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DummyPMTHitDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void DummyPMTHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DummyPMTHit(void *p = 0);
   static void *newArray_DummyPMTHit(Long_t size, void *p);
   static void delete_DummyPMTHit(void *p);
   static void deleteArray_DummyPMTHit(void *p);
   static void destruct_DummyPMTHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DummyPMTHit*)
   {
      ::DummyPMTHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DummyPMTHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DummyPMTHit", ::DummyPMTHit::Class_Version(), "./DummyPMTHit.h", 8,
                  typeid(::DummyPMTHit), DefineBehavior(ptr, ptr),
                  &::DummyPMTHit::Dictionary, isa_proxy, 4,
                  sizeof(::DummyPMTHit) );
      instance.SetNew(&new_DummyPMTHit);
      instance.SetNewArray(&newArray_DummyPMTHit);
      instance.SetDelete(&delete_DummyPMTHit);
      instance.SetDeleteArray(&deleteArray_DummyPMTHit);
      instance.SetDestructor(&destruct_DummyPMTHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DummyPMTHit*)
   {
      return GenerateInitInstanceLocal((::DummyPMTHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DummyPMTHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *DummyPMTHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DummyPMTHit::Class_Name()
{
   return "DummyPMTHit";
}

//______________________________________________________________________________
const char *DummyPMTHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DummyPMTHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DummyPMTHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DummyPMTHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DummyPMTHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DummyPMTHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DummyPMTHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DummyPMTHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void DummyPMTHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class DummyPMTHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(DummyPMTHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(DummyPMTHit::Class(),this);
   }
}

//______________________________________________________________________________
void DummyPMTHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DummyPMTHit.
      TClass *R__cl = ::DummyPMTHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pmtid", &pmtid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npe", &npe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hittime", &hittime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timewindow", &timewindow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackid", &trackid);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DummyPMTHit(void *p) {
      return  p ? new(p) ::DummyPMTHit : new ::DummyPMTHit;
   }
   static void *newArray_DummyPMTHit(Long_t nElements, void *p) {
      return p ? new(p) ::DummyPMTHit[nElements] : new ::DummyPMTHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_DummyPMTHit(void *p) {
      delete ((::DummyPMTHit*)p);
   }
   static void deleteArray_DummyPMTHit(void *p) {
      delete [] ((::DummyPMTHit*)p);
   }
   static void destruct_DummyPMTHit(void *p) {
      typedef ::DummyPMTHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DummyPMTHit

namespace ROOT {
   void vectorlEDummyPMTHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEDummyPMTHitgR_Dictionary();
   static void *new_vectorlEDummyPMTHitgR(void *p = 0);
   static void *newArray_vectorlEDummyPMTHitgR(Long_t size, void *p);
   static void delete_vectorlEDummyPMTHitgR(void *p);
   static void deleteArray_vectorlEDummyPMTHitgR(void *p);
   static void destruct_vectorlEDummyPMTHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<DummyPMTHit>*)
   {
      vector<DummyPMTHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<DummyPMTHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<DummyPMTHit>", -2, "prec_stl/vector", 49,
                  typeid(vector<DummyPMTHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEDummyPMTHitgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<DummyPMTHit>) );
      instance.SetNew(&new_vectorlEDummyPMTHitgR);
      instance.SetNewArray(&newArray_vectorlEDummyPMTHitgR);
      instance.SetDelete(&delete_vectorlEDummyPMTHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEDummyPMTHitgR);
      instance.SetDestructor(&destruct_vectorlEDummyPMTHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<DummyPMTHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<DummyPMTHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEDummyPMTHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<DummyPMTHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEDummyPMTHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DummyPMTHit> : new vector<DummyPMTHit>;
   }
   static void *newArray_vectorlEDummyPMTHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DummyPMTHit>[nElements] : new vector<DummyPMTHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEDummyPMTHitgR(void *p) {
      delete ((vector<DummyPMTHit>*)p);
   }
   static void deleteArray_vectorlEDummyPMTHitgR(void *p) {
      delete [] ((vector<DummyPMTHit>*)p);
   }
   static void destruct_vectorlEDummyPMTHitgR(void *p) {
      typedef vector<DummyPMTHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<DummyPMTHit>

/********************************************************
* ../src/DummyPMTHitDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDummyPMTHitDict();

extern "C" void G__set_cpp_environmentDummyPMTHitDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DummyPMTHit.h");
  G__cpp_reset_tagtableDummyPMTHitDict();
}
#include <new>
extern "C" int G__cpp_dllrevDummyPMTHitDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DummyPMTHit */
static int G__DummyPMTHitDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DummyPMTHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DummyPMTHit[n];
     } else {
       p = new((void*) gvp) DummyPMTHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DummyPMTHit;
     } else {
       p = new((void*) gvp) DummyPMTHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DummyPMTHit*) G__getstructoffset())->getPMTID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DummyPMTHit*) G__getstructoffset())->getNPE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DummyPMTHit*) G__getstructoffset())->getHitTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DummyPMTHit*) G__getstructoffset())->getTimeWindow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DummyPMTHit*) G__getstructoffset())->getTrackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyPMTHit*) G__getstructoffset())->setPMTID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyPMTHit*) G__getstructoffset())->setNPE((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyPMTHit*) G__getstructoffset())->setHitTime((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyPMTHit*) G__getstructoffset())->setTimeWindow((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyPMTHit*) G__getstructoffset())->setTrackID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DummyPMTHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DummyPMTHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DummyPMTHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DummyPMTHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyPMTHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DummyPMTHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DummyPMTHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DummyPMTHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_168_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DummyPMTHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DummyPMTHitDict_168_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DummyPMTHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DummyPMTHit(*(DummyPMTHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DummyPMTHit G__TDummyPMTHit;
static int G__DummyPMTHitDict_168_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DummyPMTHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DummyPMTHit*) (soff+(sizeof(DummyPMTHit)*i)))->~G__TDummyPMTHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DummyPMTHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DummyPMTHit*) (soff))->~G__TDummyPMTHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DummyPMTHitDict_168_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DummyPMTHit* dest = (DummyPMTHit*) G__getstructoffset();
   *dest = *(DummyPMTHit*) libp->para[0].ref;
   const DummyPMTHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<DummyPMTHit,allocator<DummyPMTHit> > */
static int G__DummyPMTHitDict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DummyPMTHit,allocator<DummyPMTHit> >::reference obj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->at((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyPMTHit,allocator<DummyPMTHit> >::const_reference obj = ((const vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->at((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator* pobj;
         vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator xobj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->begin();
         pobj = new vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator* pobj;
         vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator xobj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->end();
         pobj = new vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator* pobj;
         vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator xobj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->rbegin();
         pobj = new vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator* pobj;
         vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator xobj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->rend();
         pobj = new vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->resize((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->resize((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]), *((DummyPMTHit*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DummyPMTHit,allocator<DummyPMTHit> >::reference obj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->operator[]((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyPMTHit,allocator<DummyPMTHit> >::const_reference obj = ((const vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->operator[]((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyPMTHit,allocator<DummyPMTHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyPMTHit,allocator<DummyPMTHit> >[n];
     } else {
       p = new((void*) gvp) vector<DummyPMTHit,allocator<DummyPMTHit> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyPMTHit,allocator<DummyPMTHit> >;
     } else {
       p = new((void*) gvp) vector<DummyPMTHit,allocator<DummyPMTHit> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyPMTHit,allocator<DummyPMTHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyPMTHit,allocator<DummyPMTHit> >((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]), *(DummyPMTHit*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<DummyPMTHit,allocator<DummyPMTHit> >((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]), *(DummyPMTHit*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyPMTHit,allocator<DummyPMTHit> >((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<DummyPMTHit,allocator<DummyPMTHit> >((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyPMTHit,allocator<DummyPMTHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DummyPMTHit,allocator<DummyPMTHit> >(*(vector<DummyPMTHit,allocator<DummyPMTHit> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<DummyPMTHit,allocator<DummyPMTHit> >(*(vector<DummyPMTHit,allocator<DummyPMTHit> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyPMTHit,allocator<DummyPMTHit> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DummyPMTHit,allocator<DummyPMTHit> >(*((vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator*) G__int(libp->para[0])), *((vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<DummyPMTHit,allocator<DummyPMTHit> >(*((vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator*) G__int(libp->para[0])), *((vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DummyPMTHit,allocator<DummyPMTHit> >& obj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->operator=(*(vector<DummyPMTHit,allocator<DummyPMTHit> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->reserve((vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DummyPMTHit& obj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DummyPMTHit& obj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->push_back(*(DummyPMTHit*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->swap(*(vector<DummyPMTHit,allocator<DummyPMTHit> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator* pobj;
         vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator xobj = ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->insert(*((vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator*) G__int(libp->para[0])), *(DummyPMTHit*) libp->para[1].ref);
         pobj = new vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->insert(*((vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator*) G__int(libp->para[0])), *((vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator*) G__int(libp->para[1]))
, *((vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->insert(*((vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator*) G__int(libp->para[0])), (vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type) G__int(libp->para[1])
, *(DummyPMTHit*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->erase(*((vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->erase(*((vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator*) G__int(libp->para[0])), *((vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyPMTHitDict_170_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<DummyPMTHit,allocator<DummyPMTHit> > G__TvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR;
static int G__DummyPMTHitDict_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<DummyPMTHit,allocator<DummyPMTHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) (soff+(sizeof(vector<DummyPMTHit,allocator<DummyPMTHit> >)*i)))->~G__TvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<DummyPMTHit,allocator<DummyPMTHit> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<DummyPMTHit,allocator<DummyPMTHit> >*) (soff))->~G__TvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DummyPMTHit */

/* vector<DummyPMTHit,allocator<DummyPMTHit> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDummyPMTHitDict {
 public:
  G__Sizep2memfuncDummyPMTHitDict(): p(&G__Sizep2memfuncDummyPMTHitDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDummyPMTHitDict::*p)();
};

size_t G__get_sizep2memfuncDummyPMTHitDict()
{
  G__Sizep2memfuncDummyPMTHitDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDummyPMTHitDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit))) {
     DummyPMTHit *G__Lderived;
     G__Lderived=(DummyPMTHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit),G__get_linked_tagnum(&G__DummyPMTHitDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDummyPMTHitDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DummyPMTHit>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit),256,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit),1,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit),257,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DummyPMTHit */
static void G__setup_memvarDummyPMTHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit));
   { DummyPMTHit *p; p=(DummyPMTHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"pmtid=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"npe=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"hittime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"timewindow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"trackid=",0,"ref to Track ID. but if hits are merged, unknown.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DummyPMTHitDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<DummyPMTHit,allocator<DummyPMTHit> > */
static void G__setup_memvarvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   { vector<DummyPMTHit,allocator<DummyPMTHit> > *p; p=(vector<DummyPMTHit,allocator<DummyPMTHit> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDummyPMTHitDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDummyPMTHit(void) {
   /* DummyPMTHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit));
   G__memfunc_setup("DummyPMTHit",1058,G__DummyPMTHitDict_168_0_1, 105, G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPMTID",702,G__DummyPMTHitDict_168_0_2, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPE",547,G__DummyPMTHitDict_168_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitTime",1012,G__DummyPMTHitDict_168_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeWindow",1351,G__DummyPMTHitDict_168_0_5, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackID",962,G__DummyPMTHitDict_168_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPMTID",714,G__DummyPMTHitDict_168_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNPE",559,G__DummyPMTHitDict_168_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitTime",1024,G__DummyPMTHitDict_168_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeWindow",1363,G__DummyPMTHitDict_168_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackID",974,G__DummyPMTHitDict_168_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DummyPMTHitDict_168_0_12, 85, G__get_linked_tagnum(&G__DummyPMTHitDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DummyPMTHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DummyPMTHitDict_168_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DummyPMTHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DummyPMTHitDict_168_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DummyPMTHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DummyPMTHitDict_168_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DummyPMTHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DummyPMTHitDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DummyPMTHitDict_168_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DummyPMTHitDict_168_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DummyPMTHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DummyPMTHitDict_168_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DummyPMTHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DummyPMTHitDict_168_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DummyPMTHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DummyPMTHitDict_168_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DummyPMTHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DummyPMTHit", 1058, G__DummyPMTHitDict_168_0_24, (int) ('i'), G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), -1, 0, 1, 1, 1, 0, "u 'DummyPMTHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DummyPMTHit", 1184, G__DummyPMTHitDict_168_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DummyPMTHitDict_168_0_26, (int) ('u'), G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), -1, 1, 1, 1, 1, 0, "u 'DummyPMTHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR(void) {
   /* vector<DummyPMTHit,allocator<DummyPMTHit> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR));
   G__memfunc_setup("at",213,G__DummyPMTHitDict_170_0_1, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DummyPMTHitDict_170_0_2, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DummyPMTHitDict_170_0_3, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DummyPMTHitDict_170_0_4, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DummyPMTHitDict_170_0_5, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DummyPMTHitDict_170_0_6, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR), G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DummyPMTHitDict_170_0_7, 107, -1, G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DummyPMTHitDict_170_0_8, 107, -1, G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DummyPMTHitDict_170_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DummyPMTHitDict_170_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - sz u 'DummyPMTHit' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DummyPMTHitDict_170_0_11, 107, -1, G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DummyPMTHitDict_170_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DummyPMTHitDict_170_0_13, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DummyPMTHitDict_170_0_14, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), G__defined_typename("vector<DummyPMTHit,allocator<DummyPMTHit> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyPMTHit,allocator<DummyPMTHit> >",4056,G__DummyPMTHitDict_170_0_15, 105, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyPMTHit,allocator<DummyPMTHit> >",4056,G__DummyPMTHitDict_170_0_16, 105, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - n u 'DummyPMTHit' - 11 'DummyPMTHit()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyPMTHit,allocator<DummyPMTHit> >",4056,G__DummyPMTHitDict_170_0_17, 105, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<DummyPMTHit,allocator<DummyPMTHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyPMTHit,allocator<DummyPMTHit> >",4056,G__DummyPMTHitDict_170_0_18, 105, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' 'vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator' 10 - first u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' 'vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DummyPMTHitDict_170_0_19, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<DummyPMTHit,allocator<DummyPMTHit> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DummyPMTHitDict_170_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DummyPMTHitDict_170_0_21, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DummyPMTHitDict_170_0_22, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_DummyPMTHit), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DummyPMTHitDict_170_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DummyPMTHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DummyPMTHitDict_170_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DummyPMTHit,allocator<DummyPMTHit> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DummyPMTHitDict_170_0_25, 117, G__get_linked_tagnum(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' - 0 - position u 'DummyPMTHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DummyPMTHitDict_170_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' - 0 - position u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' 'vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator' 10 - first "
"u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' 'vector<DummyPMTHit,allocator<DummyPMTHit> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DummyPMTHitDict_170_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' - 0 - position k - 'vector<DummyPMTHit,allocator<DummyPMTHit> >::size_type' 0 - n "
"u 'DummyPMTHit' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DummyPMTHitDict_170_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DummyPMTHitDict_170_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DummyPMTHitDict_170_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' - 0 - first u 'vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DummyPMTHitDict_170_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<DummyPMTHit,allocator<DummyPMTHit> >", 4182, G__DummyPMTHitDict_170_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDummyPMTHitDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDummyPMTHitDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDummyPMTHitDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DummyPMTHitDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_DummyPMTHit = { "DummyPMTHit" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR = { "vector<DummyPMTHit,allocator<DummyPMTHit> >" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiterator = { "vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator" , 99 , -1 };
G__linked_taginfo G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<DummyPMTHit,allocator<DummyPMTHit> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDummyPMTHitDict() {
  G__DummyPMTHitDictLN_TClass.tagnum = -1 ;
  G__DummyPMTHitDictLN_TBuffer.tagnum = -1 ;
  G__DummyPMTHitDictLN_TMemberInspector.tagnum = -1 ;
  G__DummyPMTHitDictLN_TObject.tagnum = -1 ;
  G__DummyPMTHitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DummyPMTHitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DummyPMTHitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DummyPMTHitDictLN_DummyPMTHit.tagnum = -1 ;
  G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR.tagnum = -1 ;
  G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiterator.tagnum = -1 ;
  G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDummyPMTHitDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_DummyPMTHit),sizeof(DummyPMTHit),-1,292096,(char*)NULL,G__setup_memvarDummyPMTHit,G__setup_memfuncDummyPMTHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR),sizeof(vector<DummyPMTHit,allocator<DummyPMTHit> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR,G__setup_memfuncvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_vectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DummyPMTHitDictLN_reverse_iteratorlEvectorlEDummyPMTHitcOallocatorlEDummyPMTHitgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDummyPMTHitDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDummyPMTHitDict()");
  G__set_cpp_environmentDummyPMTHitDict();
  G__cpp_setup_tagtableDummyPMTHitDict();

  G__cpp_setup_inheritanceDummyPMTHitDict();

  G__cpp_setup_typetableDummyPMTHitDict();

  G__cpp_setup_memvarDummyPMTHitDict();

  G__cpp_setup_memfuncDummyPMTHitDict();
  G__cpp_setup_globalDummyPMTHitDict();
  G__cpp_setup_funcDummyPMTHitDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDummyPMTHitDict();
  return;
}
class G__cpp_setup_initDummyPMTHitDict {
  public:
    G__cpp_setup_initDummyPMTHitDict() { G__add_setup_func("DummyPMTHitDict",(G__incsetup)(&G__cpp_setupDummyPMTHitDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDummyPMTHitDict() { G__remove_setup_func("DummyPMTHitDict"); }
};
G__cpp_setup_initDummyPMTHitDict G__cpp_setup_initializerDummyPMTHitDict;

