//
// File generated by /cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Pre-Release/J18v1r1-Pre1/ExternalLibs/ROOT/5.34.11/bin/rootcint at Thu Dec 28 13:50:18 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIsrcdIDummyTrackDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DummyTrackDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void DummyTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DummyTrack(void *p = 0);
   static void *newArray_DummyTrack(Long_t size, void *p);
   static void delete_DummyTrack(void *p);
   static void deleteArray_DummyTrack(void *p);
   static void destruct_DummyTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DummyTrack*)
   {
      ::DummyTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DummyTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DummyTrack", ::DummyTrack::Class_Version(), "./DummyTrack.h", 7,
                  typeid(::DummyTrack), DefineBehavior(ptr, ptr),
                  &::DummyTrack::Dictionary, isa_proxy, 4,
                  sizeof(::DummyTrack) );
      instance.SetNew(&new_DummyTrack);
      instance.SetNewArray(&newArray_DummyTrack);
      instance.SetDelete(&delete_DummyTrack);
      instance.SetDeleteArray(&deleteArray_DummyTrack);
      instance.SetDestructor(&destruct_DummyTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DummyTrack*)
   {
      return GenerateInitInstanceLocal((::DummyTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DummyTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *DummyTrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DummyTrack::Class_Name()
{
   return "DummyTrack";
}

//______________________________________________________________________________
const char *DummyTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DummyTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DummyTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DummyTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DummyTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DummyTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DummyTrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DummyTrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void DummyTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class DummyTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(DummyTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(DummyTrack::Class(),this);
   }
}

//______________________________________________________________________________
void DummyTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DummyTrack.
      TClass *R__cl = ::DummyTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdg_id", &pdg_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track_id", &track_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_mass", &init_mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_px", &init_px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_py", &init_py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_pz", &init_pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_x", &init_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_y", &init_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_z", &init_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init_t", &init_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exit_px", &exit_px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exit_py", &exit_py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exit_pz", &exit_pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exit_x", &exit_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exit_y", &exit_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exit_z", &exit_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exit_t", &exit_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track_length", &track_length);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep", &edep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep_x", &edep_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep_y", &edep_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep_z", &edep_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qedep", &Qedep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qedep_x", &Qedep_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qedep_y", &Qedep_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qedep_z", &Qedep_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep_notinLS", &edep_notinLS);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DummyTrack(void *p) {
      return  p ? new(p) ::DummyTrack : new ::DummyTrack;
   }
   static void *newArray_DummyTrack(Long_t nElements, void *p) {
      return p ? new(p) ::DummyTrack[nElements] : new ::DummyTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_DummyTrack(void *p) {
      delete ((::DummyTrack*)p);
   }
   static void deleteArray_DummyTrack(void *p) {
      delete [] ((::DummyTrack*)p);
   }
   static void destruct_DummyTrack(void *p) {
      typedef ::DummyTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DummyTrack

namespace ROOT {
   void vectorlEDummyTrackgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEDummyTrackgR_Dictionary();
   static void *new_vectorlEDummyTrackgR(void *p = 0);
   static void *newArray_vectorlEDummyTrackgR(Long_t size, void *p);
   static void delete_vectorlEDummyTrackgR(void *p);
   static void deleteArray_vectorlEDummyTrackgR(void *p);
   static void destruct_vectorlEDummyTrackgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<DummyTrack>*)
   {
      vector<DummyTrack> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<DummyTrack>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<DummyTrack>", -2, "prec_stl/vector", 49,
                  typeid(vector<DummyTrack>), DefineBehavior(ptr, ptr),
                  0, &vectorlEDummyTrackgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<DummyTrack>) );
      instance.SetNew(&new_vectorlEDummyTrackgR);
      instance.SetNewArray(&newArray_vectorlEDummyTrackgR);
      instance.SetDelete(&delete_vectorlEDummyTrackgR);
      instance.SetDeleteArray(&deleteArray_vectorlEDummyTrackgR);
      instance.SetDestructor(&destruct_vectorlEDummyTrackgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<DummyTrack> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<DummyTrack>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEDummyTrackgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<DummyTrack>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEDummyTrackgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DummyTrack> : new vector<DummyTrack>;
   }
   static void *newArray_vectorlEDummyTrackgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<DummyTrack>[nElements] : new vector<DummyTrack>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEDummyTrackgR(void *p) {
      delete ((vector<DummyTrack>*)p);
   }
   static void deleteArray_vectorlEDummyTrackgR(void *p) {
      delete [] ((vector<DummyTrack>*)p);
   }
   static void destruct_vectorlEDummyTrackgR(void *p) {
      typedef vector<DummyTrack> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<DummyTrack>

/********************************************************
* ../src/DummyTrackDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDummyTrackDict();

extern "C" void G__set_cpp_environmentDummyTrackDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DummyTrack.h");
  G__cpp_reset_tagtableDummyTrackDict();
}
#include <new>
extern "C" int G__cpp_dllrevDummyTrackDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DummyTrack */
static int G__DummyTrackDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DummyTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DummyTrack[n];
     } else {
       p = new((void*) gvp) DummyTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DummyTrack;
     } else {
       p = new((void*) gvp) DummyTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DummyTrack*) G__getstructoffset())->getPDGID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DummyTrack*) G__getstructoffset())->getTrackID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getInitMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getInitPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getInitPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getInitPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getInitX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getInitY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getInitZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DummyTrack*) G__getstructoffset())->getInitT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getExitPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getExitPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getExitPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getExitX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getExitY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getExitZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DummyTrack*) G__getstructoffset())->getExitT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getTrackLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getEdep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getEdepX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getEdepY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getEdepZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getQEdep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getQEdepX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getQEdepY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getQEdepZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((DummyTrack*) G__getstructoffset())->getEdepNotInLS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setPDGID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setTrackID((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitMass((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitPx((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitPy((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitPz((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setInitT((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setExitPx((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setExitPy((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setExitPz((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setExitX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setExitY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setExitZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setExitT((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setTrackLength((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setEdep((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setEdepX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setEdepY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setEdepZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setQEdep((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setQEdepX((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setQEdepY((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setQEdepZ((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->setEdepNotInLS((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DummyTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DummyTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DummyTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DummyTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DummyTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DummyTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DummyTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DummyTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_168_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DummyTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DummyTrackDict_168_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DummyTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DummyTrack(*(DummyTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DummyTrack G__TDummyTrack;
static int G__DummyTrackDict_168_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DummyTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DummyTrack*) (soff+(sizeof(DummyTrack)*i)))->~G__TDummyTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DummyTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DummyTrack*) (soff))->~G__TDummyTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DummyTrackDict_168_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DummyTrack* dest = (DummyTrack*) G__getstructoffset();
   *dest = *(DummyTrack*) libp->para[0].ref;
   const DummyTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<DummyTrack,allocator<DummyTrack> > */
static int G__DummyTrackDict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DummyTrack,allocator<DummyTrack> >::reference obj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->at((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyTrack,allocator<DummyTrack> >::const_reference obj = ((const vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->at((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyTrack,allocator<DummyTrack> >::iterator* pobj;
         vector<DummyTrack,allocator<DummyTrack> >::iterator xobj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->begin();
         pobj = new vector<DummyTrack,allocator<DummyTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyTrack,allocator<DummyTrack> >::iterator* pobj;
         vector<DummyTrack,allocator<DummyTrack> >::iterator xobj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->end();
         pobj = new vector<DummyTrack,allocator<DummyTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator* pobj;
         vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator xobj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->rbegin();
         pobj = new vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator* pobj;
         vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator xobj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->rend();
         pobj = new vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->resize((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->resize((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]), *((DummyTrack*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DummyTrack,allocator<DummyTrack> >::reference obj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->operator[]((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyTrack,allocator<DummyTrack> >::const_reference obj = ((const vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->operator[]((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyTrack,allocator<DummyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyTrack,allocator<DummyTrack> >[n];
     } else {
       p = new((void*) gvp) vector<DummyTrack,allocator<DummyTrack> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyTrack,allocator<DummyTrack> >;
     } else {
       p = new((void*) gvp) vector<DummyTrack,allocator<DummyTrack> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyTrack,allocator<DummyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyTrack,allocator<DummyTrack> >((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]), *(DummyTrack*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<DummyTrack,allocator<DummyTrack> >((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]), *(DummyTrack*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<DummyTrack,allocator<DummyTrack> >((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<DummyTrack,allocator<DummyTrack> >((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyTrack,allocator<DummyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DummyTrack,allocator<DummyTrack> >(*(vector<DummyTrack,allocator<DummyTrack> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<DummyTrack,allocator<DummyTrack> >(*(vector<DummyTrack,allocator<DummyTrack> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<DummyTrack,allocator<DummyTrack> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<DummyTrack,allocator<DummyTrack> >(*((vector<DummyTrack,allocator<DummyTrack> >::const_iterator*) G__int(libp->para[0])), *((vector<DummyTrack,allocator<DummyTrack> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<DummyTrack,allocator<DummyTrack> >(*((vector<DummyTrack,allocator<DummyTrack> >::const_iterator*) G__int(libp->para[0])), *((vector<DummyTrack,allocator<DummyTrack> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DummyTrack,allocator<DummyTrack> >& obj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->operator=(*(vector<DummyTrack,allocator<DummyTrack> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->reserve((vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DummyTrack& obj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const DummyTrack& obj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->push_back(*(DummyTrack*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->swap(*(vector<DummyTrack,allocator<DummyTrack> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<DummyTrack,allocator<DummyTrack> >::iterator* pobj;
         vector<DummyTrack,allocator<DummyTrack> >::iterator xobj = ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->insert(*((vector<DummyTrack,allocator<DummyTrack> >::iterator*) G__int(libp->para[0])), *(DummyTrack*) libp->para[1].ref);
         pobj = new vector<DummyTrack,allocator<DummyTrack> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->insert(*((vector<DummyTrack,allocator<DummyTrack> >::iterator*) G__int(libp->para[0])), *((vector<DummyTrack,allocator<DummyTrack> >::const_iterator*) G__int(libp->para[1]))
, *((vector<DummyTrack,allocator<DummyTrack> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->insert(*((vector<DummyTrack,allocator<DummyTrack> >::iterator*) G__int(libp->para[0])), (vector<DummyTrack,allocator<DummyTrack> >::size_type) G__int(libp->para[1])
, *(DummyTrack*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->erase(*((vector<DummyTrack,allocator<DummyTrack> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->erase(*((vector<DummyTrack,allocator<DummyTrack> >::iterator*) G__int(libp->para[0])), *((vector<DummyTrack,allocator<DummyTrack> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DummyTrackDict_170_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<DummyTrack,allocator<DummyTrack> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<DummyTrack,allocator<DummyTrack> > G__TvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR;
static int G__DummyTrackDict_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<DummyTrack,allocator<DummyTrack> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<DummyTrack,allocator<DummyTrack> >*) (soff+(sizeof(vector<DummyTrack,allocator<DummyTrack> >)*i)))->~G__TvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<DummyTrack,allocator<DummyTrack> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<DummyTrack,allocator<DummyTrack> >*) (soff))->~G__TvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DummyTrack */

/* vector<DummyTrack,allocator<DummyTrack> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDummyTrackDict {
 public:
  G__Sizep2memfuncDummyTrackDict(): p(&G__Sizep2memfuncDummyTrackDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDummyTrackDict::*p)();
};

size_t G__get_sizep2memfuncDummyTrackDict()
{
  G__Sizep2memfuncDummyTrackDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDummyTrackDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack))) {
     DummyTrack *G__Lderived;
     G__Lderived=(DummyTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack),G__get_linked_tagnum(&G__DummyTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDummyTrackDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DummyTrack>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack),256,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack),1,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack),257,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DummyTrack */
static void G__setup_memvarDummyTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack));
   { DummyTrack *p; p=(DummyTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"pdg_id=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"track_id=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"init_mass=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"init_px=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"init_py=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"init_pz=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"init_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"init_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"init_z=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"init_t=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"exit_px=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"exit_py=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"exit_pz=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"exit_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"exit_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"exit_z=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"exit_t=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"track_length=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep_z=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qedep=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qedep_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qedep_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qedep_z=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep_notinLS=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DummyTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<DummyTrack,allocator<DummyTrack> > */
static void G__setup_memvarvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   { vector<DummyTrack,allocator<DummyTrack> > *p; p=(vector<DummyTrack,allocator<DummyTrack> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDummyTrackDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDummyTrack(void) {
   /* DummyTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack));
   G__memfunc_setup("DummyTrack",1025,G__DummyTrackDict_168_0_1, 105, G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPDGID",680,G__DummyTrackDict_168_0_2, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackID",962,G__DummyTrackDict_168_0_3, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitMass",1128,G__DummyTrackDict_168_0_4, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitPx",924,G__DummyTrackDict_168_0_5, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitPy",925,G__DummyTrackDict_168_0_6, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitPz",926,G__DummyTrackDict_168_0_7, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitX",812,G__DummyTrackDict_168_0_8, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitY",813,G__DummyTrackDict_168_0_9, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitZ",814,G__DummyTrackDict_168_0_10, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitT",808,G__DummyTrackDict_168_0_11, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitPx",930,G__DummyTrackDict_168_0_12, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitPy",931,G__DummyTrackDict_168_0_13, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitPz",932,G__DummyTrackDict_168_0_14, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitX",818,G__DummyTrackDict_168_0_15, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitY",819,G__DummyTrackDict_168_0_16, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitZ",820,G__DummyTrackDict_168_0_17, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExitT",814,G__DummyTrackDict_168_0_18, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackLength",1431,G__DummyTrackDict_168_0_19, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdep",702,G__DummyTrackDict_168_0_20, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdepX",790,G__DummyTrackDict_168_0_21, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdepY",791,G__DummyTrackDict_168_0_22, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdepZ",792,G__DummyTrackDict_168_0_23, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQEdep",783,G__DummyTrackDict_168_0_24, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQEdepX",871,G__DummyTrackDict_168_0_25, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQEdepY",872,G__DummyTrackDict_168_0_26, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQEdepZ",873,G__DummyTrackDict_168_0_27, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdepNotInLS",1349,G__DummyTrackDict_168_0_28, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPDGID",692,G__DummyTrackDict_168_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackID",974,G__DummyTrackDict_168_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitMass",1140,G__DummyTrackDict_168_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitPx",936,G__DummyTrackDict_168_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitPy",937,G__DummyTrackDict_168_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitPz",938,G__DummyTrackDict_168_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitX",824,G__DummyTrackDict_168_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitY",825,G__DummyTrackDict_168_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitZ",826,G__DummyTrackDict_168_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitT",820,G__DummyTrackDict_168_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitPx",942,G__DummyTrackDict_168_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitPy",943,G__DummyTrackDict_168_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitPz",944,G__DummyTrackDict_168_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitX",830,G__DummyTrackDict_168_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitY",831,G__DummyTrackDict_168_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitZ",832,G__DummyTrackDict_168_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitT",826,G__DummyTrackDict_168_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackLength",1443,G__DummyTrackDict_168_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdep",714,G__DummyTrackDict_168_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdepX",802,G__DummyTrackDict_168_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdepY",803,G__DummyTrackDict_168_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdepZ",804,G__DummyTrackDict_168_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQEdep",795,G__DummyTrackDict_168_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQEdepX",883,G__DummyTrackDict_168_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQEdepY",884,G__DummyTrackDict_168_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQEdepZ",885,G__DummyTrackDict_168_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdepNotInLS",1361,G__DummyTrackDict_168_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DummyTrackDict_168_0_56, 85, G__get_linked_tagnum(&G__DummyTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DummyTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DummyTrackDict_168_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DummyTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DummyTrackDict_168_0_58, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DummyTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DummyTrackDict_168_0_59, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DummyTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DummyTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DummyTrackDict_168_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DummyTrackDict_168_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DummyTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DummyTrackDict_168_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DummyTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DummyTrackDict_168_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DummyTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DummyTrackDict_168_0_67, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DummyTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DummyTrack", 1025, G__DummyTrackDict_168_0_68, (int) ('i'), G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), -1, 0, 1, 1, 1, 0, "u 'DummyTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DummyTrack", 1151, G__DummyTrackDict_168_0_69, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DummyTrackDict_168_0_70, (int) ('u'), G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), -1, 1, 1, 1, 1, 0, "u 'DummyTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR(void) {
   /* vector<DummyTrack,allocator<DummyTrack> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR));
   G__memfunc_setup("at",213,G__DummyTrackDict_170_0_1, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__DummyTrackDict_170_0_2, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__DummyTrackDict_170_0_3, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__DummyTrackDict_170_0_4, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__DummyTrackDict_170_0_5, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__DummyTrackDict_170_0_6, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__DummyTrackDict_170_0_7, 107, -1, G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__DummyTrackDict_170_0_8, 107, -1, G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DummyTrackDict_170_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__DummyTrackDict_170_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - sz u 'DummyTrack' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__DummyTrackDict_170_0_11, 107, -1, G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__DummyTrackDict_170_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DummyTrackDict_170_0_13, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DummyTrackDict_170_0_14, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), G__defined_typename("vector<DummyTrack,allocator<DummyTrack> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyTrack,allocator<DummyTrack> >",3990,G__DummyTrackDict_170_0_15, 105, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyTrack,allocator<DummyTrack> >",3990,G__DummyTrackDict_170_0_16, 105, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - n u 'DummyTrack' - 11 'DummyTrack()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyTrack,allocator<DummyTrack> >",3990,G__DummyTrackDict_170_0_17, 105, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<DummyTrack,allocator<DummyTrack> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<DummyTrack,allocator<DummyTrack> >",3990,G__DummyTrackDict_170_0_18, 105, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' 'vector<DummyTrack,allocator<DummyTrack> >::const_iterator' 10 - first u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' 'vector<DummyTrack,allocator<DummyTrack> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DummyTrackDict_170_0_19, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<DummyTrack,allocator<DummyTrack> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__DummyTrackDict_170_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__DummyTrackDict_170_0_21, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__DummyTrackDict_170_0_22, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_DummyTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__DummyTrackDict_170_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DummyTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__DummyTrackDict_170_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DummyTrack,allocator<DummyTrack> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DummyTrackDict_170_0_25, 117, G__get_linked_tagnum(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' - 0 - position u 'DummyTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DummyTrackDict_170_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' - 0 - position u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' 'vector<DummyTrack,allocator<DummyTrack> >::const_iterator' 10 - first "
"u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' 'vector<DummyTrack,allocator<DummyTrack> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__DummyTrackDict_170_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' - 0 - position k - 'vector<DummyTrack,allocator<DummyTrack> >::size_type' 0 - n "
"u 'DummyTrack' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__DummyTrackDict_170_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DummyTrackDict_170_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__DummyTrackDict_170_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' - 0 - first u 'vector<DummyTrack,allocator<DummyTrack> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DummyTrackDict_170_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<DummyTrack,allocator<DummyTrack> >", 4116, G__DummyTrackDict_170_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDummyTrackDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDummyTrackDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDummyTrackDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DummyTrackDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_DummyTrack = { "DummyTrack" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR = { "vector<DummyTrack,allocator<DummyTrack> >" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiterator = { "vector<DummyTrack,allocator<DummyTrack> >::iterator" , 99 , -1 };
G__linked_taginfo G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<DummyTrack,allocator<DummyTrack> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDummyTrackDict() {
  G__DummyTrackDictLN_TClass.tagnum = -1 ;
  G__DummyTrackDictLN_TBuffer.tagnum = -1 ;
  G__DummyTrackDictLN_TMemberInspector.tagnum = -1 ;
  G__DummyTrackDictLN_TObject.tagnum = -1 ;
  G__DummyTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DummyTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DummyTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DummyTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DummyTrackDictLN_DummyTrack.tagnum = -1 ;
  G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR.tagnum = -1 ;
  G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiterator.tagnum = -1 ;
  G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDummyTrackDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_DummyTrack),sizeof(DummyTrack),-1,292096,(char*)NULL,G__setup_memvarDummyTrack,G__setup_memfuncDummyTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR),sizeof(vector<DummyTrack,allocator<DummyTrack> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR,G__setup_memfuncvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgR);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_vectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DummyTrackDictLN_reverse_iteratorlEvectorlEDummyTrackcOallocatorlEDummyTrackgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDummyTrackDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDummyTrackDict()");
  G__set_cpp_environmentDummyTrackDict();
  G__cpp_setup_tagtableDummyTrackDict();

  G__cpp_setup_inheritanceDummyTrackDict();

  G__cpp_setup_typetableDummyTrackDict();

  G__cpp_setup_memvarDummyTrackDict();

  G__cpp_setup_memfuncDummyTrackDict();
  G__cpp_setup_globalDummyTrackDict();
  G__cpp_setup_funcDummyTrackDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDummyTrackDict();
  return;
}
class G__cpp_setup_initDummyTrackDict {
  public:
    G__cpp_setup_initDummyTrackDict() { G__add_setup_func("DummyTrackDict",(G__incsetup)(&G__cpp_setupDummyTrackDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDummyTrackDict() { G__remove_setup_func("DummyTrackDict"); }
};
G__cpp_setup_initDummyTrackDict G__cpp_setup_initializerDummyTrackDict;

