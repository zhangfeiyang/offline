// This is a HepEVT generator of AmC neutron source

// Modified from Wenqiang Gu's PuC generator
// wenqiang.gu@sjtu.edu.cn, 27th, June, 2011

// Modified by Zeyuan Yu
// yuzy@ihep.ac.cn, Sep. 27, 2016

#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <fstream>
#include <math.h>

#include <CLHEP/Vector/ThreeVector.h>
#include <CLHEP/Random/Randomize.h>
#include <CLHEP/Units/PhysicalConstants.h>

#include "TFile.h"
#include "TH1.h"
#include "TH2.h"
#include "TCanvas.h"
#include "TRandom.h"
#include "TMath.h"

using namespace std;
using namespace CLHEP;

void ProcessArgs(int argc, char** argv, long* rseed, char** outfilename, 
		 unsigned int* nevents );
void Usage();


int main(int argc, char** argv) {
  long rseed = 0;
  char* outFilename = NULL;
  unsigned int nEvents = 1000000000; // a billion. Default to something big for piping 
  ProcessArgs(argc, argv, &rseed, &outFilename, &nEvents);
  
  FILE* stream = stdout;
  if( outFilename!=NULL ) {
    stream = fopen(outFilename, "w");
    if( stream==NULL ) {
      printf("Please enter a valid filename.\n");
      Usage();
      exit(0);
    }
  }
  HepRandom::setTheSeed(rseed);
  gRandom->SetSeed(rseed);
  //start by printing some information to comment lines
  fprintf(stream, "# File generated by %s.\n", argv[0]);
  fprintf(stream, "# Ransom seed for generator = %ld.\n", rseed);
  

  // The root file used by this generator should be located at 
  std::string neutronAll, ratioData;
  const char* prefix = getenv("AMCROOT");
  if(prefix) {
    if(strlen(prefix)>0) {
      std::string newname = prefix;
      neutronAll = newname + "/data/AmCNeutron.root";
      ratioData = newname + "/data/branch.dat";
    }
    else {
      printf("AmC data not found.\n");
      exit(0);
    }
  }
  

  TFile  *rootFile1 = TFile::Open(neutronAll.c_str());
  if(!(rootFile1->IsOpen())){
    cout << "Can not open  AmCNeutron.root. " << endl;
    exit(0);
  }
  TH1F *h0 = (TH1F*)rootFile1->Get("nEground");
  TH1F *h1 = (TH1F*)rootFile1->Get("nEexcited1");
  TH1F *h2 = (TH1F*)rootFile1->Get("nEexcited2");
  ifstream in(ratioData.c_str());
  vector<double> ratioVec;
  while(!in.eof()){
    double tmp;
    in >> tmp;
    ratioVec.push_back(tmp);
  }

  double Tn(0);
  double cosTheta(0), theta(0), azimuth(0); // angles used
  Hep3Vector p0; // neutron momentum vector. Unit GeV/c
  Hep3Vector p1; // gamma momentum vector. Unit GeV/c
  double ratio[3]={0};
  // set the branch range in (0,1)
  for(int i=0; i<3; ++i)
    for(int j=0; j<=i; ++j)
        ratio[i] += ratioVec[j];


  for( unsigned int i=0 ; i<nEvents ; i++ ) {

    double rand1 = RandFlat::shoot();
    if(rand1 < ratio[0]) {// Gnd state
    	Tn = h0->GetRandom();
    	Tn *= MeV;
    	cosTheta = RandFlat::shoot(-1,1);
    	azimuth = RandFlat::shoot( 2.0*M_PI );
    	double momentum = sqrt(Tn*Tn + 2*Tn*neutron_mass_c2);
    	p0.setRThetaPhi(momentum, acos(cosTheta), azimuth);
    
    	fprintf(stream, "1\n");
    	fprintf(stream, "1\t2112 0 0 %e %e %e %e\n", p0.x()/GeV, p0.y()/GeV, p0.z()/GeV, neutron_mass_c2/GeV );
    }
    else if(rand1 >= ratio[0] && rand1 < ratio[1]) {
    // first excited state
    	Tn = h1->GetRandom();
    	Tn *= MeV;
    	cosTheta = RandFlat::shoot(-1,1);
    	azimuth = RandFlat::shoot( 2.0*M_PI );
    	double momentum = sqrt(Tn*Tn + 2*Tn*neutron_mass_c2);
    	p0.setRThetaPhi(momentum, acos(cosTheta), azimuth);
    
    	cosTheta = RandFlat::shoot(-1,1);
    	azimuth = RandFlat::shoot( 2.0*M_PI );
    	p1.setRThetaPhi(1, acos(cosTheta), azimuth);
    	p1*=0.511*MeV;

    	fprintf(stream, "3\n");
    	fprintf(stream, "1\t2112 0 0 %e %e %e %e\n", p0.x()/GeV, p0.y()/GeV, p0.z()/GeV, neutron_mass_c2/GeV );
    	fprintf(stream, "1\t22 0 0 %e %e %e 0.0\n", p1.x()/GeV, p1.y()/GeV, p1.z()/GeV );
    	fprintf(stream, "1\t22 0 0 %e %e %e 0.0\n", -p1.x()/GeV, -p1.y()/GeV, -p1.z()/GeV);
    }
    else if(rand1 >= ratio[1] && rand1 <= ratio[2]){
    // second excited state
    	Tn = h2->GetRandom();
    	Tn *= MeV;
    	cosTheta = RandFlat::shoot(-1,1);
    	azimuth = RandFlat::shoot( 2.0*M_PI );
    	double momentum = sqrt(Tn*Tn + 2*Tn*neutron_mass_c2);
    	p0.setRThetaPhi(momentum, acos(cosTheta), azimuth);

    	cosTheta = RandFlat::shoot(-1,1);
    	azimuth = RandFlat::shoot( 2.0*M_PI );
    	p1.setRThetaPhi(1, acos(cosTheta), azimuth);
    	p1*=6.13*MeV;

    	fprintf(stream, "2\n");
    	fprintf(stream, "1\t2112 0 0 %e %e %e %e\n", p0.x()/GeV, p0.y()/GeV, p0.z()/GeV, neutron_mass_c2/GeV );
    	fprintf(stream, "1\t22 0 0 %e %e %e 0.0\n", p1.x()/GeV, p1.y()/GeV, p1.z()/GeV );
    }
  }
  return 0;
}



void ProcessArgs(int argc, char** argv, long *rseed, 
		 char** outfilename, unsigned int* nevents) {
  int i;
  for( i=1 ; i<argc ; i++ ) {
    if( strcmp(argv[i], "-seed")==0 ) {
      i++;
      sscanf(argv[i], "%ld", rseed);
    }
    else if( strcmp(argv[i], "-o")==0 ) {
      i++;
      *outfilename = new char[strlen(argv[i]) +1];
      strcpy(*outfilename, argv[i]);
    } 
    else if( strcmp(argv[i], "-n")==0 ) { 
      i++;
      sscanf(argv[i], "%ud", nevents);
    }  
    else {
      Usage();
      exit(0);
    }
  }
}

void Usage() {
  printf("AmC.exe [-seed seed] [-o outputfilename] [-n nevents]\n");
	
}


