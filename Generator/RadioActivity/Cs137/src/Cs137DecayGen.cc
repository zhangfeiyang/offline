//This is a HepEVT generator of Cs137 decay
//Modified from N12 generator by Fengpeng An

//\author: Gaosong Li
//Modified by Feiyang Zhang, Sep12th, 2016


#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <math.h>

#include <CLHEP/Vector/ThreeVector.h>
#include <CLHEP/Random/Randomize.h>
#include <CLHEP/Units/PhysicalConstants.h>

#include "TFile.h"
#include "TH1F.h"
#include "TCanvas.h"
#include "TRandom.h"
#include "TMath.h"

using namespace std;
using namespace CLHEP;

void ProcessArgs(int argc, char** argv, long* rseed, char** outfilename, 
		 unsigned int* nevents );
void Usage();


int main(int argc, char** argv) {
  long rseed = 0;
  char* outFilename = NULL;
  unsigned int nEvents = 1000000000; // a billion. Default to something big for piping 
  ProcessArgs(argc, argv, &rseed, &outFilename, &nEvents);
  Hep3Vector p0; // the beta  momentum vector. Unit GeV/c
  Hep3Vector p1; // the beta  momentum vector. Unit GeV/c
  Hep3Vector p2; // the gamma momentum vector. Unit GeV/c
  Hep3Vector p3; // the conversion electron momentum vector. Unit GeV/c
  Hep3Vector p4; // the conversion electron momentum vector. Unit GeV/c
  
  FILE* stream = stdout;
  if( outFilename!=NULL ) {
    stream = fopen(outFilename, "w");
    if( stream==NULL ) {
      printf("Please enter a valid filename.\n");
      Usage();
      exit(0);
    }
  }
  HepRandom::setTheSeed(rseed);
   gRandom->SetSeed(rseed);
  //start by printing some information to comment lines
  fprintf(stream, "# File generated by %s.\n", argv[0]);
  fprintf(stream, "# Random seed for generator = %ld.\n", rseed);
  

// The root file used by this generator should be located at 
// $SITEROOT/dybgaudi/Generators/RadioActivity/N12/
    std::string specfilename = "CesiumBetaSpec.root";
    const char* prefix = getenv("CS137ROOT");
	
    if(prefix) {
        if(strlen(prefix)>0) {
            std::string newname = prefix;
            newname += "/src/";
            newname += specfilename;
            specfilename = newname;
        }
    }

//std::string specfilename = "/home/lgs/Cesium137/CesiumBetaSpec.root";
//cout<<specfilename<<endl;

  TFile *betaSpec = TFile::Open(specfilename.c_str());

    if(!betaSpec)
        cout << "Can not open CesiumBetaSpec.root\n"
               << "Make sure SITEROOT or CesiumBetaSpectrum.root is set to it's location.\n"
               << "rootfile location is at $SITEROOT/dybgaudi/Generators/RadioActivity/Cs137/"<< endl;
    if(!(betaSpec->IsOpen()))
        cout << "Can not open CesiumBetaSpec.root\n"
               << "Make sure SITEROOT is set to it's location.\n"
               << "rootfile location is at $SITEROOT/dybgaudi/Generators/RadioActivity/Cs137/" << endl;

  double cosTheta, theta, azimuth; // angles used
  double bf;
  unsigned int i;

  TH1F *hB1 = (TH1F*)betaSpec->Get("Cs137Branch1");
  TH1F *hB2 = (TH1F*)betaSpec->Get("Cs137Branch2");
  for( i=0 ; i<nEvents ; i++ ) {
    bf = RandFlat::shoot(0.,1.);
  
    if(bf<0.4864){//beta spectrum T_end=514keV
      cosTheta = RandFlat::shoot(-1, 1);
      azimuth = RandFlat::shoot( 2.0*M_PI );
      theta = acos(cosTheta);
      p0.setRThetaPhi(1, acos(cosTheta), azimuth);
      double ke = hB1->GetRandom();
      double pe = sqrt(ke*ke + 2*ke*electron_mass_c2/keV);
      p0=p0*pe*keV;
      fprintf(stream, "1\n");
      fprintf(stream, "1\t11 0 0 %e %e %e %e\n", p0.x()/GeV, p0.y()/GeV, p0.z()/GeV, electron_mass_c2/GeV );
      }

    else if(bf<0.5137){//beta spectrum T_end=1176keV
      cosTheta = RandFlat::shoot(-1, 1);
      azimuth = RandFlat::shoot( 2.0*M_PI );
      theta = acos(cosTheta);
      p1.setRThetaPhi(1, acos(cosTheta), azimuth);
      double ke = hB2->GetRandom();
      double pe = sqrt(ke*ke + 2*ke*electron_mass_c2/keV);
      p1=p1*pe*keV;
      fprintf(stream, "1\n");
      fprintf(stream, "1\t11 0 0 %e %e %e %e\n", p1.x()/GeV, p1.y()/GeV, p1.z()/GeV, electron_mass_c2/GeV );
      }


     else if(bf<0.9528){//gamma
      	cosTheta = RandFlat::shoot(-1, 1);
      	azimuth = RandFlat::shoot( 2.0*M_PI );
      	theta = acos(cosTheta);
      	p2.setRThetaPhi(1, acos(cosTheta), azimuth);
      	p2*=0.6617*MeV;
      	fprintf(stream, "1\n");
      	fprintf(stream, "1\t22 0 0 %e %e %e 0.0\n", p2.x()/GeV, p2.y()/GeV, p2.z()/GeV );
      	}	

     else if(bf<0.9928){//K shell conversion electron
      	cosTheta = RandFlat::shoot(-1, 1);
      	azimuth = RandFlat::shoot( 2.0*M_PI );
      	theta = acos(cosTheta);
      	p3.setRThetaPhi(1, acos(cosTheta), azimuth); 
      	double kce = 0.6242*MeV/keV;
      	double pce = sqrt(kce*kce+2*kce*electron_mass_c2/keV);
      	p3=p3*pce*keV;
      	fprintf(stream, "1\n");
      	fprintf(stream, "1\t11 0 0 %e %e %e %e\n", p3.x()/GeV, p3.y()/GeV, p3.z()/GeV, electron_mass_c2/GeV );
      	}

     else{//L shell conversion electron
        cosTheta = RandFlat::shoot(-1, 1);
        azimuth = RandFlat::shoot( 2.0*M_PI );
        theta = acos(cosTheta);
        p4.setRThetaPhi(1, acos(cosTheta), azimuth);
        double kce = 0.656*MeV/keV;
        double pce = sqrt(kce*kce+2*kce*electron_mass_c2/keV);
        p4=p4*pce*keV;
        fprintf(stream, "1\n");
        fprintf(stream, "1\t11 0 0 %e %e %e %e\n", p4.x()/GeV, p4.y()/GeV, p4.z()/GeV, electron_mass_c2/GeV );
        }

    
  }

  return 0;
}





void ProcessArgs(int argc, char** argv, long *rseed, 
				 char** outfilename, unsigned int* nevents) {
	int i;
	for( i=1 ; i<argc ; i++ ) {
		if( strcmp(argv[i], "-seed")==0 ) {
			i++;
			sscanf(argv[i], "%ld", rseed);
		                                  }
		 else if( strcmp(argv[i], "-o")==0 ) {
			i++;
			*outfilename = new char[strlen(argv[i]) +1];
			strcpy(*outfilename, argv[i]);
		                                     } 
		else if( strcmp(argv[i], "-n")==0 ) { 
			i++;
			sscanf(argv[i], "%ud", nevents);
		                                    }  
		else {
			Usage();
			exit(0);
		     }
	                           }
}

void Usage() {
	printf("Cs137.exe [-seed seed] [-o outputfilename] [-n nevents]\n");

}
