// This is a HepEVT generator of AmBe neutron 
// Modified from AmC generator by Wenqiang Gu, wenqiang.gu@sjtu.edu.cn, 16 Aug, 2012.
// Modified by Wenqiang, May5th, 2013, add the random up/down: nPz
// Modified by Feiyang Zhang Apr9th , 2014
// Modified by Zeyuan Yu, Dec. 27, 2016

#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <iostream>
#include <math.h>

#include <CLHEP/Vector/ThreeVector.h>
#include <CLHEP/Random/Randomize.h>
#include <CLHEP/Units/PhysicalConstants.h>

#include "TFile.h"
#include "TH1.h"
#include "TH2.h"
#include "TCanvas.h"
#include "TRandom.h"
#include "TMath.h"

using namespace std;
using namespace CLHEP;

void ProcessArgs(int argc, char** argv, long* rseed, char** outfilename, 
		 unsigned int* nevents );
void Usage();


int main(int argc, char** argv) {
  long rseed = 0;
  char* outFilename = NULL;
  unsigned int nEvents = 1000000000; // a billion. Default to something big for piping 
  ProcessArgs(argc, argv, &rseed, &outFilename, &nEvents);
  
  FILE* stream = stdout;
  if( outFilename!=NULL ) {
    stream = fopen(outFilename, "w");
    if( stream==NULL ) {
      printf("Please enter a valid filename.\n");
      Usage();
      exit(0);
    }
  }
  HepRandom::setTheSeed(rseed);
  gRandom->SetSeed(rseed);
  //start by printing some information to comment lines
  fprintf(stream, "# File generated by %s.\n", argv[0]);
  fprintf(stream, "# Random seed for generator = %ld.\n", rseed);
  

  // The root file used by this generator should be located at 
  // $SITEROOT/dybgaudi/Generators/RadioActivity/AmBe/
  std::string specfilename = "AmBe_neutron.root";
  std::string branchRatioData = "branch.dat";

  const char* prefix = getenv("AMBEROOT");
  if(prefix) {
    if(strlen(prefix)>0) {
      std::string newname = prefix;
      newname += "/data/";
      specfilename = newname + specfilename; 
      branchRatioData = newname + branchRatioData;

    }
  }
  
  TFile  *rootFile = TFile::Open(specfilename.c_str());
  cout<<specfilename.c_str()<<endl;
  if(!rootFile)
    cout << "Can not open "<<specfilename.c_str()<<". "
	 << "Make sure SITEROOT or AmBe_neutron.root is set to it's location."
	 << "rootfile location is at $SITEROOT/dybgaudi/Generators/RadioActivity/AmBe/" << endl;
  if(!(rootFile->IsOpen()))
    cout << "Can not open  AmBe_neutron.root. "
	 << "Make sure SITEROOT is set to it's location."
	 << "rootfile location is at $SITEROOT/dybgaudi/Generators/RadioActivity/AmBe/" << endl;
  
  TH2F *h0 = (TH2F*)rootFile->Get("hEnergyAngle_GS");
  TH2F *h1 = (TH2F*)rootFile->Get("hEnergyAngle_1st");
  // 2nd excited states is 8Be+alpha, while not neutron, ref doc-8985
  // ignore alpha quenching
  //TH2F *h2 = (TH2F*)rootFile->Get("hEnergyAngle_2nd");

  ifstream in(branchRatioData.c_str());
  vector<double> ratioVec;
  while(!in.eof()){
    double tmp;
    in >> tmp;
    ratioVec.push_back(tmp);
  }
  double ratio[2]={0.,0.};
  ratio[0] = ratioVec[0];
  ratio[1] = 1.0;
  
  double Tn(0);
  double cosTheta(0), theta(0), azimuth(0); // angles used
  Hep3Vector pn; // neutron momentum vector. Unit GeV/c
  Hep3Vector p1; // gamma momentum vector. Unit Gev/c
  Hep3Vector p2; // gamma momentum vector. Unit Gev/c
  for( unsigned int i=0 ; i<nEvents ; i++ ) {

    double rand = RandFlat::shoot();
    double nPz = RandFlat::shoot(-1,1); // random z direction, -1 or 1.
    // we have two independent AmBe srcs in the whole src
    if(nPz<0) nPz = -1.0;
    else nPz = 1.0;

    if(rand < ratio[0]){// Gnd state
        h0->GetRandom2(cosTheta, Tn);
        Tn *= MeV;
        azimuth = RandFlat::shoot( 2.0*M_PI );
        double momentum = sqrt(Tn*Tn + 2*Tn*neutron_mass_c2);
        
        pn.setRThetaPhi(momentum, acos(cosTheta), azimuth);
        
        fprintf(stream, "1\n");
        fprintf(stream, "1\t2112 0 0 %e %e %e %e\n", nPz*pn.x()/GeV, nPz*pn.y()/GeV, nPz*pn.z()/GeV, neutron_mass_c2/GeV );
    }
    else if(rand >= ratio[0] && rand<ratio[1]) {
    // 1st Ex state
        h1->GetRandom2(cosTheta, Tn);
        Tn *= MeV;
        azimuth = RandFlat::shoot( 2.0*M_PI );
        double momentum = sqrt(Tn*Tn + 2*Tn*neutron_mass_c2);
        pn.setRThetaPhi(momentum, acos(cosTheta), azimuth);

        cosTheta = RandFlat::shoot(-1,1);
        azimuth = RandFlat::shoot( 2.0*M_PI );
        p1.setRThetaPhi(1, acos(cosTheta), azimuth);
        p1*=4.439*MeV;
        
        fprintf(stream, "2\n");
        fprintf(stream, "1\t2112 0 0 %e %e %e %e\n", nPz*pn.x()/GeV, nPz*pn.y()/GeV, nPz*pn.z()/GeV, neutron_mass_c2/GeV );
        fprintf(stream, "1\t22 0 0 %e %e %e 0.0\n", nPz*p1.x()/GeV, nPz*p1.y()/GeV, nPz*p1.z()/GeV );

    }
    //else if(rand >= ratio[1] && rand<ratio[2]){
    ////2nd Ex state, decay to 1st Ex state with 3.215 MeV gamma
    //    h2->GetRandom2(cosTheta, Tn);
    //    Tn *= MeV;
    //    azimuth = RandFlat::shoot( 2.0*M_PI );
    //    double momentum = sqrt(Tn*Tn + 2*Tn*neutron_mass_c2);
    //    pn.setRThetaPhi(momentum, acos(cosTheta), azimuth);
    //    
    //    cosTheta = RandFlat::shoot(-1,1);
    //    azimuth = RandFlat::shoot( 2.0*M_PI );
    //    p1.setRThetaPhi(1, acos(cosTheta), azimuth);
    //    p1*=3.215*MeV;

    //    cosTheta = RandFlat::shoot(-1,1);
    //    azimuth = RandFlat::shoot( 2.0*M_PI );
    //    p2.setRThetaPhi(1, acos(cosTheta), azimuth);
    //    p2*=4.439*MeV;

    //    fprintf(stream, "3\n");
    //    fprintf(stream, "1\t2112 0 0 %e %e %e %e\n", nPz*pn.x()/GeV, nPz*pn.y()/GeV, nPz*pn.z()/GeV, neutron_mass_c2/GeV );
    //    fprintf(stream, "1\t22 0 0 %e %e %e 0.0\n", nPz*p1.x()/GeV, nPz*p1.y()/GeV, nPz*p1.z()/GeV );
    //    fprintf(stream, "1\t22 0 0 %e %e %e 0.0\n", nPz*p2.x()/GeV, nPz*p2.y()/GeV, nPz*p2.z()/GeV );

    //}

  }
  return 0;
}





void ProcessArgs(int argc, char** argv, long *rseed, 
		 char** outfilename, unsigned int* nevents) {
  int i;
  for( i=1 ; i<argc ; i++ ) {
    if( strcmp(argv[i], "-seed")==0 ) {
      i++;
      sscanf(argv[i], "%ld", rseed);
    }
    else if( strcmp(argv[i], "-o")==0 ) {
      i++;
      *outfilename = new char[strlen(argv[i]) +1];
      strcpy(*outfilename, argv[i]);
    } 
    else if( strcmp(argv[i], "-n")==0 ) { 
      i++;
      sscanf(argv[i], "%ud", nevents);
    }  
    else {
      Usage();
      exit(0);
    }
  }
}

void Usage() {
  printf("AmBe.exe [-seed seed] [-o outputfilename] [-n nevents]\n");
	
}


