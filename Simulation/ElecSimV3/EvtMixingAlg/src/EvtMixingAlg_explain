#include "EvtMixingAlg.h"
#include "SniperKernel/AlgFactory.h"
#include "BufferMemMgr/IDataMemMgr.h"
#include "DataRegistritionSvc/DataRegistritionSvc.h"
#include "SniperKernel/Incident.h"
#include "InputReviser/InputReviser.h"
#include "Identifier/CdID.h"
#include "Event/SimHeader.h"
#include "Event/SimEvent.h"
#include "Event/SimPMTHit.h"
#include "Event/ElecHeader.h"
#include "Event/ElecEvent.h"
#include "Event/ElecFeeCrate.h"
#include "Event/ElecFeeChannel.h"
#include <time.h>
#include <TMath.h>
#include <TRandom.h>
#include <TStopwatch.h>
#include <TTimeStamp.h>
#include "Context/TimeStamp.h"
#include "SniperKernel/Task.h"
#include "GlobalTimeSvc/IGlobalTimeSvc.h"


using namespace std;

DECLARE_ALGORITHM(EvtMixingAlg);

EvtMixingAlg::EvtMixingAlg(const string& name):AlgBase(name)
{
    declProp("RateMap", m_rateMap);
    declProp("TaskMap", m_taskMap);

}



EvtMixingAlg::~EvtMixingAlg(){}


bool EvtMixingAlg::initialize(){


    m_totalRate = 0;
    for(map<string,double>::iterator it=m_rateMap.begin();it!=m_rateMap.end();it++){ //遍历rate map，key值是样本名value值是样本的事例率。
        m_totalRate+=it->second;  //求总的事例率, 第一个值是样本名，第二个值是事例率。
        m_firstMap.insert(std::pair<string,bool>(it->first,true));
    } //往map中插入pair元素，key值是pair的第一个值，value是pair的第二个值。定义这个map是用来帮助实现从样本中entry的抽样是从随机位置开始抽的。
    LogInfo<<"event totalRate= "<< m_totalRate << endl;

    m_mainTau=1.0/m_totalRate;
    LogInfo<< "mainTau= " << m_mainTau <<endl;

    m_memMgr_top = SniperPtr<IDataMemMgr>(getScope(),"BufferMemMgr").data();  //前边是一个模板类，直接使用构造函数即会返回一个对象，所以后面可以直接用点号使用函数

    for(map<string,string>::iterator it=m_taskMap.begin();it!=m_taskMap.end();it++){
        InputReviser* aInci = new InputReviser(it->second, true);  //普通的Incident滚动到输入文件末尾就会停止，而这个InputReviser滚动到末尾之后又从头开始继续。第一个参数是要被触发滚动的任务，第二个参数为true时循环滚动，为false时终止即停止。
        m_incidentMap.insert(make_pair(it->first, aInci));//first是sample名，second是与task名关联了的InputReviser对象。task名与sample名可以取成一样的。
    }

    SniperPtr<DataRegistritionSvc> drsSvc(getScope(),"DataRegistritionSvc");  //需要输出root文件时才需要注册。注册的作用是将基类指针和它真正的具体对象关联起来。
    if ( ! drsSvc.valid() ) {
        LogError << "Failed to get DataRegistritionSvc instance!" << std::endl;
        return false;
    }
    drsSvc->registerData("JM::SimEvent","/Event/SimEvent");

    LogInfo<<"____initialize success.____"<<endl;

    return true;
}



bool EvtMixingAlg::execute(){

    JM::EvtNavigator* Nav = get_one_event();
    double delta = gRandom -> Exp(m_mainTau);
    //delta = 10.5;

    LogInfo<<"evt time delta(s): " << delta<<endl;

    TimeStamp delta_temp(delta);
    TTimeStamp evt_time_delta(delta_temp.GetSec(), delta_temp.GetNanoSec() ); //TimeStamp class provide  more functions,but Sniper use TTimeStamp class, so need convert.

    SniperPtr<IGlobalTimeSvc> TimeSvcPtr(Task::top(),"GlobalTimeSvc");
    IGlobalTimeSvc* TimeSvc = TimeSvcPtr.data();
    TTimeStamp Evt_TimeStamp = TimeSvc->get_current_evt_time(evt_time_delta);

    LogInfo<<"Evt_TimeStamp: " << Evt_TimeStamp<<endl;
    LogInfo<<"Evt_TimeStamp second: " << Evt_TimeStamp.GetSec()<<endl;
    LogInfo<<"Evt_TimeStamp NanoSecond: " << Evt_TimeStamp.GetNanoSec()<<endl;


    package_new_event(Nav, Evt_TimeStamp);

    return true;
}


bool EvtMixingAlg::finalize(){

    return true;
}



string EvtMixingAlg::select()
{
    string sampleName;

    double ranNum = gRandom->Uniform(m_totalRate);
    double sumRate = 0;

    for(map<string,double>::iterator it=m_rateMap.begin(); it!=m_rateMap.end(); it++){
        sumRate += it->second;
        if(ranNum<sumRate){
            sampleName = it->first; //这种算法在分段图上理解更方便。
            break;
        }
    }
    return sampleName;
}


JM::EvtNavigator* EvtMixingAlg::get_one_event(){

    string sample = select();//通过不同样本的事例率抽样产生出被选中的样本,因为是混合几种样本，每次fill从几种样本中选出一个样本并从这个样本中拿出一个entry。

    //readin event data
    if( m_firstMap[sample] ){
        int entries = m_incidentMap[sample]->getEntries();
        LogInfo<<"selected sample: "<<sample <<", sample entries: " <<entries<<endl;
        int num = gRandom->Integer(entries-1);
        LogInfo<<"first evt num: "<<num<<endl;
        m_incidentMap[sample]->reset(num);//设置会从哪一个entry读数据
        m_firstMap[sample] = false; //只需要设置一次初始值
    }
    m_incidentMap[sample]->fire(); //对该样本滚动一次,即是在buffer中更新为新的event的navigator。对于mode1从python脚本中载入的是探测器模拟的root文件，对于model2从python脚本中载入的是电子学模拟好了的root文件。


    string path = m_taskMap[sample]+":/Event";//前面是python脚本里的task名
    LogInfo<<"SniperDataPtr path: " << path<<endl;
    SniperDataPtr<JM::NavBuffer> navBuf(path); //获取该任务的navigator的buffer,这个对象可以帮我们拿到navigator。
    if (navBuf.invalid()) {
        LogError << "Can't locate data: " << path << std::endl;
        return 0;
    }
    JM::EvtNavigator* Nav = navBuf->curEvt();//获取当前buffer里的navigator,有了这个就能得到数据，buffer中放的navigator，拿到了navigator就可以拿到数据。 对于model1会把几个事例混合打包出新的事例。所以这里做的是将nav中的hit放入自己的hitVector中。 对于model2则直接将Nav放入cache中即可。
    return Nav;
}


void EvtMixingAlg::package_new_event(JM::EvtNavigator* Nav, TTimeStamp EvtTimeStamp){


    JM::HeaderObject* sh=Nav->getHeader("/Event/SimEvent"); 

    if( sh==0 ){
        LogError<<"failed to get header! "<<endl;
    }
    LogDebug<< "have got header! "<< endl;
    JM::SimEvent* se=dynamic_cast<JM::SimEvent*>(sh->event()); 

    TIter next(se->getCDHits());//root的迭代器，参数是迭代对象的类型即hit。
    JM::SimPMTHit* hit = 0;

    JM::SimEvent* New_se = new JM::SimEvent;//创建新的SimEvent用来保存数据


    while( hit=(JM::SimPMTHit*)next() ){
        int pmtID = hit->getPMTID();
        double hitTime = hit->getHitTime();

        JM::SimPMTHit* sph = New_se->addCDHit();
        sph->setPMTID(pmtID);
        sph->setHitTime(hitTime);

    }


    JM::SimHeader* New_sh = new JM::SimHeader;
    New_sh->setEvent(New_se);

    JM::EvtNavigator* navigator = new JM::EvtNavigator();

    navigator->setTimeStamp(EvtTimeStamp);  //在框架里面用的是TTimeStamp，而offline里的TimeStamp跟TTimeStamp几乎一样只是增加了可以做相减的成员函数。


    navigator->addHeader("/Event/SimEvent",New_sh);
    m_memMgr_top->adopt( navigator, "/Event"); //这个对象将navigator放到sniper的buffer中

}


