
    // mute warnings in G4Element::GetElement and G4Material::GetMaterial.
    bool any_warnings = false;

    //--------- Material definition ---------
    G4Element* Gd = G4Element::GetElement("Gadolinium", any_warnings);
    if (Gd) {
        G4cout << "construct [Gadolinium] from GDML." << G4endl;
    } else {
        G4cout << "construct [Gadolinium] from code." << G4endl;
        Gd = new G4Element("Gadolinium", "Gd", 7);
        G4Isotope* aIsotope1 = new G4Isotope("Gd_152", 64, 152, 152.0*g/mole);
        G4Isotope* aIsotope2 = new G4Isotope("Gd_154", 64, 154, 154.0*g/mole);
        G4Isotope* aIsotope3 = new G4Isotope("Gd_155", 64, 155, 155.0*g/mole);
        G4Isotope* aIsotope4 = new G4Isotope("Gd_156", 64, 156, 156.0*g/mole);
        G4Isotope* aIsotope5 = new G4Isotope("Gd_157", 64, 157, 157.0*g/mole);
        G4Isotope* aIsotope6 = new G4Isotope("Gd_158", 64, 158, 158.0*g/mole);
        G4Isotope* aIsotope7 = new G4Isotope("Gd_160", 64, 160, 160.0*g/mole);

        Gd->AddIsotope(aIsotope1, 100.0*0.002*152/157.318*perCent);
        Gd->AddIsotope(aIsotope2, 100.0*0.022*154/157.318*perCent);
        Gd->AddIsotope(aIsotope3, 100.0*0.149*155/157.318*perCent);
        Gd->AddIsotope(aIsotope4, 100.0*0.206*156/157.318*perCent);
        Gd->AddIsotope(aIsotope5, 100.0*0.157*157/157.318*perCent);
        Gd->AddIsotope(aIsotope6, 100.0*0.247*158/157.318*perCent);
        Gd->AddIsotope(aIsotope7, 100.0*0.217*160/157.318*perCent);
    }

    G4Element* C = G4Element::GetElement("Carbon", any_warnings);
    if (not C) { 
        C = new G4Element("Carbon", "C" , 6., 12.01*g/mole); 
    }
    G4Element* H = G4Element::GetElement("Hydrogen", any_warnings);
    if (not H) {
        H = new G4Element("Hydrogen", "H" , 1., 1.01*g/mole);
    }
    G4Element* O  = G4Element::GetElement("Oxygen", any_warnings);
    if (not O) {
        O = new G4Element("Oxygen", "O", 8., 16.00*g/mole); 
    }
    G4Element* N  = G4Element::GetElement("Nitrogen", any_warnings);
    if (not N) {
        N = new G4Element("Nitrogen", "N", 7., 14.01*g/mole);
    }
    G4Element* Si = G4Element::GetElement("Silicon", any_warnings);
    if (not Si) {
        Si = new G4Element("Silicon", "Si", 14., 28.09*g/mole);
    }
    G4Element* Al = G4Element::GetElement("Aluminium", any_warnings);
    if (not Al) {
        Al = new G4Element("Aluminium", "Al", 13., 26.98*g/mole);
    }
    G4Element* Fe = G4Element::GetElement("Iron", any_warnings);
    if (not Fe) {
        Fe = new G4Element("Iron", "Fe", 26., 55.845*g/mole);
    }
    G4Element* Mg = G4Element::GetElement("Magnesium", any_warnings);
    if (not Mg) {
        Mg = new G4Element("Magnesium", "Mg", 12., 24.305*g/mole);
    }
    G4Element* Ca = G4Element::GetElement("Calcium", any_warnings);
    if (not Ca) {
        Ca = new G4Element("Calcium", "Ca", 20., 40.078*g/mole);
    }
    G4Element* Na = G4Element::GetElement("Sodium", any_warnings);
    if (not Na) { 
        Na = new G4Element("Sodium", "Na", 11., 22.98977*g/mole);
    }
    G4Element* K =  G4Element::GetElement("Potassium", any_warnings);
    if (not K) {
        K = new G4Element("Potassium", "K", 19., 39.0983*g/mole);
    }
    G4Element* S =  G4Element::GetElement("Sulfur", any_warnings);
    if (not S) {
        S = new G4Element("Sulfur", "S", 16., 32.066*g/mole);
    }
    G4Element* F =  G4Element::GetElement("Fluorine", any_warnings);
    if (not F) {
        F = new G4Element("Fluorine", "F", 9., 18.998*g/mole);
    }
    G4Element* Ar = G4Element::GetElement("Argon", any_warnings);
    if (not Ar) {
        Ar = new G4Element("Argon", "Ar", 18, 39.948*g/mole);
    }
    G4Element* B =  G4Element::GetElement("Boron", any_warnings);
    if (not B) { 
        B = new  G4Element("Boron",  "B", 5, 10.811*g/mole);
    }
    G4Element* Ni = G4Element::GetElement("Ni", any_warnings);
    if (not Ni) {
        Ni = new G4Element("Ni", "Ni", 28, 58.6934*g/mole);
    }
    G4Element* Cr = G4Element::GetElement("Cr", any_warnings);
    if (not Cr) {
        Cr = new G4Element("Cr", "Cr", 24, 51.9961*g/mole);
    }
    G4Element* Mn = G4Element::GetElement("Mn", any_warnings);
    if (not Mn) {
        Mn = new G4Element("Mn", "Mn", 25, 54.9381*g/mole);
    }
    G4Element* P =  G4Element::GetElement("Phosphorus", any_warnings);
    if (not P) {
        P = new G4Element("Phosphorus", "P", 15, 30.9738*g/mole);
    }
    // For Top Tracker
    G4Element* Ti = G4Element::GetElement("Titanium", any_warnings);
    if (not Ti) {
        Ti = new G4Element("Titanium", "Ti", 22, 47.867*g/mole);
    }

    Galactic = G4Material::GetMaterial("Galactic", any_warnings);
    if (not Galactic) { 
        Galactic = new G4Material("Galactic", 1., 1.01*g/mole, universe_mean_density, kStateGas, 2.73*kelvin, 3.e-18*pascal);
    }

    LS = G4Material::GetMaterial("LS", any_warnings); 
    if (LS) {
        G4cout << "LS may be constructed from GDML file." << G4endl;
    } else {
        G4cout << "construct material LS in the code." << G4endl;
        LS  = new G4Material("LS", 0.859*g/cm3, 5);
        LS->AddElement(C,  0.87924);
        LS->AddElement(H,  0.1201);
        LS->AddElement(O,  0.00034);
        //LS->AddElement(Gd, 0.0010315);
        LS->AddElement(N,  0.00027);
        LS->AddElement(S,  0.00005);

        G4MaterialPropertiesTable* LSMPT = new G4MaterialPropertiesTable();

        IDetElement* glob_info = det_elem("GlobalGeomInfo");
        bool use_param_svc = glob_info->geom_info("UseParamSvc");


        if (1 && (!use_param_svc)) { // from code
        LSMPT->AddProperty("RINDEX",   GdLSRefIndexEnergy, GdLSRefIndex, 18);
        LSMPT->AddProperty("ABSLENGTH", GdLSABSEnergy, GdLSABSLength, 502);
        LSMPT->AddProperty("FASTCOMPONENT", GdLSComEnergy, GdLSFastComponent, 275);
        LSMPT->AddProperty("SLOWCOMPONENT", GdLSComEnergy, GdLSFastComponent, 275);
        LSMPT->AddProperty("REEMISSIONPROB", GdLSReemEnergy, GdLSReem, 28);
        LSMPT->AddProperty("RAYLEIGH", GdLSRayEnergy, GdLSRayLength, 11);
        LSMPT->AddProperty("SCINTILLATIONYIELD", component, GdLSLY,2);
        LSMPT->AddProperty("RESOLUTIONSCALE", component, GdLSResolutionScale,2);
        LSMPT->AddProperty("GammaFASTTIMECONSTANT", component, GdLSFastTimeConstant,2);
        LSMPT->AddProperty("GammaSLOWTIMECONSTANT", component, GdLSSlowTimeConstant,2);
        LSMPT->AddProperty("GammaYIELDRATIO", component, GdLSYieldRatio,2);

        // add fast/slow time constant for alpha
        LSMPT->AddProperty("AlphaFASTTIMECONSTANT", component, GdLSAlphaFastTimeConstant,2);
        LSMPT->AddProperty("AlphaSLOWTIMECONSTANT", component, GdLSAlphaSlowTimeConstant,2);
        LSMPT->AddProperty("AlphaYIELDRATIO", component, GdLSAlphaYieldRatio,2);

        // add fast/slow time constant for neutron
        LSMPT->AddProperty("NeutronFASTTIMECONSTANT", component, GdLSNeutronFastTimeConstant,2);
        LSMPT->AddProperty("NeutronSLOWTIMECONSTANT", component, GdLSNeutronSlowTimeConstant,2);
        LSMPT->AddProperty("NeutronYIELDRATIO", component, GdLSNeutronYieldRatio,2);

        // add fast/slow time constant for reemission
        LSMPT->AddProperty("ReemissionFASTTIMECONSTANT", component, GdLSReemissionFastTimeConstant,2);
        LSMPT->AddProperty("ReemissionSLOWTIMECONSTANT", component, GdLSReemissionSlowTimeConstant,2);
        LSMPT->AddProperty("ReemissionYIELDRATIO", component, GdLSReemissionYieldRatio,2);

        // Following lines are for new Optical Model.
        // + PART I: Emission by PPO
        // + PART II: Absorption and Re-emission by PPO, bis-MSB and LAB
        //   Need:
        //     + XXXABSLENGTH
        //     + XXXREEMISSIONPROB
        //     + XXXCOMPONENT, maybe FAST/SLOW
        //     + XXXTIMECONSTANT, maybe FAST/SLOW
        //   XXX in [PPO, bisMSB, LAB]
        LSMPT->AddProperty("PPOABSLENGTH", GdLSABSEnergy, GdLSABSLength, 502);
        LSMPT->AddProperty("PPOREEMISSIONPROB", GdLSReemEnergy, GdLSReem, 28);
        LSMPT->AddProperty("PPOCOMPONENT", GdLSComEnergy, GdLSFastComponent, 275);
        LSMPT->AddProperty("PPOTIMECONSTANT", component, GdLSReemissionFastTimeConstant,2);

        LSMPT->AddProperty("bisMSBABSLENGTH", GdLSABSEnergy, GdLSABSLength, 502);
        LSMPT->AddProperty("bisMSBREEMISSIONPROB", GdLSReemEnergy, GdLSReem, 28);
        LSMPT->AddProperty("bisMSBCOMPONENT", GdLSComEnergy, GdLSFastComponent, 275);
        LSMPT->AddProperty("bisMSBTIMECONSTANT", component, GdLSReemissionFastTimeConstant,2);

        // LAB?
        } else if (1 && use_param_svc) { // from properties service
            G4cout << "Setup LS Material Tables from MCParamsSvc" << G4endl;
            SniperPtr<IMCParamsSvc> mcgt(getScope(), "MCParamsSvc");
            if (mcgt.invalid()) {
                G4cout << "Can't find MCParamsSvc." << G4endl;
                assert(0);
            }
            // load scale factors.
            IMCParamsSvc::map_s2d LS_scales_map;
            bool st = mcgt->Get("Material.LS.scale", LS_scales_map);
            float scale_abslength = 1.0;
            if (st && LS_scales_map.count("AbsorptionLenBefore") && LS_scales_map.count("AbsorptionLenAfter")) {
                scale_abslength = LS_scales_map["AbsorptionLenAfter"] / LS_scales_map["AbsorptionLenBefore"];
                G4cout << "Scale ABSLENGTH from " << LS_scales_map["AbsorptionLenBefore"]
                       << " to " << LS_scales_map["AbsorptionLenAfter"]
                       << " factor: " << scale_abslength
                       << G4endl;
            }
            float scale_rayleigh = 1.0;
            if (st && LS_scales_map.count("RayleighLenBefore") && LS_scales_map.count("RayleighLenAfter")) {
                scale_rayleigh = LS_scales_map["RayleighLenAfter"] / LS_scales_map["RayleighLenBefore"];
                G4cout << "Scale RAYLEIGH from " << LS_scales_map["RayleighLenBefore"]
                       << " to " << LS_scales_map["RayleighLenAfter"]
                       << " factor: " << scale_rayleigh
                       << G4endl;
            }
            // bis-MSB
            //   1/L = c*...
            //
            // L_new = L_old*c_old/c_new
            //
            // scale = old/new
            float scale_bisMSB_abslength = 1.0;
            if (st && LS_scales_map.count("bisMSBConcentrationBefore") && LS_scales_map.count("bisMSBConcentrationAfter")) {
                scale_bisMSB_abslength = LS_scales_map["bisMSBConcentrationBefore"] / LS_scales_map["bisMSBConcentrationAfter"];
                G4cout << "Scale bisMSB concentration from " << LS_scales_map["bisMSBConcentrationBefore"]
                       << " to " << LS_scales_map["bisMSBConcentrationAfter"]
                       << " factor: " << scale_bisMSB_abslength
                       << G4endl;
            }
            
            // load data
            helper_mpt(LSMPT, "RINDEX",                     mcgt.data(), "Material.LS.RINDEX");
            helper_mpt(LSMPT, "ABSLENGTH",                  mcgt.data(), "Material.LS.ABSLENGTH", scale_abslength);
            helper_mpt(LSMPT, "FASTCOMPONENT",              mcgt.data(), "Material.LS.FASTCOMPONENT");
            helper_mpt(LSMPT, "SLOWCOMPONENT",              mcgt.data(), "Material.LS.FASTCOMPONENT");
            helper_mpt(LSMPT, "REEMISSIONPROB",             mcgt.data(), "Material.LS.REEMISSIONPROB");
            helper_mpt(LSMPT, "RAYLEIGH",                   mcgt.data(), "Material.LS.RAYLEIGH", scale_rayleigh);
            helper_mpt(LSMPT, "SCINTILLATIONYIELD",         mcgt.data(), "Material.LS.SCINTILLATIONYIELD");
            helper_mpt(LSMPT, "RESOLUTIONSCALE",            mcgt.data(), "Material.LS.RESOLUTIONSCALE");
            helper_mpt(LSMPT, "GammaFASTTIMECONSTANT",      mcgt.data(), "Material.LS.GammaFASTTIMECONSTANT");
            helper_mpt(LSMPT, "GammaSLOWTIMECONSTANT",      mcgt.data(), "Material.LS.GammaSLOWTIMECONSTANT");
            helper_mpt(LSMPT, "GammaYIELDRATIO",            mcgt.data(), "Material.LS.GammaYIELDRATIO");
            helper_mpt(LSMPT, "AlphaFASTTIMECONSTANT",      mcgt.data(), "Material.LS.AlphaFASTTIMECONSTANT");
            helper_mpt(LSMPT, "AlphaSLOWTIMECONSTANT",      mcgt.data(), "Material.LS.AlphaSLOWTIMECONSTANT");
            helper_mpt(LSMPT, "AlphaYIELDRATIO",            mcgt.data(), "Material.LS.AlphaYIELDRATIO");
            helper_mpt(LSMPT, "NeutronFASTTIMECONSTANT",    mcgt.data(), "Material.LS.NeutronFASTTIMECONSTANT");
            helper_mpt(LSMPT, "NeutronSLOWTIMECONSTANT",    mcgt.data(), "Material.LS.NeutronSLOWTIMECONSTANT");
            helper_mpt(LSMPT, "NeutronYIELDRATIO",          mcgt.data(), "Material.LS.NeutronYIELDRATIO");
            helper_mpt(LSMPT, "ReemissionFASTTIMECONSTANT", mcgt.data(), "Material.LS.ReemissionFASTTIMECONSTANT");
            helper_mpt(LSMPT, "ReemissionSLOWTIMECONSTANT", mcgt.data(), "Material.LS.ReemissionSLOWTIMECONSTANT");
            helper_mpt(LSMPT, "ReemissionYIELDRATIO",       mcgt.data(), "Material.LS.ReemissionYIELDRATIO");
            helper_mpt(LSMPT, "PPOABSLENGTH",               mcgt.data(), "Material.LS.PPOABSLENGTH");
            helper_mpt(LSMPT, "PPOREEMISSIONPROB",          mcgt.data(), "Material.LS.PPOREEMISSIONPROB");
            helper_mpt(LSMPT, "PPOCOMPONENT",               mcgt.data(), "Material.LS.PPOCOMPONENT");
            helper_mpt(LSMPT, "PPOTIMECONSTANT",            mcgt.data(), "Material.LS.PPOTIMECONSTANT");
            helper_mpt(LSMPT, "bisMSBABSLENGTH",            mcgt.data(), "Material.LS.bisMSBABSLENGTH", scale_bisMSB_abslength);
            helper_mpt(LSMPT, "bisMSBREEMISSIONPROB",       mcgt.data(), "Material.LS.bisMSBREEMISSIONPROB");
            helper_mpt(LSMPT, "bisMSBCOMPONENT",            mcgt.data(), "Material.LS.bisMSBCOMPONENT");
            helper_mpt(LSMPT, "bisMSBTIMECONSTANT",         mcgt.data(), "Material.LS.bisMSBTIMECONSTANT");

        }
        // LSMPT->DumpTable();
        LS->SetMaterialPropertiesTable(LSMPT);
    }

    LAB = G4Material::GetMaterial("LAB", any_warnings);
    if (LAB) { 
        G4cout << "LAB is constructed from GDML file." << G4endl;
    } else {
        G4cout << "LAB is constructed from the code." << G4endl;
        LAB = new G4Material("LAB", 0.859*g/cm3, 5);
        LAB->AddElement(C,  0.87924);
        LAB->AddElement(H,  0.1201);
        LAB->AddElement(O,  0.00034);
        //LAB->AddElement(Gd, 0.0010315);
        LAB->AddElement(N,  0.00027);
        LAB->AddElement(S,  0.00005);

        G4MaterialPropertiesTable* LABMPT = new G4MaterialPropertiesTable();
        LABMPT->AddProperty("RINDEX",   GdLSRefIndexEnergy, GdLSRefIndex, 18);
        LABMPT->AddProperty("ABSLENGTH", GdLSABSEnergy, GdLSABSLength, 502);
        LABMPT->AddProperty("RAYLEIGH", GdLSRayEnergy, GdLSRayLength, 11);
        LAB->SetMaterialPropertiesTable(LABMPT);
    }

    // LS = new G4Material("LS", 0.859*g/cm3, 5);
    // LS->AddElement(C, 0.87924);
    // LS->AddElement(H, 0.1201);
    // LS->AddElement(O, 0.00034);
    // LS->AddElement(N, 0.00027);
    // LS->AddElement(S, 0.00005);

    ESR = G4Material::GetMaterial("ESR", any_warnings); 
    if (ESR) {
        G4cout << "ESR is constructed from GDML file." << G4endl;
    } else {
        G4cout << "ESR is constructed from the code." << G4endl;
        ESR = new G4Material("ESR", 1.0*g/cm3, 2);
        ESR->AddElement(H, 2.*1.00794/(12.0107+2.*1.00794));
        ESR->AddElement(C, 12.0107/(12.0107+2.*1.00794));

        G4MaterialPropertiesTable* ESRMPT = new G4MaterialPropertiesTable();
        ESRMPT->AddProperty("ABSLENGTH", ESREnergy, ESRAbsorptionLength, 31);

        ESR->SetMaterialPropertiesTable(ESRMPT);
    }

    Tyvek = G4Material::GetMaterial("Tyvek", any_warnings);
    if (Tyvek) {
        G4cout << "Tyvek is constructed from GDML file." << G4endl;
    } else {
        G4cout << "Tyvek is constructed from the code." << G4endl;
        Tyvek = new G4Material("Tyvek", 0.94*g/cm3, 2);
        Tyvek->AddElement(C, 2);
        Tyvek->AddElement(H, 4);

        G4MaterialPropertiesTable* TyvekMPT = new G4MaterialPropertiesTable();
        TyvekMPT->AddProperty("ABSLENGTH", TyvekEnergy, TyvekABSLength, 4);

        Tyvek->SetMaterialPropertiesTable(TyvekMPT);
    }

    Acrylic = G4Material::GetMaterial("Acrylic", any_warnings);
    if (Acrylic) {
        G4cout << "Acrylic is constructed from GDML file." << G4endl;
    } else {
        G4cout << "Acrylic is constructed from the code." << G4endl;
        Acrylic = new G4Material("Acrylic", 1.18*g/cm3, 3);
        Acrylic->AddElement(C, 0.59984);
        Acrylic->AddElement(H, 0.08055);
        Acrylic->AddElement(O, 0.31961);

        G4MaterialPropertiesTable* AcrylicMPT = new G4MaterialPropertiesTable();
        AcrylicMPT->AddProperty("ABSLENGTH", AcrylicAbsEnergy, AcrylicAbsLength, 9);
        AcrylicMPT->AddProperty("RAYLEIGH", AcrylicRayEnergy, AcrylicRayLength, 11);
        AcrylicMPT->AddProperty("RINDEX", AcrylicRefEnergy, AcrylicRefIndex, 18);

        Acrylic->SetMaterialPropertiesTable(AcrylicMPT);
    }

    // The Opacity Acrylic
    DummyAcrylic = G4Material::GetMaterial("DummyAcrylic", any_warnings);
    if (DummyAcrylic) {
        G4cout << "DummyAcrylic is constructed from the GDML file" << G4endl;
    } else {
        G4cout << "DummyAcrylic is constructed from the code" << G4endl;
        DummyAcrylic = new G4Material("DummyAcrylic", 1.18*g/cm3, 3);
        DummyAcrylic->AddElement(C, 0.59984);
        DummyAcrylic->AddElement(H, 0.08055);
        DummyAcrylic->AddElement(O, 0.31961);
    }

    Teflon = G4Material::GetMaterial("Teflon", any_warnings);
    if (Teflon) {
        G4cout << "Teflon is constructed from the GDML file" << G4endl;
    } else {
        G4cout << "Teflon is constructed from the code" << G4endl;
        Teflon = new G4Material("Teflon", 2.2*g/cm3, 2);
        Teflon->AddElement(C, 0.759814);
        Teflon->AddElement(F, 0.240186);
    }

    //Steel  
    G4double density = 0.;

    Steel = G4Material::GetMaterial("Steel", any_warnings);
    if (Steel) {
        G4cout << "Steel is constructed from the GDML file" << G4endl;
    } else {
        G4cout << "Steel is constructed from the code" << G4endl;
        density = 8.1*g/cm3;
        Steel = new G4Material("Steel", density, 8);
        Steel->AddElement(Fe, 0.70845);
        Steel->AddElement(C, 0.0008);
        Steel->AddElement(Mn, 0.02);
        Steel->AddElement(P, 0.00045);
        Steel->AddElement(S, 0.00030);
        Steel->AddElement(Si, 0.01);
        Steel->AddElement(Cr, 0.18);
        Steel->AddElement(Ni, 0.08);
        G4MaterialPropertiesTable* SteelMPT = new G4MaterialPropertiesTable();
        SteelMPT->AddProperty("ABSLENGTH", fPP_SteelTank, fSteelTankABSORPTION, 4);
        Steel->SetMaterialPropertiesTable(SteelMPT);
    }

    //Stainless Steel added by Xin Qian Nov 2nd 2014                              
    StainlessSteel = G4Material::GetMaterial("StainlessSteel", any_warnings);
    if (StainlessSteel) {
        G4cout << "StainlessSteel is constructed from the GDML file" << G4endl;
    } else {
        G4cout << "StainlessSteel is constructed from the code" << G4endl;
        density = 7.8*g/cm3;                                                          
        StainlessSteel = new G4Material("StainlessSteel",density,3);                  
        StainlessSteel->AddElement(Fe,0.74);                                          
        StainlessSteel->AddElement(Cr,0.08);                                          
        StainlessSteel->AddElement(Ni,0.18);                                          
        G4MaterialPropertiesTable* StainlessSteelMPT = new G4MaterialPropertiesTable();
        StainlessSteelMPT->AddProperty("ABSLENGTH", fPP_SteelTank, fSteelTankABSORPTION, 4);   
        StainlessSteel->SetMaterialPropertiesTable(StainlessSteelMPT);                
    }

    Mylar = G4Material::GetMaterial("Mylar", any_warnings);
    if (Mylar) {
        G4cout << "Mylar is constructed from the GDML file" << G4endl; 
    } else {
        G4cout << "Mylar is constructed from the code" << G4endl; 
        density = 1.4*g/cm3;                                                          
        Mylar = new G4Material("Mylar",density,3);                                    
        Mylar->AddElement(H,0.041959);                                                
        Mylar->AddElement(C,0.625016);                                                
        Mylar->AddElement(O,0.333025);                                                
        G4MaterialPropertiesTable* MylarMPT = new G4MaterialPropertiesTable();        
        G4double AbsorptionLengthMylar[9] = {100.*cm,100.*cm,100.*cm,100.*cm,100.*cm,
            100.*cm,100.*cm,100.*cm,100.*cm};
        G4double refractiveIndexMylar[18] = {1.640,1.640,1.640,1.640,1.640,
            1.640,1.640,1.640,1.640,1.640,
            1.640,1.640,1.640,1.640,1.640,
            1.640,1.640,1.640};
        G4double RayleighLengthMylar[11] = {100.*cm,100.*cm,100.*cm,100.*cm,100.*cm,
            100.*cm,100.*cm,100.*cm,100.*cm,100.*cm,
            100.*cm};
        MylarMPT->AddProperty("ABSLENGTH",AcrylicAbsEnergy,AbsorptionLengthMylar,9);
        MylarMPT->AddProperty("RAYLEIGH",AcrylicRayEnergy,RayleighLengthMylar,11);
        MylarMPT->AddProperty("RINDEX",AcrylicRefEnergy,refractiveIndexMylar,18);                    
        Mylar->SetMaterialPropertiesTable(MylarMPT);                                  
    }
    //                                                                            


    // Copper
    Copper = G4Material::GetMaterial("Copper", any_warnings);
    if (Copper) {
        
    } else {
        Copper = new G4Material("Copper", 29., 63.55*g/mole, 8.96*g/cm3);
    }

    // ETFE
    ETFE = G4Material::GetMaterial("ETFE", any_warnings);
    if (ETFE) {

    } else {
        density = 1.75*g/cm3; //Ref. to http://www.9e.com.tw/tw/product/TEFLON_ETFE.pdf
        ETFE = new G4Material("ETFE", density, 3);
        ETFE->AddElement(C,4);
        ETFE->AddElement(H,4);
        ETFE->AddElement(F,4);
        G4MaterialPropertiesTable* ETFEMPT = new G4MaterialPropertiesTable();
        // Need to check!
        ETFEMPT->AddProperty("RINDEX", fPP_ETFE_RIN, fETFERINDEX,85);
        ETFEMPT->AddProperty("ABSLENGTH", fPP_ETFE_ABS_LAB,fETFEABSORPTION_LAB, 231); 
        //  ETFEMPT->AddProperty("REFLECTIVITY", fPP_ETFE_REF,fETFEREFLECTIVITY, 151);
        ETFE->SetMaterialPropertiesTable(ETFEMPT);
    }

    // FEP
    FEP = G4Material::GetMaterial("FEP", any_warnings);
    if (FEP) {

    } else {
        density = 2.150*g/cm3; //Ref. to http://www.9e.com.tw/tw/product/TEFLON_FEP.pdf
        FEP = new G4Material("FEP", density, 3); //no know, use it instead----
        FEP->AddElement(C,4);
        FEP->AddElement(H,4);
        FEP->AddElement(F,4);
        G4MaterialPropertiesTable* FEPMPT = new G4MaterialPropertiesTable();
        // Need to check!
        G4double fPP_FEP_RIN[2] =
        {
            2.0*eV, 4.0*eV
        };
        G4double fFEPRINDEX[2]=
        {
            1.344, 1.344
        }; //take the average 1.341 and 1.347
        FEPMPT->AddProperty("RINDEX", fPP_FEP_RIN, fFEPRINDEX,2);
        FEPMPT->AddProperty("ABSLENGTH", fPP_FEP_ABS_LAB,fFEPABSORPTION_LAB, 231); 
        FEP->SetMaterialPropertiesTable(FEPMPT);
    }

    //PE_PA
    PE_PA = G4Material::GetMaterial("PE_PA", any_warnings);
    if (PE_PA) {

    } else {
        density = 0.96*g/cm3; //DybII-doc-35-v1,page8. 
        PE_PA = new G4Material("PE_PA", density, 4); //Using for PE_PA same as Nylon since not eactly known
        PE_PA->AddElement(C,6);
        PE_PA->AddElement(N,1);
        PE_PA->AddElement(H,1);
        PE_PA->AddElement(O,1);

        G4MaterialPropertiesTable* PE_PAMPT = new G4MaterialPropertiesTable();
        // Need to check!
        G4double fPP_PE_PA_RIN[2] =
        {
            1.0*eV, 14.0*eV
        };
        G4double fPE_PARINDEX[2]=
        {
            1.51, 1.51
        }; // from wang Rui-guang
        PE_PAMPT->AddProperty("RINDEX", fPP_PE_PA_RIN, fPE_PARINDEX,2);
        PE_PAMPT->AddProperty("ABSLENGTH", fPP_PEPA_ABS_LAB,fPEPAABSORPTION_LAB, 266); 
        PE_PA->SetMaterialPropertiesTable(PE_PAMPT);
    }

    //PA
    PA = G4Material::GetMaterial("PA", any_warnings);
    if (PA) {

    } else {
        density = 0.96*g/cm3; //DybII-doc-35-v1,page8. Using for PA same as Nylon since not eactly known
        PA = new G4Material("PA", density, 4); //Using for PA same as Nylon since not eactly known
        PA->AddElement(C,6);
        PA->AddElement(N,1);
        PA->AddElement(H,1);
        PA->AddElement(O,1);

        G4MaterialPropertiesTable* PAMPT = new G4MaterialPropertiesTable();
        // Need to check!
        G4double fPP_PA_RIN[2] =
        {
            1.0*eV, 14.0*eV
        };
        G4double fPARINDEX[2]=
        {
            1.51, 1.51
        }; // from wang Rui-guang
        PAMPT->AddProperty("RINDEX", fPP_PA_RIN, fPARINDEX,2);
        PAMPT->AddProperty("ABSLENGTH", fPP_PA_ABS_LAB,fPAABSORPTION_LAB, 266); 
        PA->SetMaterialPropertiesTable(PAMPT);
    }

    Air = G4Material::GetMaterial("Air", any_warnings);
    if (Air) {

    } else {
        density = 1.205e-3*g/cm3;
        Air = new G4Material("Air", density, 4);
        Air->AddElement(N, 0.7550);
        Air->AddElement(O, 0.2321);
        Air->AddElement(Ar, 0.0128);
        Air->AddElement(C, 0.0001);
        G4double airPP[2] =
        {
            1.55*eV, 6.20*eV
        };
        G4double airRINDEX[2] =
        {
            1.000273, 1.000273
        };
        G4double airABSLENGTH[2] =
        {
            10000*m, 10000*m
        };
        G4MaterialPropertiesTable* airMPT = new G4MaterialPropertiesTable();
        airMPT->AddProperty("RINDEX",    airPP, airRINDEX,     2);
        airMPT->AddProperty("ABSLENGTH", airPP, airABSLENGTH,  2);
        Air->SetMaterialPropertiesTable(airMPT);
    }

    // Vacuum
    // --- PMT vacuum is very dilute air -------
    Vacuum = G4Material::GetMaterial("Vacuum", any_warnings);
    if (Vacuum) {

    } else {
        density     =  1e-3 * kGasThreshold;         //from PhysicalConstants.h
        G4double temperature = STP_Temperature;         //from PhysicalConstants.h
        G4double pressure    = STP_Pressure * density / (1.29e-3*g/cm3);
        Vacuum = new G4Material("Vacuum", density, 1, kStateGas,temperature,pressure);
        Vacuum->AddMaterial(Air, 1.);
    }

    VacuumT = G4Material::GetMaterial("VacuumT", any_warnings);
    if (VacuumT) {

    } else {
        density     =  0.0;         //from PhysicalConstants.h
        G4double temperature = STP_Temperature;         //from PhysicalConstants.h
        G4double pressure    = STP_Pressure * density / (1.29e-3*g/cm3);
        VacuumT = new G4Material("VacuumT", density, 1, kStateGas,temperature,pressure);
        VacuumT->AddMaterial(Air, 1.);

        G4double VacPP[4] =
        {
            1.55*eV, 6.20*eV, 10.33*eV, 15.5*eV
        };
        G4double VacRINDEX[4] =
        {
            1.000001, 1.000001, 1.000001, 1.000001
        };
        G4double VacABSLENGTH[4] =
        {
            1.0e6*m, 1.0e6*m, 1.0e6*m, 1.0e6*m
        };
        G4MaterialPropertiesTable* VacMPT = new G4MaterialPropertiesTable();
        VacMPT->AddProperty("RINDEX",    VacPP, VacRINDEX,     4);
        VacMPT->AddProperty("ABSLENGTH", VacPP, VacABSLENGTH,  4);
        Vacuum->SetMaterialPropertiesTable(VacMPT);
        VacuumT->SetMaterialPropertiesTable(VacMPT);
    }



    
    Photocathode_mat = G4Material::GetMaterial("photocathode", any_warnings);
    if (Photocathode_mat) {

    } else {
        density = 5. *g/cm3; // true??
        Photocathode_mat = new G4Material("photocathode",density,1);
        Photocathode_mat->AddElement(K, 1);
        G4MaterialPropertiesTable* PhotocathodeMPT = new G4MaterialPropertiesTable();
        PhotocathodeMPT->AddProperty("RINDEX", fPP_PhC, fPhCRINDEX, 4);
        PhotocathodeMPT->AddProperty("KINDEX", fPP_PhC, fPhCKINDEX, 4);
        PhotocathodeMPT->AddProperty("REFLECTIVITY", fPP_PhC, fPhCREFLECTIVITY, 4);
        PhotocathodeMPT->AddProperty("EFFICIENCY", fPP_PhCQE_1inch_20140620, fPhCEFFICIENCY_1inch_20140620, 43);
        PhotocathodeMPT->AddProperty("THICKNESS", fPosZ, fTHICKNESS, 2);
        Photocathode_mat->SetMaterialPropertiesTable(PhotocathodeMPT);
    }

    G4Material* Photocathode_mat_3inch = G4Material::GetMaterial("photocathode_3inch", any_warnings); 
    if (Photocathode_mat_3inch) {

    } else {
        density = 5. *g/cm3; // true??
        Photocathode_mat_3inch = new G4Material("photocathode_3inch",density,1);
        Photocathode_mat_3inch->AddElement(K, 1);
        G4MaterialPropertiesTable* PhotocathodeMPT_3inch = new G4MaterialPropertiesTable();
        PhotocathodeMPT_3inch->AddProperty("RINDEX", fPP_PhC, fPhCRINDEX, 4);
        PhotocathodeMPT_3inch->AddProperty("KINDEX", fPP_PhC, fPhCKINDEX, 4);
        PhotocathodeMPT_3inch->AddProperty("REFLECTIVITY", fPP_PhC, fPhCREFLECTIVITY, 4);
        PhotocathodeMPT_3inch->AddProperty("EFFICIENCY", fPP_PhCQE_3inch, fPhCEFFICIENCY_3inch, sizeof(fPhCEFFICIENCY_3inch)/sizeof(double));
        PhotocathodeMPT_3inch->AddProperty("THICKNESS", fPosZ, fTHICKNESS, 2);
        Photocathode_mat_3inch->SetMaterialPropertiesTable(PhotocathodeMPT_3inch);
    }

    G4Material* Photocathode_mat_MCP20inch = G4Material::GetMaterial("photocathode_MCP20inch", any_warnings);
    if (Photocathode_mat_MCP20inch) {

    } else {
        density = 5. *g/cm3; // true??
        Photocathode_mat_MCP20inch = new G4Material("photocathode_MCP20inch",density,1);
        Photocathode_mat_MCP20inch->AddElement(K, 1);
        G4MaterialPropertiesTable* PhotocathodeMPT_MCP20inch = new G4MaterialPropertiesTable();
        PhotocathodeMPT_MCP20inch->AddProperty("RINDEX", fPP_PhC, fPhCRINDEX, 4);
        PhotocathodeMPT_MCP20inch->AddProperty("KINDEX", fPP_PhC, fPhCKINDEX, 4);
        PhotocathodeMPT_MCP20inch->AddProperty("REFLECTIVITY", fPP_PhC, fPhCREFLECTIVITY, 4);
        PhotocathodeMPT_MCP20inch->AddProperty("EFFICIENCY", fPP_PhCQE_MCP20inch, fPhCEFFICIENCY_MCP20inch, 43);
        PhotocathodeMPT_MCP20inch->AddProperty("THICKNESS", fPosZ, fTHICKNESS, 2);
        Photocathode_mat_MCP20inch->SetMaterialPropertiesTable(PhotocathodeMPT_MCP20inch);
    }

    G4Material* Photocathode_mat_MCP8inch = G4Material::GetMaterial("photocathode_MCP8inch", any_warnings);
    if (Photocathode_mat_MCP8inch) {

    } else {
        density = 5. *g/cm3; // true??
        Photocathode_mat_MCP8inch = new G4Material("photocathode_MCP8inch",density,1);
        Photocathode_mat_MCP8inch->AddElement(K, 1);
        G4MaterialPropertiesTable* PhotocathodeMPT_MCP8inch = new G4MaterialPropertiesTable();
        PhotocathodeMPT_MCP8inch->AddProperty("RINDEX", fPP_PhC, fPhCRINDEX, 4);
        PhotocathodeMPT_MCP8inch->AddProperty("KINDEX", fPP_PhC, fPhCKINDEX, 4);
        PhotocathodeMPT_MCP8inch->AddProperty("REFLECTIVITY", fPP_PhC, fPhCREFLECTIVITY, 4);
        PhotocathodeMPT_MCP8inch->AddProperty("EFFICIENCY", fPP_PhCQE_MCP8inch, fPhCEFFICIENCY_MCP8inch, 43);
        PhotocathodeMPT_MCP8inch->AddProperty("THICKNESS", fPosZ, fTHICKNESS, 2);
        Photocathode_mat_MCP8inch->SetMaterialPropertiesTable(PhotocathodeMPT_MCP8inch);
    }

    G4Material* Photocathode_mat_Ham20inch = G4Material::GetMaterial("photocathode_Ham20inch", any_warnings);
    if (Photocathode_mat_Ham20inch) {

    } else {
        density = 5. *g/cm3; // true??
        Photocathode_mat_Ham20inch = new G4Material("photocathode_Ham20inch",density,1);
        Photocathode_mat_Ham20inch->AddElement(K, 1);
        G4MaterialPropertiesTable* PhotocathodeMPT_Ham20inch = new G4MaterialPropertiesTable();
        PhotocathodeMPT_Ham20inch->AddProperty("RINDEX", fPP_PhC, fPhCRINDEX, 4);
        PhotocathodeMPT_Ham20inch->AddProperty("KINDEX", fPP_PhC, fPhCKINDEX, 4);
        PhotocathodeMPT_Ham20inch->AddProperty("REFLECTIVITY", fPP_PhC, fPhCREFLECTIVITY, 4);
        PhotocathodeMPT_Ham20inch->AddProperty("EFFICIENCY", fPP_PhCQE_Ham20inch, fPhCEFFICIENCY_Ham20inch, 43);
        PhotocathodeMPT_Ham20inch->AddProperty("THICKNESS", fPosZ, fTHICKNESS, 2);
        Photocathode_mat_Ham20inch->SetMaterialPropertiesTable(PhotocathodeMPT_Ham20inch);
    } 

    G4Material* Photocathode_mat_Ham8inch = G4Material::GetMaterial("photocathode_Ham8inch", any_warnings);
    if (Photocathode_mat_Ham8inch) {

    } else {
        density = 5. *g/cm3; // true??
        Photocathode_mat_Ham8inch = new G4Material("photocathode_Ham8inch",density,1);
        Photocathode_mat_Ham8inch->AddElement(K, 1);
        G4MaterialPropertiesTable* PhotocathodeMPT_Ham8inch = new G4MaterialPropertiesTable();
        PhotocathodeMPT_Ham8inch->AddProperty("RINDEX", fPP_PhC, fPhCRINDEX, 4);
        PhotocathodeMPT_Ham8inch->AddProperty("KINDEX", fPP_PhC, fPhCKINDEX, 4);
        PhotocathodeMPT_Ham8inch->AddProperty("REFLECTIVITY", fPP_PhC, fPhCREFLECTIVITY, 4);
        PhotocathodeMPT_Ham8inch->AddProperty("EFFICIENCY", fPP_PhCQE_Ham8inch, fPhCEFFICIENCY_Ham8inch, 43);
        PhotocathodeMPT_Ham8inch->AddProperty("THICKNESS", fPosZ, fTHICKNESS, 2);
        Photocathode_mat_Ham8inch->SetMaterialPropertiesTable(PhotocathodeMPT_Ham8inch);
    }

    G4Material* Photocathode_mat_HZC9inch = G4Material::GetMaterial("photocathode_HZC9inch", any_warnings);
    if (Photocathode_mat_HZC9inch) {

    } else {
        density = 5. *g/cm3; // true??
        Photocathode_mat_HZC9inch = new G4Material("photocathode_HZC9inch",density,1);
        Photocathode_mat_HZC9inch->AddElement(K, 1);
        G4MaterialPropertiesTable* PhotocathodeMPT_HZC9inch = new G4MaterialPropertiesTable();
        PhotocathodeMPT_HZC9inch->AddProperty("RINDEX", fPP_PhC, fPhCRINDEX, 4);
        PhotocathodeMPT_HZC9inch->AddProperty("KINDEX", fPP_PhC, fPhCKINDEX, 4);
        PhotocathodeMPT_HZC9inch->AddProperty("REFLECTIVITY", fPP_PhC, fPhCREFLECTIVITY, 4);
        PhotocathodeMPT_HZC9inch->AddProperty("EFFICIENCY", fPP_PhCQE_HZC9inch, fPhCEFFICIENCY_HZC9inch, 43);
        PhotocathodeMPT_HZC9inch->AddProperty("THICKNESS", fPosZ, fTHICKNESS, 2);
        Photocathode_mat_HZC9inch->SetMaterialPropertiesTable(PhotocathodeMPT_HZC9inch);
    }




    // Borosilicate glass (Pyrex) for the pmt faces
    // from PDG: 
    // 80% SiO2 + 13% B2O2 + 7% Na2O
    // by fractional mass?
    G4Material* SiO2 = G4Material::GetMaterial("SiO2", any_warnings);
    if (not SiO2) {
        density = 2.23*g/cm3;
        SiO2 = new G4Material("SiO2", density, 2);
        SiO2->AddElement(Si, 1);
        SiO2->AddElement(O , 2);
    }
    G4Material* B2O2 = G4Material::GetMaterial("B2O2", any_warnings);
    if (not B2O2) {
        density = 2.23*g/cm3;
        B2O2 = new G4Material("B2O2", density, 2);
        B2O2->AddElement(B,  2);
        B2O2->AddElement(O,  2);
    }
    G4Material* Na2O = G4Material::GetMaterial("Na2O", any_warnings); 
    if (not Na2O) {
        density = 2.23*g/cm3;
        Na2O = new G4Material("Na2O", density, 2);
        Na2O->AddElement(Na, 2);
        Na2O->AddElement(O,  1);
    }
    
    Pyrex = G4Material::GetMaterial("Pyrex", any_warnings);
    if (Pyrex) {
        G4cout << "construct Pyrex from GDML." << G4endl;
    } else {
        density = 2.23*g/cm3;
        Pyrex = new G4Material("Pyrex", density, 3);
        Pyrex->AddMaterial(SiO2, .80);
        Pyrex->AddMaterial(B2O2, .13);
        Pyrex->AddMaterial(Na2O, .07);
        G4MaterialPropertiesTable* PyrexMPT = new G4MaterialPropertiesTable();
        PyrexMPT->AddProperty("RINDEX", fPP_Pyrex, fPyrexRINDEX, 6);
        PyrexMPT->AddProperty("ABSLENGTH", fPP_PyrexABS, fPyrexABSORPTION, 9);
        Pyrex->SetMaterialPropertiesTable(PyrexMPT);
    }

    Oil = G4Material::GetMaterial("MineralOil", any_warnings);
    if (not Oil) {
        density = 0.838*g/cm3;
        Oil = new G4Material("MineralOil", density, 2);
        Oil->AddElement(C, 0.8514);
        Oil->AddElement(H, 0.1486);
        G4MaterialPropertiesTable* OilMPT = new G4MaterialPropertiesTable();
        OilMPT->AddProperty("RINDEX", fPP_Oil_RIN, fOilRINDEX, 18);
        OilMPT->AddProperty("ABSLENGTH",fPP_Oil_ABS, fOilABSORPTION, 543);
        Oil->SetMaterialPropertiesTable(OilMPT); 
    }

    //Rock
    //Granite Rock  
    Rock = G4Material::GetMaterial("Rock", any_warnings);
    if (not Rock) {
        density = 2.7*g/cm3;
        Rock = new G4Material("Rock", density, 8);
        Rock->AddElement(O, 0.4850);
        Rock->AddElement(Si, 0.3430);
        Rock->AddElement(Al, 0.0800);
        Rock->AddElement(Fe, 0.02);
        Rock->AddElement(Mg, 0.001);
        Rock->AddElement(Ca, 0.0020 );
        Rock->AddElement(Na, 0.0240);
        Rock->AddElement(K, 0.0450);
        G4MaterialPropertiesTable* RockMPT = new G4MaterialPropertiesTable();
        RockMPT->AddProperty("ABSLENGTH",fPP_Rock, fRockABSORPTION,4);
        Rock->SetMaterialPropertiesTable(RockMPT);
    }

   // Add vetoWater material for outer water veto system
    vetoWater = G4Material::GetMaterial("vetoWater", any_warnings);
    if (vetoWater) {
        G4cout << "vetoWater is constructed from the GDML file" << G4endl;
    } else {
        G4cout << "vetoWater is constructed from the code" << G4endl;
        density= 1.000*g/cm3;
        vetoWater = new G4Material("vetoWater", density, 2);
        vetoWater->AddElement(H,2);
        vetoWater->AddElement(O,1);
        G4MaterialPropertiesTable* vetoWaterMPT = new G4MaterialPropertiesTable();
        vetoWaterMPT->AddProperty("RINDEX", fPP_Water_RIN, fWaterRINDEX,36);
        vetoWaterMPT->AddProperty("ABSLENGTH", fPP_Water_ABS,fWaterABSORPTION, 316);
        vetoWater->SetMaterialPropertiesTable(vetoWaterMPT);
        // vetoWaterMPT->DumpTable();
    }

    // Water
    Water = G4Material::GetMaterial("Water", any_warnings);
    if (Water) {
        G4cout << "Water is constructed from the GDML file" << G4endl; 
    } else {
        G4cout << "Water is constructed from the code" << G4endl; 
        density= 1.000*g/cm3;
        Water = new G4Material("Water", density, 2);
        Water->AddElement(H,2);
        Water->AddElement(O,1);
        G4MaterialPropertiesTable* WaterMPT = new G4MaterialPropertiesTable();
        WaterMPT->AddProperty("RINDEX", fPP_Water_RIN, fWaterRINDEX,36);
        //WaterMPT->AddProperty("RINDEX", fPP_Oil_RIN, fOilRINDEX, 9);
        // scale the water absorption length
        double water_abslen_scale_factor = 90.*m/(2651.815*cm);
        for (int j = 0; j < 316; ++j) {
            fWaterABSORPTION[j] *= water_abslen_scale_factor;
        }
        WaterMPT->AddProperty("ABSLENGTH", fPP_Water_ABS,fWaterABSORPTION, 316);
        //WaterMPT->AddProperty("ABSLENGTH",fPP_Oil_ABS, fOilABSORPTION, 543);
        Water->SetMaterialPropertiesTable(WaterMPT);
        //WaterMPT->DumpTable();
    }

    if( Photocathode_opsurf==NULL )
    {
        Photocathode_opsurf =  new G4OpticalSurface("Photocathode_opsurf");
        Photocathode_opsurf->SetType(dielectric_metal); // ignored if RINDEX defined
        Photocathode_opsurf->SetMaterialPropertiesTable(G4Material::GetMaterial("photocathode")->GetMaterialPropertiesTable() );
    }

    if( Photocathode_opsurf_3inch==NULL )
    {
        Photocathode_opsurf_3inch =  new G4OpticalSurface("Photocathode_opsurf_3inch");
        Photocathode_opsurf_3inch->SetType(dielectric_metal); // ignored if RINDEX defined
        Photocathode_opsurf_3inch->SetMaterialPropertiesTable(G4Material::GetMaterial("photocathode_3inch")->GetMaterialPropertiesTable() );
    }

    //for TT
    // Scintillator (C9H10)
    Scintillator = G4Material::GetMaterial("Scintillator", any_warnings);
    if (not Scintillator) {
        density = 1.032*g/cm3;
        Scintillator = new G4Material("Scintillator", density, 2);
        Scintillator->AddElement(H, 10);
        Scintillator->AddElement(C, 9);
    }

    Adhesive = G4Material::GetMaterial("Adhesive", any_warnings);
    if (not Adhesive) {
        density = 0.1*g/cm3;
        Adhesive = new G4Material("Adhesive", density, 2);
        Adhesive->AddElement(H, 10);
        Adhesive->AddElement(C, 9);
    }

    
    Aluminium = G4Material::GetMaterial("Aluminium", any_warnings);
    if (not Aluminium) {
        density = 2.7*g/cm3;
        Aluminium = new G4Material("Aluminium", density, 1);
        Aluminium->AddElement(Al, 1);
    }

    TiO2 = G4Material::GetMaterial("TiO2", any_warnings);
    if (not TiO2) {
        density = 4.26*g/cm3;
        TiO2 = new G4Material("TiO2", density, 2);
        TiO2->AddElement(Ti, 1);
        TiO2->AddElement(O, 2);
    }

    TiO2Coating = G4Material::GetMaterial("TiO2Coating", any_warnings);
    if (not TiO2Coating) {
        density = 1.21*g/cm3;
        TiO2Coating = new G4Material("TiO2Coating", density, 2);
        TiO2Coating->AddMaterial(TiO2, 0.2);
        TiO2Coating->AddMaterial(Scintillator, 0.8);
    }
