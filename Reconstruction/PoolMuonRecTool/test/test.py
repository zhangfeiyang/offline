#!/usr/bin/python
# -*- coding:utf-8 -*-
#
# Author: Jilei Xu, xujl@ihep.ac.cn
# Last modified:	2016/11/14
# Filename:		test.py
# Description: 

import Sniper
Sniper.setLogLevel(1)
task = Sniper.Task("task")
task.asTop()
task.setLogLevel(1)

import BufferMemMgr
bufMgr = task.createSvc("BufferMemMgr")
bufMgr.property("TimeWindow").set([0, 0]);

import DataRegistritionSvc
task.property("svcs").append("DataRegistritionSvc")

import RootIOSvc
roSvc = task.createSvc("RootOutputSvc/OutputSvc")
roSvc.property("OutputStreams").set({"/Event/Sim": "sample_muonrec_wp.root", "/Event/RecTrack": "sample_muonrec_wp.root", "/Event/Calib":"sample_muonrec_wp.root"})
riSvc = task.createSvc("RootInputSvc/InputSvc")
riSvc.property("InputFile").set(["general_60000.root", "general_60001.root", "general_60002.root", "general_60003.root", "general_60004.root", "general_60005.root", "general_60006.root", "general_60007.root", "general_60008.root", "general_60009.root" ])

import Geometry
geom = task.createSvc("RecGeomSvc")
gdmlgeo = "/junofs/users/xujl/juno5/trunk2/offline/Reconstruction/PoolMuonRecTool/test/geom.root" # here can input any general.root if it was generated by command --gdml when sim.
geom.property("GeomFile").set(gdmlgeo)
geom_path_inroot = "JunoGeom"
geom.property("GeomPathInRoot").set(geom_path_inroot)
geom.property("FastInit").set(True)

Sniper.loadDll("libPmtRec.so")
task.property("algs").append("PullSimHeaderAlg")

import RecWpMuonAlg
import PoolMuonRecTool
recalg = RecWpMuonAlg.createAlg(task)
recalg.setLogLevel(1)
recalg.property("Use3inchPMT").set(True);
recalg.property("Use20inchPMT").set(True);
recalg.property("Pmt3inchTimeReso").set(1)            # ns
recalg.property("Pmt20inchTimeReso").set(3)            # ns
recalg.useRecTool("PoolMuonRecTool")
recalg.rectool.property("MaxPoints").set(7)
recalg.rectool.property("PECut").set(19)
recalg.rectool.property("NpmtCut").set(1)
recalg.rectool.property("DistanceCut").set(7000)
#recalg.rectool.property("FhtCorrFile").set("fhtcorr.root")

task.setEvtMax(-1)
task.show()
task.run()
