//
// File generated by /cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Pre-Release/J18v1r1-Pre1/ExternalLibs/ROOT/5.34.11/bin/rootcint at Thu Dec 28 13:29:00 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIsrcdITimeStampDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TimeStampDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TimeStamp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TimeStamp(void *p = 0);
   static void *newArray_TimeStamp(Long_t size, void *p);
   static void delete_TimeStamp(void *p);
   static void deleteArray_TimeStamp(void *p);
   static void destruct_TimeStamp(void *p);
   static void streamer_TimeStamp(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TimeStamp*)
   {
      ::TimeStamp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TimeStamp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TimeStamp", ::TimeStamp::Class_Version(), "./TimeStamp.h", 86,
                  typeid(::TimeStamp), DefineBehavior(ptr, ptr),
                  &::TimeStamp::Dictionary, isa_proxy, 0,
                  sizeof(::TimeStamp) );
      instance.SetNew(&new_TimeStamp);
      instance.SetNewArray(&newArray_TimeStamp);
      instance.SetDelete(&delete_TimeStamp);
      instance.SetDeleteArray(&deleteArray_TimeStamp);
      instance.SetDestructor(&destruct_TimeStamp);
      instance.SetStreamerFunc(&streamer_TimeStamp);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TimeStamp*)
   {
      return GenerateInitInstanceLocal((::TimeStamp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TimeStamp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TimeStamp::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TimeStamp::Class_Name()
{
   return "TimeStamp";
}

//______________________________________________________________________________
const char *TimeStamp::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TimeStamp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TimeStamp::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TimeStamp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TimeStamp::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TimeStamp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TimeStamp::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TimeStamp*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TimeStamp::Streamer(TBuffer &R__b)
{
   // Stream an object of class TimeStamp.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> mSec;
      R__b >> mNanoSec;
      R__b.CheckByteCount(R__s, R__c, TimeStamp::IsA());
   } else {
      R__c = R__b.WriteVersion(TimeStamp::IsA(), kTRUE);
      R__b << mSec;
      R__b << mNanoSec;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TimeStamp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TimeStamp.
      TClass *R__cl = ::TimeStamp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mSec", &mSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mNanoSec", &mNanoSec);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TimeStamp(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TimeStamp : new ::TimeStamp;
   }
   static void *newArray_TimeStamp(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TimeStamp[nElements] : new ::TimeStamp[nElements];
   }
   // Wrapper around operator delete
   static void delete_TimeStamp(void *p) {
      delete ((::TimeStamp*)p);
   }
   static void deleteArray_TimeStamp(void *p) {
      delete [] ((::TimeStamp*)p);
   }
   static void destruct_TimeStamp(void *p) {
      typedef ::TimeStamp current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_TimeStamp(TBuffer &buf, void *obj) {
      ((::TimeStamp*)obj)->::TimeStamp::Streamer(buf);
   }
} // end of namespace ROOT for class ::TimeStamp

namespace ROOT {
   // Wrappers around operator new
   static void *new_timespec(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::timespec : new ::timespec;
   }
   static void *newArray_timespec(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::timespec[nElements] : new ::timespec[nElements];
   }
   // Wrapper around operator delete
   static void delete_timespec(void *p) {
      delete ((::timespec*)p);
   }
   static void deleteArray_timespec(void *p) {
      delete [] ((::timespec*)p);
   }
   static void destruct_timespec(void *p) {
      typedef ::timespec current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::timespec

/********************************************************
* ../src/TimeStampDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTimeStampDict();

extern "C" void G__set_cpp_environmentTimeStampDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TimeStamp.h");
  G__cpp_reset_tagtableTimeStampDict();
}
#include <new>
extern "C" int G__cpp_dllrevTimeStampDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TimeStamp */
static int G__TimeStampDict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TimeStamp* pobj;
         TimeStamp xobj = TimeStamp::GetBOT();
         pobj = new TimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TimeStamp* pobj;
         TimeStamp xobj = TimeStamp::GetEOT();
         pobj = new TimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TimeStamp* pobj;
         TimeStamp xobj = TimeStamp::GetNBOT();
         pobj = new TimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp[n];
     } else {
       p = new((void*) gvp) TimeStamp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp;
     } else {
       p = new((void*) gvp) TimeStamp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TimeStamp(*(TimeStamp*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TimeStamp(*(TimeStamp*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TimeStamp& obj = ((TimeStamp*) G__getstructoffset())->operator=(*(TimeStamp*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TimeStamp(*(timespec*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TimeStamp(*(timespec*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TimeStamp(*(time_t*) G__Longref(&libp->para[0]), (const int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) TimeStamp(*(time_t*) G__Longref(&libp->para[0]), (const int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (bool) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (bool) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (bool) G__int(libp->para[7]));
     } else {
       p = new((void*) gvp) TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]), (bool) G__int(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5])
, (unsigned int) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (unsigned int) G__int(libp->para[3])
, (unsigned int) G__int(libp->para[4]), (unsigned int) G__int(libp->para[5]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TimeStamp(
(unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (unsigned int) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeStamp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TimeStamp((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) TimeStamp((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TimeStamp*) G__getstructoffset())->operator double());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const timespec* pobj;
         const timespec xobj = ((const TimeStamp*) G__getstructoffset())->GetTimeSpec();
         pobj = new timespec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const TimeStamp*) G__getstructoffset())->GetSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetNanoSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TimeStamp*) G__getstructoffset())->GetSeconds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) ((const TimeStamp*) G__getstructoffset())->AsString((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((const TimeStamp*) G__getstructoffset())->AsString());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TimeStamp*) G__getstructoffset())->Copy(*(TimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetDate((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned int*) G__int(libp->para[2]), (unsigned int*) G__int(libp->para[3])
, (unsigned int*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetDate((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned int*) G__int(libp->para[2]), (unsigned int*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetDate((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned int*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetDate((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetDate((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetDate());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetTime((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned int*) G__int(libp->para[2]), (unsigned int*) G__int(libp->para[3])
, (unsigned int*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetTime((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned int*) G__int(libp->para[2]), (unsigned int*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetTime((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned int*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetTime((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetTime((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const TimeStamp*) G__getstructoffset())->GetTime());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeStamp*) G__getstructoffset())->Add(*(TimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeStamp*) G__getstructoffset())->Add((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeStamp*) G__getstructoffset())->Subtract(*(TimeStamp*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeStamp*) G__getstructoffset())->Subtract((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TimeStamp* pobj;
         TimeStamp xobj = ((TimeStamp*) G__getstructoffset())->CloneAndSubtract(*(TimeStamp*) libp->para[0].ref);
         pobj = new TimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const TimeStamp*) G__getstructoffset())->Print((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TimeStamp*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TimeStamp*) G__getstructoffset())->IsNull());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TimeStamp::GetZoneOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) TimeStamp::MktimeFromUTC((tm*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) TimeStamp::IsLeapYear((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TimeStamp::DumpTMStruct(*(tm*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TimeStamp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TimeStamp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TimeStamp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TimeStamp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TimeStamp*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeStamp*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeStamp*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeStamp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TimeStamp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TimeStamp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TimeStamp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict_169_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TimeStamp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TimeStamp G__TTimeStamp;
static int G__TimeStampDict_169_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TimeStamp*) (soff+(sizeof(TimeStamp)*i)))->~G__TTimeStamp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TimeStamp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TimeStamp*) (soff))->~G__TTimeStamp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__TimeStampDict__0_1298(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator==(*(TimeStamp*) libp->para[0].ref, *(TimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict__0_1299(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator!=(*(TimeStamp*) libp->para[0].ref, *(TimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict__0_1300(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<(*(TimeStamp*) libp->para[0].ref, *(TimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict__0_1301(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator<=(*(TimeStamp*) libp->para[0].ref, *(TimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict__0_1302(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>(*(TimeStamp*) libp->para[0].ref, *(TimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict__0_1303(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) operator>=(*(TimeStamp*) libp->para[0].ref, *(TimeStamp*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TimeStampDict__0_1304(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TimeStamp* pobj;
         TimeStamp xobj = operator-(*(TimeStamp*) libp->para[0].ref, *(TimeStamp*) libp->para[1].ref);
         pobj = new TimeStamp(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* TimeStamp */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTimeStampDict {
 public:
  G__Sizep2memfuncTimeStampDict(): p(&G__Sizep2memfuncTimeStampDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTimeStampDict::*p)();
};

size_t G__get_sizep2memfuncTimeStampDict()
{
  G__Sizep2memfuncTimeStampDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTimeStampDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTimeStampDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TimeStampDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TimeStampDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TimeStampDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TimeStampDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TimeStampDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TimeStampDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TimeStampDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TimeStampDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TimeStampDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TimeStampDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("timespec",117,G__get_linked_tagnum(&G__TimeStampDictLN_timespec),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TimeStamp */
static void G__setup_memvarTimeStamp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   { TimeStamp *p; p=(TimeStamp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"mSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"mNanoSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TimeStampDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTimeStampDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTimeStamp(void) {
   /* TimeStamp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp));
   G__memfunc_setup("GetBOT",517,G__TimeStampDict_169_0_1, 117, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TimeStamp (*)())(&TimeStamp::GetBOT) ), 0);
   G__memfunc_setup("GetEOT",520,G__TimeStampDict_169_0_2, 117, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TimeStamp (*)())(&TimeStamp::GetEOT) ), 0);
   G__memfunc_setup("GetNBOT",595,G__TimeStampDict_169_0_3, 117, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TimeStamp (*)())(&TimeStamp::GetNBOT) ), 0);
   G__memfunc_setup("TimeStamp",916,G__TimeStampDict_169_0_4, 105, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeStamp",916,G__TimeStampDict_169_0_5, 105, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 1, 1, 1, 0, "u 'TimeStamp' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TimeStampDict_169_0_6, 117, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 1, 1, 1, 1, 0, "u 'TimeStamp' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeStamp",916,G__TimeStampDict_169_0_7, 105, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 1, 1, 1, 0, "u 'timespec' 'timespec' 11 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeStamp",916,G__TimeStampDict_169_0_8, 105, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 2, 1, 1, 0, 
"l - 'time_t' 11 - t i - - 10 - nsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeStamp",916,G__TimeStampDict_169_0_9, 105, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 9, 1, 1, 0, 
"h - - 0 - year h - - 0 - month "
"h - - 0 - day h - - 0 - hour "
"h - - 0 - min h - - 0 - sec "
"h - - 0 '0' nsec g - - 0 'true' isUTC "
"i - - 0 '0' secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeStamp",916,G__TimeStampDict_169_0_10, 105, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 5, 1, 1, 0, 
"h - - 0 - date h - - 0 - time "
"h - - 0 - nsec g - - 0 'true' isUTC "
"i - - 0 '0' secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeStamp",916,G__TimeStampDict_169_0_11, 105, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 1, 1, 1, 0, "d - - 0 - seconds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator double",1543,G__TimeStampDict_169_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeSpec",1082,G__TimeStampDict_169_0_13, 117, G__get_linked_tagnum(&G__TimeStampDictLN_timespec), G__defined_typename("timespec"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSec",571,G__TimeStampDict_169_0_14, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNanoSec",967,G__TimeStampDict_169_0_15, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeconds",1007,G__TimeStampDict_169_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsString",811,G__TimeStampDict_169_0_17, 67, -1, -1, 0, 1, 1, 1, 9, "C - - 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G__TimeStampDict_169_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TimeStamp' - 1 - vldts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDate",670,G__TimeStampDict_169_0_19, 105, -1, -1, 0, 5, 1, 1, 8, 
"g - - 0 'true' inUTC i - - 0 '0' secOffset "
"H - - 0 '0' year H - - 0 '0' month "
"H - - 0 '0' day", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__TimeStampDict_169_0_20, 105, -1, -1, 0, 5, 1, 1, 8, 
"g - - 0 'true' inUTC i - - 0 '0' secOffset "
"H - - 0 '0' hour H - - 0 '0' min "
"H - - 0 '0' sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__TimeStampDict_169_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TimeStamp' - 11 - offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__TimeStampDict_169_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - seconds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Subtract",840,G__TimeStampDict_169_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TimeStamp' - 11 - offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Subtract",840,G__TimeStampDict_169_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - seconds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloneAndSubtract",1612,G__TimeStampDict_169_0_25, 117, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 1, 1, 1, 0, "u 'TimeStamp' - 11 - offset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TimeStampDict_169_0_26, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsNull",599,G__TimeStampDict_169_0_27, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZoneOffset",1315,G__TimeStampDict_169_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TimeStamp::GetZoneOffset) ), 0);
   G__memfunc_setup("MktimeFromUTC",1255,G__TimeStampDict_169_0_29, 108, -1, G__defined_typename("time_t"), 0, 1, 3, 1, 0, "U 'tm' - 0 - tmstruct", (char*)NULL, (void*) G__func2void( (time_t (*)(tm*))(&TimeStamp::MktimeFromUTC) ), 0);
   G__memfunc_setup("IsLeapYear",975,G__TimeStampDict_169_0_30, 103, -1, -1, 0, 1, 3, 1, 0, "i - - 0 - year", (char*)NULL, (void*) G__func2void( (bool (*)(int))(&TimeStamp::IsLeapYear) ), 0);
   G__memfunc_setup("DumpTMStruct",1212,G__TimeStampDict_169_0_31, 121, -1, -1, 0, 1, 3, 1, 0, "u 'tm' - 11 - tmstruct", (char*)NULL, (void*) G__func2void( (void (*)(const tm&))(&TimeStamp::DumpTMStruct) ), 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 4, 0, 
"i - - 0 - year i - - 0 - month "
"i - - 0 - day i - - 0 - hour "
"i - - 0 - min i - - 0 - sec "
"i - - 0 - nsec g - - 0 - isUTC "
"i - - 0 - secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"i - - 0 - date i - - 0 - time "
"i - - 0 - nsec g - - 0 - isUTC "
"i - - 0 - secOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NormalizeNanoSec",1624,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TimeStampDict_169_0_36, 85, G__get_linked_tagnum(&G__TimeStampDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TimeStamp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TimeStampDict_169_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TimeStamp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TimeStampDict_169_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TimeStamp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TimeStampDict_169_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TimeStamp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TimeStampDict_169_0_40, 85, G__get_linked_tagnum(&G__TimeStampDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TimeStampDict_169_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TimeStampDict_169_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TimeStampDict_169_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TimeStampDict_169_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TimeStamp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TimeStampDict_169_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TimeStamp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TimeStampDict_169_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TimeStamp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TimeStampDict_169_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TimeStamp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TimeStamp", 1042, G__TimeStampDict_169_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTimeStampDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTimeStampDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
   G__memfunc_setup("operator==", 998, G__TimeStampDict__0_1298, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'TimeStamp' - 11 - lhs u 'TimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator!=", 970, G__TimeStampDict__0_1299, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'TimeStamp' - 11 - lhs u 'TimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<", 936, G__TimeStampDict__0_1300, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'TimeStamp' - 11 - lhs u 'TimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator<=", 997, G__TimeStampDict__0_1301, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'TimeStamp' - 11 - lhs u 'TimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>", 938, G__TimeStampDict__0_1302, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'TimeStamp' - 11 - lhs u 'TimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>=", 999, G__TimeStampDict__0_1303, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'TimeStamp' - 11 - lhs u 'TimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator-", 921, G__TimeStampDict__0_1304, 117, G__get_linked_tagnum(&G__TimeStampDictLN_TimeStamp), -1, 0, 2, 1, 1, 0, 
"u 'TimeStamp' - 11 - lhs u 'TimeStamp' - 11 - rhs", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTimeStampDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TimeStampDictLN_tm = { "tm" , 115 , -1 };
G__linked_taginfo G__TimeStampDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TimeStampDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TimeStampDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TimeStampDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TimeStampDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TimeStampDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TimeStampDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TimeStampDictLN_timespec = { "timespec" , 115 , -1 };
G__linked_taginfo G__TimeStampDictLN_TimeStamp = { "TimeStamp" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTimeStampDict() {
  G__TimeStampDictLN_tm.tagnum = -1 ;
  G__TimeStampDictLN_TClass.tagnum = -1 ;
  G__TimeStampDictLN_TBuffer.tagnum = -1 ;
  G__TimeStampDictLN_TMemberInspector.tagnum = -1 ;
  G__TimeStampDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TimeStampDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TimeStampDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TimeStampDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TimeStampDictLN_timespec.tagnum = -1 ;
  G__TimeStampDictLN_TimeStamp.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTimeStampDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_tm);
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TimeStampDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TimeStampDictLN_timespec),0,-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TimeStampDictLN_TimeStamp),sizeof(TimeStamp),-1,36608,(char*)NULL,G__setup_memvarTimeStamp,G__setup_memfuncTimeStamp);
}
extern "C" void G__cpp_setupTimeStampDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTimeStampDict()");
  G__set_cpp_environmentTimeStampDict();
  G__cpp_setup_tagtableTimeStampDict();

  G__cpp_setup_inheritanceTimeStampDict();

  G__cpp_setup_typetableTimeStampDict();

  G__cpp_setup_memvarTimeStampDict();

  G__cpp_setup_memfuncTimeStampDict();
  G__cpp_setup_globalTimeStampDict();
  G__cpp_setup_funcTimeStampDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTimeStampDict();
  return;
}
class G__cpp_setup_initTimeStampDict {
  public:
    G__cpp_setup_initTimeStampDict() { G__add_setup_func("TimeStampDict",(G__incsetup)(&G__cpp_setupTimeStampDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTimeStampDict() { G__remove_setup_func("TimeStampDict"); }
};
G__cpp_setup_initTimeStampDict G__cpp_setup_initializerTimeStampDict;

