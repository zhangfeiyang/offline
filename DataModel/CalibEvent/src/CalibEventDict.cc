//
// File generated by /cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Pre-Release/J18v1r1-Pre1/ExternalLibs/ROOT/5.34.11/bin/rootcint at Thu Dec 28 13:42:14 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIsrcdICalibEventDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CalibEventDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void JMcLcLCalibEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_JMcLcLCalibEvent(void *p = 0);
   static void *newArray_JMcLcLCalibEvent(Long_t size, void *p);
   static void delete_JMcLcLCalibEvent(void *p);
   static void deleteArray_JMcLcLCalibEvent(void *p);
   static void destruct_JMcLcLCalibEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JM::CalibEvent*)
   {
      ::JM::CalibEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::JM::CalibEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("JM::CalibEvent", ::JM::CalibEvent::Class_Version(), "./CalibEvent.h", 40,
                  typeid(::JM::CalibEvent), DefineBehavior(ptr, ptr),
                  &::JM::CalibEvent::Dictionary, isa_proxy, 4,
                  sizeof(::JM::CalibEvent) );
      instance.SetNew(&new_JMcLcLCalibEvent);
      instance.SetNewArray(&newArray_JMcLcLCalibEvent);
      instance.SetDelete(&delete_JMcLcLCalibEvent);
      instance.SetDeleteArray(&deleteArray_JMcLcLCalibEvent);
      instance.SetDestructor(&destruct_JMcLcLCalibEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JM::CalibEvent*)
   {
      return GenerateInitInstanceLocal((::JM::CalibEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JM::CalibEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace JM {
//______________________________________________________________________________
TClass *CalibEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibEvent::Class_Name()
{
   return "JM::CalibEvent";
}

//______________________________________________________________________________
const char *CalibEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JM::CalibEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JM::CalibEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JM::CalibEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JM::CalibEvent*)0x0)->GetClass();
   return fgIsA;
}

} // namespace JM
      namespace JM {
//______________________________________________________________________________
void CalibEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class JM::CalibEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(JM::CalibEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(JM::CalibEvent::Class(),this);
   }
}

} // namespace JM
//______________________________________________________________________________
      namespace JM {
void CalibEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class JM::CalibEvent.
      TClass *R__cl = ::JM::CalibEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_calibPMTCol", (void*)&m_calibPMTCol);
      R__insp.InspectMember("list<JM::CalibPMTChannel*>", (void*)&m_calibPMTCol, "m_calibPMTCol.", false);
      //This works around a msvc bug and should be harmless on other platforms
      typedef JM::EventObject baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace JM
namespace ROOT {
   // Wrappers around operator new
   static void *new_JMcLcLCalibEvent(void *p) {
      return  p ? new(p) ::JM::CalibEvent : new ::JM::CalibEvent;
   }
   static void *newArray_JMcLcLCalibEvent(Long_t nElements, void *p) {
      return p ? new(p) ::JM::CalibEvent[nElements] : new ::JM::CalibEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_JMcLcLCalibEvent(void *p) {
      delete ((::JM::CalibEvent*)p);
   }
   static void deleteArray_JMcLcLCalibEvent(void *p) {
      delete [] ((::JM::CalibEvent*)p);
   }
   static void destruct_JMcLcLCalibEvent(void *p) {
      typedef ::JM::CalibEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JM::CalibEvent

namespace ROOT {
   void listlEJMcLcLCalibPMTChannelmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void listlEJMcLcLCalibPMTChannelmUgR_Dictionary();
   static void *new_listlEJMcLcLCalibPMTChannelmUgR(void *p = 0);
   static void *newArray_listlEJMcLcLCalibPMTChannelmUgR(Long_t size, void *p);
   static void delete_listlEJMcLcLCalibPMTChannelmUgR(void *p);
   static void deleteArray_listlEJMcLcLCalibPMTChannelmUgR(void *p);
   static void destruct_listlEJMcLcLCalibPMTChannelmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const list<JM::CalibPMTChannel*>*)
   {
      list<JM::CalibPMTChannel*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(list<JM::CalibPMTChannel*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("list<JM::CalibPMTChannel*>", -2, "prec_stl/list", 44,
                  typeid(list<JM::CalibPMTChannel*>), DefineBehavior(ptr, ptr),
                  0, &listlEJMcLcLCalibPMTChannelmUgR_Dictionary, isa_proxy, 0,
                  sizeof(list<JM::CalibPMTChannel*>) );
      instance.SetNew(&new_listlEJMcLcLCalibPMTChannelmUgR);
      instance.SetNewArray(&newArray_listlEJMcLcLCalibPMTChannelmUgR);
      instance.SetDelete(&delete_listlEJMcLcLCalibPMTChannelmUgR);
      instance.SetDeleteArray(&deleteArray_listlEJMcLcLCalibPMTChannelmUgR);
      instance.SetDestructor(&destruct_listlEJMcLcLCalibPMTChannelmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< list<JM::CalibPMTChannel*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const list<JM::CalibPMTChannel*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void listlEJMcLcLCalibPMTChannelmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const list<JM::CalibPMTChannel*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_listlEJMcLcLCalibPMTChannelmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) list<JM::CalibPMTChannel*> : new list<JM::CalibPMTChannel*>;
   }
   static void *newArray_listlEJMcLcLCalibPMTChannelmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) list<JM::CalibPMTChannel*>[nElements] : new list<JM::CalibPMTChannel*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_listlEJMcLcLCalibPMTChannelmUgR(void *p) {
      delete ((list<JM::CalibPMTChannel*>*)p);
   }
   static void deleteArray_listlEJMcLcLCalibPMTChannelmUgR(void *p) {
      delete [] ((list<JM::CalibPMTChannel*>*)p);
   }
   static void destruct_listlEJMcLcLCalibPMTChannelmUgR(void *p) {
      typedef list<JM::CalibPMTChannel*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class list<JM::CalibPMTChannel*>

/********************************************************
* ../src/CalibEventDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCalibEventDict();

extern "C" void G__set_cpp_environmentCalibEventDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("CalibEvent.h");
  G__cpp_reset_tagtableCalibEventDict();
}
#include <new>
extern "C" int G__cpp_dllrevCalibEventDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* JM::CalibEvent */
static int G__CalibEventDict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JM::CalibEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JM::CalibEvent[n];
     } else {
       p = new((void*) gvp) JM::CalibEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JM::CalibEvent;
     } else {
       p = new((void*) gvp) JM::CalibEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const JM::CalibEvent*) G__getstructoffset())->getCalibPmtChannel((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((JM::CalibEvent*) G__getstructoffset())->addCalibPmtChannel((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<JM::CalibPMTChannel*>& obj = ((const JM::CalibEvent*) G__getstructoffset())->calibPMTCol();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JM::CalibEvent*) G__getstructoffset())->setCalibPMTCol(*(list<JM::CalibPMTChannel*>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) JM::CalibEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JM::CalibEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) JM::CalibEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      JM::CalibEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JM::CalibEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JM::CalibEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JM::CalibEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JM::CalibEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibEventDict_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JM::CalibEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CalibEventDict_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   JM::CalibEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new JM::CalibEvent(*(JM::CalibEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JM::CalibEvent G__TJMcLcLCalibEvent;
static int G__CalibEventDict_194_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JM::CalibEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JM::CalibEvent*) (soff+(sizeof(JM::CalibEvent)*i)))->~G__TJMcLcLCalibEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JM::CalibEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JM::CalibEvent*) (soff))->~G__TJMcLcLCalibEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibEventDict_194_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JM::CalibEvent* dest = (JM::CalibEvent*) G__getstructoffset();
   *dest = *(JM::CalibEvent*) libp->para[0].ref;
   const JM::CalibEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* JM::CalibEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCalibEventDict {
 public:
  G__Sizep2memfuncCalibEventDict(): p(&G__Sizep2memfuncCalibEventDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCalibEventDict::*p)();
};

size_t G__get_sizep2memfuncCalibEventDict()
{
  G__Sizep2memfuncCalibEventDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCalibEventDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent))) {
     JM::CalibEvent *G__Lderived;
     G__Lderived=(JM::CalibEvent*)0x1000;
     {
       JM::EventObject *G__Lpbase=(JM::EventObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent),G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLEventObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent),G__get_linked_tagnum(&G__CalibEventDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCalibEventDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CalibEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CalibEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<JM::CalibPMTChannel*>",117,G__get_linked_tagnum(&G__CalibEventDictLN_listlEJMcLcLCalibPMTChannelmUcOallocatorlEJMcLcLCalibPMTChannelmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* JM::CalibEvent */
static void G__setup_memvarJMcLcLCalibEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent));
   { JM::CalibEvent *p; p=(JM::CalibEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibEventDictLN_listlEJMcLcLCalibPMTChannelmUcOallocatorlEJMcLcLCalibPMTChannelmUgRsPgR),G__defined_typename("list<JM::CalibPMTChannel*>"),-1,4,"m_calibPMTCol=",0,"Collection of CalibPMTChannel in a evt");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibEventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCalibEventDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncJMcLcLCalibEvent(void) {
   /* JM::CalibEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent));
   G__memfunc_setup("CalibEvent",989,G__CalibEventDict_194_0_1, 105, G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalibPmtChannel",1797,G__CalibEventDict_194_0_2, 85, G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibPMTChannel), -1, 0, 1, 1, 1, 9, "h - - 0 - pmtid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCalibPmtChannel",1774,G__CalibEventDict_194_0_3, 85, G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibPMTChannel), -1, 0, 1, 1, 1, 0, "h - - 0 - pmtid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calibPMTCol",1034,G__CalibEventDict_194_0_4, 117, G__get_linked_tagnum(&G__CalibEventDictLN_listlEJMcLcLCalibPMTChannelmUcOallocatorlEJMcLcLCalibPMTChannelmUgRsPgR), G__defined_typename("list<JM::CalibPMTChannel*>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalibPMTCol",1334,G__CalibEventDict_194_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'list<JM::CalibPMTChannel*,allocator<JM::CalibPMTChannel*> >' 'list<JM::CalibPMTChannel*>' 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibEventDict_194_0_6, 85, G__get_linked_tagnum(&G__CalibEventDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&JM::CalibEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibEventDict_194_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JM::CalibEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibEventDict_194_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&JM::CalibEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibEventDict_194_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&JM::CalibEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibEventDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibEventDict_194_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibEventDict_194_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JM::CalibEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibEventDict_194_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JM::CalibEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibEventDict_194_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JM::CalibEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibEventDict_194_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JM::CalibEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CalibEvent", 989, G__CalibEventDict_194_0_18, (int) ('i'), G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent), -1, 0, 1, 1, 1, 0, "u 'JM::CalibEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibEvent", 1115, G__CalibEventDict_194_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibEventDict_194_0_20, (int) ('u'), G__get_linked_tagnum(&G__CalibEventDictLN_JMcLcLCalibEvent), -1, 1, 1, 1, 1, 0, "u 'JM::CalibEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCalibEventDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCalibEventDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCalibEventDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CalibEventDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_JM = { "JM" , 110 , -1 };
G__linked_taginfo G__CalibEventDictLN_JMcLcLEventObject = { "JM::EventObject" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_JMcLcLCalibPMTChannel = { "JM::CalibPMTChannel" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_JMcLcLCalibEvent = { "JM::CalibEvent" , 99 , -1 };
G__linked_taginfo G__CalibEventDictLN_listlEJMcLcLCalibPMTChannelmUcOallocatorlEJMcLcLCalibPMTChannelmUgRsPgR = { "list<JM::CalibPMTChannel*,allocator<JM::CalibPMTChannel*> >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCalibEventDict() {
  G__CalibEventDictLN_TClass.tagnum = -1 ;
  G__CalibEventDictLN_TBuffer.tagnum = -1 ;
  G__CalibEventDictLN_TMemberInspector.tagnum = -1 ;
  G__CalibEventDictLN_TObject.tagnum = -1 ;
  G__CalibEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CalibEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CalibEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibEventDictLN_JM.tagnum = -1 ;
  G__CalibEventDictLN_JMcLcLEventObject.tagnum = -1 ;
  G__CalibEventDictLN_JMcLcLCalibPMTChannel.tagnum = -1 ;
  G__CalibEventDictLN_JMcLcLCalibEvent.tagnum = -1 ;
  G__CalibEventDictLN_listlEJMcLcLCalibPMTChannelmUcOallocatorlEJMcLcLCalibPMTChannelmUgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCalibEventDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_JM);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_JMcLcLEventObject);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_JMcLcLCalibPMTChannel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibEventDictLN_JMcLcLCalibEvent),sizeof(JM::CalibEvent),-1,292096,(char*)NULL,G__setup_memvarJMcLcLCalibEvent,G__setup_memfuncJMcLcLCalibEvent);
   G__get_linked_tagnum_fwd(&G__CalibEventDictLN_listlEJMcLcLCalibPMTChannelmUcOallocatorlEJMcLcLCalibPMTChannelmUgRsPgR);
}
extern "C" void G__cpp_setupCalibEventDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCalibEventDict()");
  G__set_cpp_environmentCalibEventDict();
  G__cpp_setup_tagtableCalibEventDict();

  G__cpp_setup_inheritanceCalibEventDict();

  G__cpp_setup_typetableCalibEventDict();

  G__cpp_setup_memvarCalibEventDict();

  G__cpp_setup_memfuncCalibEventDict();
  G__cpp_setup_globalCalibEventDict();
  G__cpp_setup_funcCalibEventDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCalibEventDict();
  return;
}
class G__cpp_setup_initCalibEventDict {
  public:
    G__cpp_setup_initCalibEventDict() { G__add_setup_func("CalibEventDict",(G__incsetup)(&G__cpp_setupCalibEventDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCalibEventDict() { G__remove_setup_func("CalibEventDict"); }
};
G__cpp_setup_initCalibEventDict G__cpp_setup_initializerCalibEventDict;

