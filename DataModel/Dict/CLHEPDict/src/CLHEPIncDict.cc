//
// File generated by /cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Pre-Release/J18v1r1-Pre1/ExternalLibs/ROOT/5.34.11/bin/rootcint at Thu Dec 28 13:40:30 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIsrcdICLHEPIncDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CLHEPIncDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepRotation HepRotation;
      #else
      class HepRotation  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepRotation::HepRotation_row HepRotation_row;
         #else
         class HepRotation_row  {
            public:
            //friend XX;
            :: CLHEP::HepRotation* rr; //
            int ii; //
         };
         #endif

         double rxx; //
         double rxy; //
         double rxz; //
         double ryx; //
         double ryy; //
         double ryz; //
         double rzx; //
         double rzy; //
         double rzz; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepEulerAngles HepEulerAngles;
      #else
      class HepEulerAngles  {
         public:
         //friend XX;
         typedef ::CLHEP::HepEulerAngles EA;
         double phi_; //
         double theta_; //
         double psi_; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepAxisAngle HepAxisAngle;
      #else
      class HepAxisAngle  {
         public:
         //friend XX;
         typedef void* (*Scalar)() ;
         typedef ::CLHEP::HepAxisAngle AA;
         ::CLHEP::Hep3Vector axis_; //Note:  After construction, this is always of mag 1
         double delta_; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::Hep3Vector Hep3Vector;
      #else
      class Hep3Vector  {
         public:
         //friend XX;
         double dx; //
         double dy; //
         double dz; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepLorentzVector HepLorentzVector;
      #else
      class HepLorentzVector  {
         public:
         //friend XX;
         ::CLHEP::Hep3Vector pp; //
         double ee; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepLorentzRotation HepLorentzRotation;
      #else
      class HepLorentzRotation  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepLorentzRotation::HepLorentzRotation_row HepLorentzRotation_row;
         #else
         class HepLorentzRotation_row  {
            public:
            //friend XX;
            :: CLHEP::HepLorentzRotation* rr; //
            int ii; //
         };
         #endif

         double mxx; //
         double mxy; //
         double mxz; //
         double mxt; //
         double myx; //
         double myy; //
         double myz; //
         double myt; //
         double mzx; //
         double mzy; //
         double mzz; //
         double mzt; //
         double mtx; //
         double mty; //
         double mtz; //
         double mtt; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepRotationX HepRotationX;
      #else
      class HepRotationX  {
         public:
         //friend XX;
         double d; //
         double s; //
         double c; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepRotationY HepRotationY;
      #else
      class HepRotationY  {
         public:
         //friend XX;
         double d; //
         double s; //
         double c; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepRotationZ HepRotationZ;
      #else
      class HepRotationZ  {
         public:
         //friend XX;
         double d; //
         double s; //
         double c; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepBoost HepBoost;
      #else
      class HepBoost  {
         public:
         //friend XX;
         ::CLHEP::HepRep4x4Symmetric rep_; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepBoostX HepBoostX;
      #else
      class HepBoostX  {
         public:
         //friend XX;
         double beta_; //
         double gamma_; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepBoostY HepBoostY;
      #else
      class HepBoostY  {
         public:
         //friend XX;
         double beta_; //
         double gamma_; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepBoostZ HepBoostZ;
      #else
      class HepBoostZ  {
         public:
         //friend XX;
         double beta_; //
         double gamma_; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::Hep4RotationInterface Hep4RotationInterface;
      #else
      class Hep4RotationInterface  {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::Hep3RotationInterface Hep3RotationInterface;
      #else
      class Hep3RotationInterface  :  public ::CLHEP::Hep4RotationInterface {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::Hep2Vector Hep2Vector;
      #else
      class Hep2Vector  {
         public:
         //friend XX;
         double dx; //
         double dy; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepGenMatrix HepGenMatrix;
      #else
      class HepGenMatrix  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepGenMatrix::HepGenMatrix_row HepGenMatrix_row;
         #else
         class HepGenMatrix_row  {
            public:
            //friend XX;
            ::CLHEP::HepGenMatrix* _a; //
            int _r; //
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepGenMatrix::HepGenMatrix_row_const HepGenMatrix_row_const;
         #else
         class HepGenMatrix_row_const  {
            public:
            //friend XX;
            :: CLHEP::HepGenMatrix* _a; //
            int _r; //
         };
         #endif

         typedef ::std::vector<double, ::allocator<double> >::iterator mIter;
         typedef ::std::vector<double, ::allocator<double> >::iterator mcIter;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HepGenMatrix() throw() {};
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepMatrix HepMatrix;
      #else
      class HepMatrix  :  public ::CLHEP::HepGenMatrix {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepMatrix::HepMatrix_row HepMatrix_row;
         #else
         class HepMatrix_row  {
            public:
            //friend XX;
            ::CLHEP::HepMatrix* _a; //
            int _r; //
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepMatrix::HepMatrix_row_const HepMatrix_row_const;
         #else
         class HepMatrix_row_const  {
            public:
            //friend XX;
            :: CLHEP::HepMatrix* _a; //
            int _r; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~HepMatrix() throw() {};
         vector< double > m; //
         int nrow; //
         int ncol; //
         int size; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepSymMatrix HepSymMatrix;
      #else
      class HepSymMatrix  :  public ::CLHEP::HepGenMatrix {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepSymMatrix::HepSymMatrix_row HepSymMatrix_row;
         #else
         class HepSymMatrix_row  {
            public:
            //friend XX;
            ::CLHEP::HepSymMatrix* _a; //
            int _r; //
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepSymMatrix::HepSymMatrix_row_const HepSymMatrix_row_const;
         #else
         class HepSymMatrix_row_const  {
            public:
            //friend XX;
            :: CLHEP::HepSymMatrix* _a; //
            int _r; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~HepSymMatrix() throw() {};
         vector< double > m; //
         int nrow; //
         int size; //total number of elements
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepVector HepVector;
      #else
      class HepVector  :  public ::CLHEP::HepGenMatrix {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HepVector() throw() {};
         vector< double > m; //
         int nrow; //
      };
      #endif
      } 
      namespace CLHEP {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::CLHEP::HepDiagMatrix HepDiagMatrix;
      #else
      class HepDiagMatrix  :  public ::CLHEP::HepGenMatrix {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepDiagMatrix::HepDiagMatrix_row HepDiagMatrix_row;
         #else
         class HepDiagMatrix_row  {
            public:
            //friend XX;
            ::CLHEP::HepDiagMatrix* _a; //
            int _r; //
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::CLHEP::HepDiagMatrix::HepDiagMatrix_row_const HepDiagMatrix_row_const;
         #else
         class HepDiagMatrix_row_const  {
            public:
            //friend XX;
            :: CLHEP::HepDiagMatrix* _a; //
            int _r; //
         };
         #endif

         // To force the creation of a virtual table, throw just in case.
         virtual ~HepDiagMatrix() throw() {};
         vector< double > m; //
         int nrow; //
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void CLHEPcLcLHepRotation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepRotation_Dictionary();
   static void *new_CLHEPcLcLHepRotation(void *p = 0);
   static void *newArray_CLHEPcLcLHepRotation(Long_t size, void *p);
   static void delete_CLHEPcLcLHepRotation(void *p);
   static void deleteArray_CLHEPcLcLHepRotation(void *p);
   static void destruct_CLHEPcLcLHepRotation(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepRotation*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepRotation) == sizeof(::ROOT::Shadow::CLHEP::HepRotation));
      ::CLHEP::HepRotation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepRotation),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepRotation", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/Rotation.h", 48,
                  typeid(::CLHEP::HepRotation), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepRotation_ShowMembers, &CLHEPcLcLHepRotation_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepRotation) );
      instance.SetNew(&new_CLHEPcLcLHepRotation);
      instance.SetNewArray(&newArray_CLHEPcLcLHepRotation);
      instance.SetDelete(&delete_CLHEPcLcLHepRotation);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepRotation);
      instance.SetDestructor(&destruct_CLHEPcLcLHepRotation);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepRotation*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepRotation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepRotation*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepRotation_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotation*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepEulerAngles_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepEulerAngles_Dictionary();
   static void *new_CLHEPcLcLHepEulerAngles(void *p = 0);
   static void *newArray_CLHEPcLcLHepEulerAngles(Long_t size, void *p);
   static void delete_CLHEPcLcLHepEulerAngles(void *p);
   static void deleteArray_CLHEPcLcLHepEulerAngles(void *p);
   static void destruct_CLHEPcLcLHepEulerAngles(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepEulerAngles*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepEulerAngles) == sizeof(::ROOT::Shadow::CLHEP::HepEulerAngles));
      ::CLHEP::HepEulerAngles *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepEulerAngles),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepEulerAngles", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/EulerAngles.h", 32,
                  typeid(::CLHEP::HepEulerAngles), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepEulerAngles_ShowMembers, &CLHEPcLcLHepEulerAngles_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepEulerAngles) );
      instance.SetNew(&new_CLHEPcLcLHepEulerAngles);
      instance.SetNewArray(&newArray_CLHEPcLcLHepEulerAngles);
      instance.SetDelete(&delete_CLHEPcLcLHepEulerAngles);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepEulerAngles);
      instance.SetDestructor(&destruct_CLHEPcLcLHepEulerAngles);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepEulerAngles*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepEulerAngles*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepEulerAngles*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepEulerAngles_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepEulerAngles*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepAxisAngle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepAxisAngle_Dictionary();
   static void *new_CLHEPcLcLHepAxisAngle(void *p = 0);
   static void *newArray_CLHEPcLcLHepAxisAngle(Long_t size, void *p);
   static void delete_CLHEPcLcLHepAxisAngle(void *p);
   static void deleteArray_CLHEPcLcLHepAxisAngle(void *p);
   static void destruct_CLHEPcLcLHepAxisAngle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepAxisAngle*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepAxisAngle) == sizeof(::ROOT::Shadow::CLHEP::HepAxisAngle));
      ::CLHEP::HepAxisAngle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepAxisAngle),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepAxisAngle", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/AxisAngle.h", 37,
                  typeid(::CLHEP::HepAxisAngle), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepAxisAngle_ShowMembers, &CLHEPcLcLHepAxisAngle_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepAxisAngle) );
      instance.SetNew(&new_CLHEPcLcLHepAxisAngle);
      instance.SetNewArray(&newArray_CLHEPcLcLHepAxisAngle);
      instance.SetDelete(&delete_CLHEPcLcLHepAxisAngle);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepAxisAngle);
      instance.SetDestructor(&destruct_CLHEPcLcLHepAxisAngle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepAxisAngle*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepAxisAngle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepAxisAngle*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepAxisAngle_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepAxisAngle*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHep3Vector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHep3Vector_Dictionary();
   static void *new_CLHEPcLcLHep3Vector(void *p = 0);
   static void *newArray_CLHEPcLcLHep3Vector(Long_t size, void *p);
   static void delete_CLHEPcLcLHep3Vector(void *p);
   static void deleteArray_CLHEPcLcLHep3Vector(void *p);
   static void destruct_CLHEPcLcLHep3Vector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::Hep3Vector*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::Hep3Vector) == sizeof(::ROOT::Shadow::CLHEP::Hep3Vector));
      ::CLHEP::Hep3Vector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::Hep3Vector),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::Hep3Vector", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/ThreeVector.h", 41,
                  typeid(::CLHEP::Hep3Vector), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHep3Vector_ShowMembers, &CLHEPcLcLHep3Vector_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::Hep3Vector) );
      instance.SetNew(&new_CLHEPcLcLHep3Vector);
      instance.SetNewArray(&newArray_CLHEPcLcLHep3Vector);
      instance.SetDelete(&delete_CLHEPcLcLHep3Vector);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHep3Vector);
      instance.SetDestructor(&destruct_CLHEPcLcLHep3Vector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::Hep3Vector*)
   {
      return GenerateInitInstanceLocal((::CLHEP::Hep3Vector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::Hep3Vector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHep3Vector_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep3Vector*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepLorentzVector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepLorentzVector_Dictionary();
   static void *new_CLHEPcLcLHepLorentzVector(void *p = 0);
   static void *newArray_CLHEPcLcLHepLorentzVector(Long_t size, void *p);
   static void delete_CLHEPcLcLHepLorentzVector(void *p);
   static void deleteArray_CLHEPcLcLHepLorentzVector(void *p);
   static void destruct_CLHEPcLcLHepLorentzVector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepLorentzVector*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepLorentzVector) == sizeof(::ROOT::Shadow::CLHEP::HepLorentzVector));
      ::CLHEP::HepLorentzVector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepLorentzVector),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepLorentzVector", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/LorentzVector.h", 72,
                  typeid(::CLHEP::HepLorentzVector), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepLorentzVector_ShowMembers, &CLHEPcLcLHepLorentzVector_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepLorentzVector) );
      instance.SetNew(&new_CLHEPcLcLHepLorentzVector);
      instance.SetNewArray(&newArray_CLHEPcLcLHepLorentzVector);
      instance.SetDelete(&delete_CLHEPcLcLHepLorentzVector);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepLorentzVector);
      instance.SetDestructor(&destruct_CLHEPcLcLHepLorentzVector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepLorentzVector*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepLorentzVector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepLorentzVector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepLorentzVector_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepLorentzVector*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepLorentzRotation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepLorentzRotation_Dictionary();
   static void *new_CLHEPcLcLHepLorentzRotation(void *p = 0);
   static void *newArray_CLHEPcLcLHepLorentzRotation(Long_t size, void *p);
   static void delete_CLHEPcLcLHepLorentzRotation(void *p);
   static void deleteArray_CLHEPcLcLHepLorentzRotation(void *p);
   static void destruct_CLHEPcLcLHepLorentzRotation(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepLorentzRotation*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepLorentzRotation) == sizeof(::ROOT::Shadow::CLHEP::HepLorentzRotation));
      ::CLHEP::HepLorentzRotation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepLorentzRotation),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepLorentzRotation", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/LorentzRotation.h", 54,
                  typeid(::CLHEP::HepLorentzRotation), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepLorentzRotation_ShowMembers, &CLHEPcLcLHepLorentzRotation_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepLorentzRotation) );
      instance.SetNew(&new_CLHEPcLcLHepLorentzRotation);
      instance.SetNewArray(&newArray_CLHEPcLcLHepLorentzRotation);
      instance.SetDelete(&delete_CLHEPcLcLHepLorentzRotation);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepLorentzRotation);
      instance.SetDestructor(&destruct_CLHEPcLcLHepLorentzRotation);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepLorentzRotation*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepLorentzRotation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepLorentzRotation*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepLorentzRotation_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepLorentzRotation*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepRep3x3_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepRep3x3_Dictionary();
   static void *new_CLHEPcLcLHepRep3x3(void *p = 0);
   static void *newArray_CLHEPcLcLHepRep3x3(Long_t size, void *p);
   static void delete_CLHEPcLcLHepRep3x3(void *p);
   static void deleteArray_CLHEPcLcLHepRep3x3(void *p);
   static void destruct_CLHEPcLcLHepRep3x3(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepRep3x3*)
   {
      ::CLHEP::HepRep3x3 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepRep3x3),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepRep3x3", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationInterfaces.h", 309,
                  typeid(::CLHEP::HepRep3x3), DefineBehavior(ptr, ptr),
                  0, &CLHEPcLcLHepRep3x3_Dictionary, isa_proxy, 0,
                  sizeof(::CLHEP::HepRep3x3) );
      instance.SetNew(&new_CLHEPcLcLHepRep3x3);
      instance.SetNewArray(&newArray_CLHEPcLcLHepRep3x3);
      instance.SetDelete(&delete_CLHEPcLcLHepRep3x3);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepRep3x3);
      instance.SetDestructor(&destruct_CLHEPcLcLHepRep3x3);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepRep3x3*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepRep3x3*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepRep3x3*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepRep3x3_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRep3x3*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepRep4x4_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepRep4x4_Dictionary();
   static void *new_CLHEPcLcLHepRep4x4(void *p = 0);
   static void *newArray_CLHEPcLcLHepRep4x4(Long_t size, void *p);
   static void delete_CLHEPcLcLHepRep4x4(void *p);
   static void deleteArray_CLHEPcLcLHepRep4x4(void *p);
   static void destruct_CLHEPcLcLHepRep4x4(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepRep4x4*)
   {
      ::CLHEP::HepRep4x4 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepRep4x4),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepRep4x4", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationInterfaces.h", 336,
                  typeid(::CLHEP::HepRep4x4), DefineBehavior(ptr, ptr),
                  0, &CLHEPcLcLHepRep4x4_Dictionary, isa_proxy, 0,
                  sizeof(::CLHEP::HepRep4x4) );
      instance.SetNew(&new_CLHEPcLcLHepRep4x4);
      instance.SetNewArray(&newArray_CLHEPcLcLHepRep4x4);
      instance.SetDelete(&delete_CLHEPcLcLHepRep4x4);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepRep4x4);
      instance.SetDestructor(&destruct_CLHEPcLcLHepRep4x4);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepRep4x4*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepRep4x4*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepRep4x4*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepRep4x4_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRep4x4*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepRep4x4Symmetric_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepRep4x4Symmetric_Dictionary();
   static void *new_CLHEPcLcLHepRep4x4Symmetric(void *p = 0);
   static void *newArray_CLHEPcLcLHepRep4x4Symmetric(Long_t size, void *p);
   static void delete_CLHEPcLcLHepRep4x4Symmetric(void *p);
   static void deleteArray_CLHEPcLcLHepRep4x4Symmetric(void *p);
   static void destruct_CLHEPcLcLHepRep4x4Symmetric(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepRep4x4Symmetric*)
   {
      ::CLHEP::HepRep4x4Symmetric *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepRep4x4Symmetric),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepRep4x4Symmetric", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationInterfaces.h", 370,
                  typeid(::CLHEP::HepRep4x4Symmetric), DefineBehavior(ptr, ptr),
                  0, &CLHEPcLcLHepRep4x4Symmetric_Dictionary, isa_proxy, 0,
                  sizeof(::CLHEP::HepRep4x4Symmetric) );
      instance.SetNew(&new_CLHEPcLcLHepRep4x4Symmetric);
      instance.SetNewArray(&newArray_CLHEPcLcLHepRep4x4Symmetric);
      instance.SetDelete(&delete_CLHEPcLcLHepRep4x4Symmetric);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepRep4x4Symmetric);
      instance.SetDestructor(&destruct_CLHEPcLcLHepRep4x4Symmetric);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepRep4x4Symmetric*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepRep4x4Symmetric*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepRep4x4Symmetric*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepRep4x4Symmetric_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRep4x4Symmetric*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepRotationX_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepRotationX_Dictionary();
   static void *new_CLHEPcLcLHepRotationX(void *p = 0);
   static void *newArray_CLHEPcLcLHepRotationX(Long_t size, void *p);
   static void delete_CLHEPcLcLHepRotationX(void *p);
   static void deleteArray_CLHEPcLcLHepRotationX(void *p);
   static void destruct_CLHEPcLcLHepRotationX(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepRotationX*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepRotationX) == sizeof(::ROOT::Shadow::CLHEP::HepRotationX));
      ::CLHEP::HepRotationX *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepRotationX),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepRotationX", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationX.h", 44,
                  typeid(::CLHEP::HepRotationX), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepRotationX_ShowMembers, &CLHEPcLcLHepRotationX_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepRotationX) );
      instance.SetNew(&new_CLHEPcLcLHepRotationX);
      instance.SetNewArray(&newArray_CLHEPcLcLHepRotationX);
      instance.SetDelete(&delete_CLHEPcLcLHepRotationX);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepRotationX);
      instance.SetDestructor(&destruct_CLHEPcLcLHepRotationX);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepRotationX*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepRotationX*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepRotationX*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepRotationX_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotationX*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepRotationY_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepRotationY_Dictionary();
   static void *new_CLHEPcLcLHepRotationY(void *p = 0);
   static void *newArray_CLHEPcLcLHepRotationY(Long_t size, void *p);
   static void delete_CLHEPcLcLHepRotationY(void *p);
   static void deleteArray_CLHEPcLcLHepRotationY(void *p);
   static void destruct_CLHEPcLcLHepRotationY(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepRotationY*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepRotationY) == sizeof(::ROOT::Shadow::CLHEP::HepRotationY));
      ::CLHEP::HepRotationY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepRotationY),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepRotationY", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationY.h", 43,
                  typeid(::CLHEP::HepRotationY), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepRotationY_ShowMembers, &CLHEPcLcLHepRotationY_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepRotationY) );
      instance.SetNew(&new_CLHEPcLcLHepRotationY);
      instance.SetNewArray(&newArray_CLHEPcLcLHepRotationY);
      instance.SetDelete(&delete_CLHEPcLcLHepRotationY);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepRotationY);
      instance.SetDestructor(&destruct_CLHEPcLcLHepRotationY);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepRotationY*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepRotationY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepRotationY*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepRotationY_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotationY*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepRotationZ_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepRotationZ_Dictionary();
   static void *new_CLHEPcLcLHepRotationZ(void *p = 0);
   static void *newArray_CLHEPcLcLHepRotationZ(Long_t size, void *p);
   static void delete_CLHEPcLcLHepRotationZ(void *p);
   static void deleteArray_CLHEPcLcLHepRotationZ(void *p);
   static void destruct_CLHEPcLcLHepRotationZ(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepRotationZ*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepRotationZ) == sizeof(::ROOT::Shadow::CLHEP::HepRotationZ));
      ::CLHEP::HepRotationZ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepRotationZ),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepRotationZ", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationZ.h", 43,
                  typeid(::CLHEP::HepRotationZ), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepRotationZ_ShowMembers, &CLHEPcLcLHepRotationZ_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepRotationZ) );
      instance.SetNew(&new_CLHEPcLcLHepRotationZ);
      instance.SetNewArray(&newArray_CLHEPcLcLHepRotationZ);
      instance.SetDelete(&delete_CLHEPcLcLHepRotationZ);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepRotationZ);
      instance.SetDestructor(&destruct_CLHEPcLcLHepRotationZ);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepRotationZ*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepRotationZ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepRotationZ*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepRotationZ_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotationZ*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepBoost_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepBoost_Dictionary();
   static void *new_CLHEPcLcLHepBoost(void *p = 0);
   static void *newArray_CLHEPcLcLHepBoost(Long_t size, void *p);
   static void delete_CLHEPcLcLHepBoost(void *p);
   static void deleteArray_CLHEPcLcLHepBoost(void *p);
   static void destruct_CLHEPcLcLHepBoost(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepBoost*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepBoost) == sizeof(::ROOT::Shadow::CLHEP::HepBoost));
      ::CLHEP::HepBoost *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepBoost),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepBoost", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/Boost.h", 43,
                  typeid(::CLHEP::HepBoost), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepBoost_ShowMembers, &CLHEPcLcLHepBoost_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepBoost) );
      instance.SetNew(&new_CLHEPcLcLHepBoost);
      instance.SetNewArray(&newArray_CLHEPcLcLHepBoost);
      instance.SetDelete(&delete_CLHEPcLcLHepBoost);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepBoost);
      instance.SetDestructor(&destruct_CLHEPcLcLHepBoost);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepBoost*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepBoost*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepBoost*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepBoost_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoost*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepBoostX_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepBoostX_Dictionary();
   static void *new_CLHEPcLcLHepBoostX(void *p = 0);
   static void *newArray_CLHEPcLcLHepBoostX(Long_t size, void *p);
   static void delete_CLHEPcLcLHepBoostX(void *p);
   static void deleteArray_CLHEPcLcLHepBoostX(void *p);
   static void destruct_CLHEPcLcLHepBoostX(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepBoostX*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepBoostX) == sizeof(::ROOT::Shadow::CLHEP::HepBoostX));
      ::CLHEP::HepBoostX *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepBoostX),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepBoostX", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/BoostX.h", 42,
                  typeid(::CLHEP::HepBoostX), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepBoostX_ShowMembers, &CLHEPcLcLHepBoostX_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepBoostX) );
      instance.SetNew(&new_CLHEPcLcLHepBoostX);
      instance.SetNewArray(&newArray_CLHEPcLcLHepBoostX);
      instance.SetDelete(&delete_CLHEPcLcLHepBoostX);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepBoostX);
      instance.SetDestructor(&destruct_CLHEPcLcLHepBoostX);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepBoostX*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepBoostX*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepBoostX*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepBoostX_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoostX*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepBoostY_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepBoostY_Dictionary();
   static void *new_CLHEPcLcLHepBoostY(void *p = 0);
   static void *newArray_CLHEPcLcLHepBoostY(Long_t size, void *p);
   static void delete_CLHEPcLcLHepBoostY(void *p);
   static void deleteArray_CLHEPcLcLHepBoostY(void *p);
   static void destruct_CLHEPcLcLHepBoostY(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepBoostY*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepBoostY) == sizeof(::ROOT::Shadow::CLHEP::HepBoostY));
      ::CLHEP::HepBoostY *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepBoostY),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepBoostY", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/BoostY.h", 42,
                  typeid(::CLHEP::HepBoostY), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepBoostY_ShowMembers, &CLHEPcLcLHepBoostY_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepBoostY) );
      instance.SetNew(&new_CLHEPcLcLHepBoostY);
      instance.SetNewArray(&newArray_CLHEPcLcLHepBoostY);
      instance.SetDelete(&delete_CLHEPcLcLHepBoostY);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepBoostY);
      instance.SetDestructor(&destruct_CLHEPcLcLHepBoostY);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepBoostY*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepBoostY*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepBoostY*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepBoostY_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoostY*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepBoostZ_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepBoostZ_Dictionary();
   static void *new_CLHEPcLcLHepBoostZ(void *p = 0);
   static void *newArray_CLHEPcLcLHepBoostZ(Long_t size, void *p);
   static void delete_CLHEPcLcLHepBoostZ(void *p);
   static void deleteArray_CLHEPcLcLHepBoostZ(void *p);
   static void destruct_CLHEPcLcLHepBoostZ(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepBoostZ*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepBoostZ) == sizeof(::ROOT::Shadow::CLHEP::HepBoostZ));
      ::CLHEP::HepBoostZ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepBoostZ),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepBoostZ", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/BoostZ.h", 42,
                  typeid(::CLHEP::HepBoostZ), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepBoostZ_ShowMembers, &CLHEPcLcLHepBoostZ_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepBoostZ) );
      instance.SetNew(&new_CLHEPcLcLHepBoostZ);
      instance.SetNewArray(&newArray_CLHEPcLcLHepBoostZ);
      instance.SetDelete(&delete_CLHEPcLcLHepBoostZ);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepBoostZ);
      instance.SetDestructor(&destruct_CLHEPcLcLHepBoostZ);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepBoostZ*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepBoostZ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepBoostZ*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepBoostZ_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoostZ*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHep4RotationInterface_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHep4RotationInterface_Dictionary();
   static void *new_CLHEPcLcLHep4RotationInterface(void *p = 0);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::Hep4RotationInterface*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::Hep4RotationInterface) == sizeof(::ROOT::Shadow::CLHEP::Hep4RotationInterface));
      ::CLHEP::Hep4RotationInterface *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::Hep4RotationInterface),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::Hep4RotationInterface", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationInterfaces.h", 100,
                  typeid(::CLHEP::Hep4RotationInterface), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHep4RotationInterface_ShowMembers, &CLHEPcLcLHep4RotationInterface_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::Hep4RotationInterface) );
      instance.SetNew(&new_CLHEPcLcLHep4RotationInterface);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::Hep4RotationInterface*)
   {
      return GenerateInitInstanceLocal((::CLHEP::Hep4RotationInterface*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::Hep4RotationInterface*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHep4RotationInterface_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep4RotationInterface*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHep3RotationInterface_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHep3RotationInterface_Dictionary();
   static void *new_CLHEPcLcLHep3RotationInterface(void *p = 0);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::Hep3RotationInterface*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::Hep3RotationInterface) == sizeof(::ROOT::Shadow::CLHEP::Hep3RotationInterface));
      ::CLHEP::Hep3RotationInterface *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::Hep3RotationInterface),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::Hep3RotationInterface", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/RotationInterfaces.h", 217,
                  typeid(::CLHEP::Hep3RotationInterface), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHep3RotationInterface_ShowMembers, &CLHEPcLcLHep3RotationInterface_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::Hep3RotationInterface) );
      instance.SetNew(&new_CLHEPcLcLHep3RotationInterface);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::Hep3RotationInterface*)
   {
      return GenerateInitInstanceLocal((::CLHEP::Hep3RotationInterface*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::Hep3RotationInterface*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHep3RotationInterface_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep3RotationInterface*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHep2Vector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHep2Vector_Dictionary();
   static void *new_CLHEPcLcLHep2Vector(void *p = 0);
   static void *newArray_CLHEPcLcLHep2Vector(Long_t size, void *p);
   static void delete_CLHEPcLcLHep2Vector(void *p);
   static void deleteArray_CLHEPcLcLHep2Vector(void *p);
   static void destruct_CLHEPcLcLHep2Vector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::Hep2Vector*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::Hep2Vector) == sizeof(::ROOT::Shadow::CLHEP::Hep2Vector));
      ::CLHEP::Hep2Vector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::Hep2Vector),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::Hep2Vector", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Vector/TwoVector.h", 49,
                  typeid(::CLHEP::Hep2Vector), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHep2Vector_ShowMembers, &CLHEPcLcLHep2Vector_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::Hep2Vector) );
      instance.SetNew(&new_CLHEPcLcLHep2Vector);
      instance.SetNewArray(&newArray_CLHEPcLcLHep2Vector);
      instance.SetDelete(&delete_CLHEPcLcLHep2Vector);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHep2Vector);
      instance.SetDestructor(&destruct_CLHEPcLcLHep2Vector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::Hep2Vector*)
   {
      return GenerateInitInstanceLocal((::CLHEP::Hep2Vector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::Hep2Vector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHep2Vector_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep2Vector*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepGenMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepGenMatrix_Dictionary();
   static void delete_CLHEPcLcLHepGenMatrix(void *p);
   static void deleteArray_CLHEPcLcLHepGenMatrix(void *p);
   static void destruct_CLHEPcLcLHepGenMatrix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepGenMatrix*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepGenMatrix) == sizeof(::ROOT::Shadow::CLHEP::HepGenMatrix));
      ::CLHEP::HepGenMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepGenMatrix),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepGenMatrix", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Matrix/GenMatrix.h", 66,
                  typeid(::CLHEP::HepGenMatrix), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepGenMatrix_ShowMembers, &CLHEPcLcLHepGenMatrix_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepGenMatrix) );
      instance.SetDelete(&delete_CLHEPcLcLHepGenMatrix);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepGenMatrix);
      instance.SetDestructor(&destruct_CLHEPcLcLHepGenMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepGenMatrix*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepGenMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepGenMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepGenMatrix_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepGenMatrix*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepMatrix_Dictionary();
   static void *new_CLHEPcLcLHepMatrix(void *p = 0);
   static void *newArray_CLHEPcLcLHepMatrix(Long_t size, void *p);
   static void delete_CLHEPcLcLHepMatrix(void *p);
   static void deleteArray_CLHEPcLcLHepMatrix(void *p);
   static void destruct_CLHEPcLcLHepMatrix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepMatrix*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepMatrix) == sizeof(::ROOT::Shadow::CLHEP::HepMatrix));
      ::CLHEP::HepMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepMatrix),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepMatrix", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Matrix/Matrix.h", 248,
                  typeid(::CLHEP::HepMatrix), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepMatrix_ShowMembers, &CLHEPcLcLHepMatrix_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepMatrix) );
      instance.SetNew(&new_CLHEPcLcLHepMatrix);
      instance.SetNewArray(&newArray_CLHEPcLcLHepMatrix);
      instance.SetDelete(&delete_CLHEPcLcLHepMatrix);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepMatrix);
      instance.SetDestructor(&destruct_CLHEPcLcLHepMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepMatrix*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepMatrix_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepMatrix*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepSymMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepSymMatrix_Dictionary();
   static void *new_CLHEPcLcLHepSymMatrix(void *p = 0);
   static void *newArray_CLHEPcLcLHepSymMatrix(Long_t size, void *p);
   static void delete_CLHEPcLcLHepSymMatrix(void *p);
   static void deleteArray_CLHEPcLcLHepSymMatrix(void *p);
   static void destruct_CLHEPcLcLHepSymMatrix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepSymMatrix*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepSymMatrix) == sizeof(::ROOT::Shadow::CLHEP::HepSymMatrix));
      ::CLHEP::HepSymMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepSymMatrix),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepSymMatrix", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Matrix/SymMatrix.h", 128,
                  typeid(::CLHEP::HepSymMatrix), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepSymMatrix_ShowMembers, &CLHEPcLcLHepSymMatrix_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepSymMatrix) );
      instance.SetNew(&new_CLHEPcLcLHepSymMatrix);
      instance.SetNewArray(&newArray_CLHEPcLcLHepSymMatrix);
      instance.SetDelete(&delete_CLHEPcLcLHepSymMatrix);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepSymMatrix);
      instance.SetDestructor(&destruct_CLHEPcLcLHepSymMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepSymMatrix*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepSymMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepSymMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepSymMatrix_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepSymMatrix*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepVector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepVector_Dictionary();
   static void *new_CLHEPcLcLHepVector(void *p = 0);
   static void *newArray_CLHEPcLcLHepVector(Long_t size, void *p);
   static void delete_CLHEPcLcLHepVector(void *p);
   static void deleteArray_CLHEPcLcLHepVector(void *p);
   static void destruct_CLHEPcLcLHepVector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepVector*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepVector) == sizeof(::ROOT::Shadow::CLHEP::HepVector));
      ::CLHEP::HepVector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepVector),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepVector", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Matrix/Vector.h", 70,
                  typeid(::CLHEP::HepVector), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepVector_ShowMembers, &CLHEPcLcLHepVector_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepVector) );
      instance.SetNew(&new_CLHEPcLcLHepVector);
      instance.SetNewArray(&newArray_CLHEPcLcLHepVector);
      instance.SetDelete(&delete_CLHEPcLcLHepVector);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepVector);
      instance.SetDestructor(&destruct_CLHEPcLcLHepVector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepVector*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepVector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepVector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepVector_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepVector*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void CLHEPcLcLHepDiagMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void CLHEPcLcLHepDiagMatrix_Dictionary();
   static void *new_CLHEPcLcLHepDiagMatrix(void *p = 0);
   static void *newArray_CLHEPcLcLHepDiagMatrix(Long_t size, void *p);
   static void delete_CLHEPcLcLHepDiagMatrix(void *p);
   static void deleteArray_CLHEPcLcLHepDiagMatrix(void *p);
   static void destruct_CLHEPcLcLHepDiagMatrix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CLHEP::HepDiagMatrix*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::CLHEP::HepDiagMatrix) == sizeof(::ROOT::Shadow::CLHEP::HepDiagMatrix));
      ::CLHEP::HepDiagMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::CLHEP::HepDiagMatrix),0);
      static ::ROOT::TGenericClassInfo 
         instance("CLHEP::HepDiagMatrix", "/cvmfs/juno.ihep.ac.cn/sl6_amd64_gcc447/Release/J17v1r1/ExternalLibs/CLHEP/2.1.0.1/include/CLHEP/Matrix/DiagMatrix.h", 70,
                  typeid(::CLHEP::HepDiagMatrix), DefineBehavior(ptr, ptr),
                  &CLHEPcLcLHepDiagMatrix_ShowMembers, &CLHEPcLcLHepDiagMatrix_Dictionary, isa_proxy, 4,
                  sizeof(::CLHEP::HepDiagMatrix) );
      instance.SetNew(&new_CLHEPcLcLHepDiagMatrix);
      instance.SetNewArray(&newArray_CLHEPcLcLHepDiagMatrix);
      instance.SetDelete(&delete_CLHEPcLcLHepDiagMatrix);
      instance.SetDeleteArray(&deleteArray_CLHEPcLcLHepDiagMatrix);
      instance.SetDestructor(&destruct_CLHEPcLcLHepDiagMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CLHEP::HepDiagMatrix*)
   {
      return GenerateInitInstanceLocal((::CLHEP::HepDiagMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CLHEP::HepDiagMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void CLHEPcLcLHepDiagMatrix_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepDiagMatrix*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepLorentzVector_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepLorentzVector.
      typedef ::ROOT::Shadow::CLHEP::HepLorentzVector ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepLorentzVector*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pp", (void*)&sobj->pp);
      R__insp.InspectMember("CLHEP::Hep3Vector", (void*)&sobj->pp, "pp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ee", &sobj->ee);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepLorentzVector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepLorentzVector : new ::CLHEP::HepLorentzVector;
   }
   static void *newArray_CLHEPcLcLHepLorentzVector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepLorentzVector[nElements] : new ::CLHEP::HepLorentzVector[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepLorentzVector(void *p) {
      delete ((::CLHEP::HepLorentzVector*)p);
   }
   static void deleteArray_CLHEPcLcLHepLorentzVector(void *p) {
      delete [] ((::CLHEP::HepLorentzVector*)p);
   }
   static void destruct_CLHEPcLcLHepLorentzVector(void *p) {
      typedef ::CLHEP::HepLorentzVector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepLorentzVector

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepAxisAngle_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepAxisAngle.
      typedef ::ROOT::Shadow::CLHEP::HepAxisAngle ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepAxisAngle*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "axis_", (void*)&sobj->axis_);
      R__insp.InspectMember("CLHEP::Hep3Vector", (void*)&sobj->axis_, "axis_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta_", &sobj->delta_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepAxisAngle(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepAxisAngle : new ::CLHEP::HepAxisAngle;
   }
   static void *newArray_CLHEPcLcLHepAxisAngle(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepAxisAngle[nElements] : new ::CLHEP::HepAxisAngle[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepAxisAngle(void *p) {
      delete ((::CLHEP::HepAxisAngle*)p);
   }
   static void deleteArray_CLHEPcLcLHepAxisAngle(void *p) {
      delete [] ((::CLHEP::HepAxisAngle*)p);
   }
   static void destruct_CLHEPcLcLHepAxisAngle(void *p) {
      typedef ::CLHEP::HepAxisAngle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepAxisAngle

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepBoost_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepBoost.
      typedef ::ROOT::Shadow::CLHEP::HepBoost ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoost*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rep_", (void*)&sobj->rep_);
      R__insp.InspectMember("CLHEP::HepRep4x4Symmetric", (void*)&sobj->rep_, "rep_.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepBoost(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoost : new ::CLHEP::HepBoost;
   }
   static void *newArray_CLHEPcLcLHepBoost(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoost[nElements] : new ::CLHEP::HepBoost[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepBoost(void *p) {
      delete ((::CLHEP::HepBoost*)p);
   }
   static void deleteArray_CLHEPcLcLHepBoost(void *p) {
      delete [] ((::CLHEP::HepBoost*)p);
   }
   static void destruct_CLHEPcLcLHepBoost(void *p) {
      typedef ::CLHEP::HepBoost current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepBoost

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepBoostX_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepBoostX.
      typedef ::ROOT::Shadow::CLHEP::HepBoostX ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoostX*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta_", &sobj->beta_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gamma_", &sobj->gamma_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepBoostX(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoostX : new ::CLHEP::HepBoostX;
   }
   static void *newArray_CLHEPcLcLHepBoostX(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoostX[nElements] : new ::CLHEP::HepBoostX[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepBoostX(void *p) {
      delete ((::CLHEP::HepBoostX*)p);
   }
   static void deleteArray_CLHEPcLcLHepBoostX(void *p) {
      delete [] ((::CLHEP::HepBoostX*)p);
   }
   static void destruct_CLHEPcLcLHepBoostX(void *p) {
      typedef ::CLHEP::HepBoostX current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepBoostX

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepBoostY_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepBoostY.
      typedef ::ROOT::Shadow::CLHEP::HepBoostY ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoostY*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta_", &sobj->beta_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gamma_", &sobj->gamma_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepBoostY(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoostY : new ::CLHEP::HepBoostY;
   }
   static void *newArray_CLHEPcLcLHepBoostY(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoostY[nElements] : new ::CLHEP::HepBoostY[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepBoostY(void *p) {
      delete ((::CLHEP::HepBoostY*)p);
   }
   static void deleteArray_CLHEPcLcLHepBoostY(void *p) {
      delete [] ((::CLHEP::HepBoostY*)p);
   }
   static void destruct_CLHEPcLcLHepBoostY(void *p) {
      typedef ::CLHEP::HepBoostY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepBoostY

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepBoostZ_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepBoostZ.
      typedef ::ROOT::Shadow::CLHEP::HepBoostZ ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepBoostZ*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta_", &sobj->beta_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gamma_", &sobj->gamma_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepBoostZ(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoostZ : new ::CLHEP::HepBoostZ;
   }
   static void *newArray_CLHEPcLcLHepBoostZ(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepBoostZ[nElements] : new ::CLHEP::HepBoostZ[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepBoostZ(void *p) {
      delete ((::CLHEP::HepBoostZ*)p);
   }
   static void deleteArray_CLHEPcLcLHepBoostZ(void *p) {
      delete [] ((::CLHEP::HepBoostZ*)p);
   }
   static void destruct_CLHEPcLcLHepBoostZ(void *p) {
      typedef ::CLHEP::HepBoostZ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepBoostZ

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepEulerAngles_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepEulerAngles.
      typedef ::ROOT::Shadow::CLHEP::HepEulerAngles ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepEulerAngles*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_", &sobj->phi_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta_", &sobj->theta_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psi_", &sobj->psi_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepEulerAngles(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepEulerAngles : new ::CLHEP::HepEulerAngles;
   }
   static void *newArray_CLHEPcLcLHepEulerAngles(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepEulerAngles[nElements] : new ::CLHEP::HepEulerAngles[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepEulerAngles(void *p) {
      delete ((::CLHEP::HepEulerAngles*)p);
   }
   static void deleteArray_CLHEPcLcLHepEulerAngles(void *p) {
      delete [] ((::CLHEP::HepEulerAngles*)p);
   }
   static void destruct_CLHEPcLcLHepEulerAngles(void *p) {
      typedef ::CLHEP::HepEulerAngles current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepEulerAngles

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepLorentzRotation_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepLorentzRotation.
      typedef ::ROOT::Shadow::CLHEP::HepLorentzRotation ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepLorentzRotation*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mxx", &sobj->mxx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mxy", &sobj->mxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mxz", &sobj->mxz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mxt", &sobj->mxt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myx", &sobj->myx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myy", &sobj->myy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myz", &sobj->myz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myt", &sobj->myt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mzx", &sobj->mzx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mzy", &sobj->mzy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mzz", &sobj->mzz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mzt", &sobj->mzt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mtx", &sobj->mtx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mty", &sobj->mty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mtz", &sobj->mtz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mtt", &sobj->mtt);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepLorentzRotation(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepLorentzRotation : new ::CLHEP::HepLorentzRotation;
   }
   static void *newArray_CLHEPcLcLHepLorentzRotation(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepLorentzRotation[nElements] : new ::CLHEP::HepLorentzRotation[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepLorentzRotation(void *p) {
      delete ((::CLHEP::HepLorentzRotation*)p);
   }
   static void deleteArray_CLHEPcLcLHepLorentzRotation(void *p) {
      delete [] ((::CLHEP::HepLorentzRotation*)p);
   }
   static void destruct_CLHEPcLcLHepLorentzRotation(void *p) {
      typedef ::CLHEP::HepLorentzRotation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepLorentzRotation

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepRotation_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepRotation.
      typedef ::ROOT::Shadow::CLHEP::HepRotation ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotation*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rxx", &sobj->rxx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rxy", &sobj->rxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rxz", &sobj->rxz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ryx", &sobj->ryx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ryy", &sobj->ryy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ryz", &sobj->ryz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rzx", &sobj->rzx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rzy", &sobj->rzy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rzz", &sobj->rzz);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepRotation(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotation : new ::CLHEP::HepRotation;
   }
   static void *newArray_CLHEPcLcLHepRotation(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotation[nElements] : new ::CLHEP::HepRotation[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepRotation(void *p) {
      delete ((::CLHEP::HepRotation*)p);
   }
   static void deleteArray_CLHEPcLcLHepRotation(void *p) {
      delete [] ((::CLHEP::HepRotation*)p);
   }
   static void destruct_CLHEPcLcLHepRotation(void *p) {
      typedef ::CLHEP::HepRotation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepRotation

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHep4RotationInterface_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::Hep4RotationInterface.
      typedef ::ROOT::Shadow::CLHEP::Hep4RotationInterface ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep4RotationInterface*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHep4RotationInterface(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::Hep4RotationInterface : new ::CLHEP::Hep4RotationInterface;
   }
} // end of namespace ROOT for class ::CLHEP::Hep4RotationInterface

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHep3RotationInterface_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::Hep3RotationInterface.
      typedef ::ROOT::Shadow::CLHEP::Hep3RotationInterface ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep3RotationInterface*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("CLHEP::Hep4RotationInterface", ( ::CLHEP::Hep4RotationInterface * )( (::CLHEP::Hep3RotationInterface*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHep3RotationInterface(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::Hep3RotationInterface : new ::CLHEP::Hep3RotationInterface;
   }
} // end of namespace ROOT for class ::CLHEP::Hep3RotationInterface

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepRotationX_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepRotationX.
      typedef ::ROOT::Shadow::CLHEP::HepRotationX ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotationX*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d", &sobj->d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s", &sobj->s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c", &sobj->c);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepRotationX(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotationX : new ::CLHEP::HepRotationX;
   }
   static void *newArray_CLHEPcLcLHepRotationX(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotationX[nElements] : new ::CLHEP::HepRotationX[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepRotationX(void *p) {
      delete ((::CLHEP::HepRotationX*)p);
   }
   static void deleteArray_CLHEPcLcLHepRotationX(void *p) {
      delete [] ((::CLHEP::HepRotationX*)p);
   }
   static void destruct_CLHEPcLcLHepRotationX(void *p) {
      typedef ::CLHEP::HepRotationX current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepRotationX

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepRotationY_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepRotationY.
      typedef ::ROOT::Shadow::CLHEP::HepRotationY ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotationY*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d", &sobj->d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s", &sobj->s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c", &sobj->c);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepRotationY(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotationY : new ::CLHEP::HepRotationY;
   }
   static void *newArray_CLHEPcLcLHepRotationY(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotationY[nElements] : new ::CLHEP::HepRotationY[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepRotationY(void *p) {
      delete ((::CLHEP::HepRotationY*)p);
   }
   static void deleteArray_CLHEPcLcLHepRotationY(void *p) {
      delete [] ((::CLHEP::HepRotationY*)p);
   }
   static void destruct_CLHEPcLcLHepRotationY(void *p) {
      typedef ::CLHEP::HepRotationY current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepRotationY

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepRotationZ_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepRotationZ.
      typedef ::ROOT::Shadow::CLHEP::HepRotationZ ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepRotationZ*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d", &sobj->d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "s", &sobj->s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c", &sobj->c);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepRotationZ(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotationZ : new ::CLHEP::HepRotationZ;
   }
   static void *newArray_CLHEPcLcLHepRotationZ(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRotationZ[nElements] : new ::CLHEP::HepRotationZ[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepRotationZ(void *p) {
      delete ((::CLHEP::HepRotationZ*)p);
   }
   static void deleteArray_CLHEPcLcLHepRotationZ(void *p) {
      delete [] ((::CLHEP::HepRotationZ*)p);
   }
   static void destruct_CLHEPcLcLHepRotationZ(void *p) {
      typedef ::CLHEP::HepRotationZ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepRotationZ

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHep3Vector_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::Hep3Vector.
      typedef ::ROOT::Shadow::CLHEP::Hep3Vector ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep3Vector*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx", &sobj->dx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy", &sobj->dy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &sobj->dz);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHep3Vector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::Hep3Vector : new ::CLHEP::Hep3Vector;
   }
   static void *newArray_CLHEPcLcLHep3Vector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::Hep3Vector[nElements] : new ::CLHEP::Hep3Vector[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHep3Vector(void *p) {
      delete ((::CLHEP::Hep3Vector*)p);
   }
   static void deleteArray_CLHEPcLcLHep3Vector(void *p) {
      delete [] ((::CLHEP::Hep3Vector*)p);
   }
   static void destruct_CLHEPcLcLHep3Vector(void *p) {
      typedef ::CLHEP::Hep3Vector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::Hep3Vector

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHep2Vector_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::Hep2Vector.
      typedef ::ROOT::Shadow::CLHEP::Hep2Vector ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::Hep2Vector*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dx", &sobj->dx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dy", &sobj->dy);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHep2Vector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::Hep2Vector : new ::CLHEP::Hep2Vector;
   }
   static void *newArray_CLHEPcLcLHep2Vector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::Hep2Vector[nElements] : new ::CLHEP::Hep2Vector[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHep2Vector(void *p) {
      delete ((::CLHEP::Hep2Vector*)p);
   }
   static void deleteArray_CLHEPcLcLHep2Vector(void *p) {
      delete [] ((::CLHEP::Hep2Vector*)p);
   }
   static void destruct_CLHEPcLcLHep2Vector(void *p) {
      typedef ::CLHEP::Hep2Vector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::Hep2Vector

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepDiagMatrix_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepDiagMatrix.
      typedef ::ROOT::Shadow::CLHEP::HepDiagMatrix ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepDiagMatrix*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m", (void*)&sobj->m);
      R__insp.InspectMember("vector<double>", (void*)&sobj->m, "m.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrow", &sobj->nrow);
      R__insp.GenericShowMembers("CLHEP::HepGenMatrix", ( ::CLHEP::HepGenMatrix * )( (::CLHEP::HepDiagMatrix*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepDiagMatrix(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepDiagMatrix : new ::CLHEP::HepDiagMatrix;
   }
   static void *newArray_CLHEPcLcLHepDiagMatrix(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepDiagMatrix[nElements] : new ::CLHEP::HepDiagMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepDiagMatrix(void *p) {
      delete ((::CLHEP::HepDiagMatrix*)p);
   }
   static void deleteArray_CLHEPcLcLHepDiagMatrix(void *p) {
      delete [] ((::CLHEP::HepDiagMatrix*)p);
   }
   static void destruct_CLHEPcLcLHepDiagMatrix(void *p) {
      typedef ::CLHEP::HepDiagMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepDiagMatrix

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepGenMatrix_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepGenMatrix.
      typedef ::ROOT::Shadow::CLHEP::HepGenMatrix ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepGenMatrix*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepGenMatrix(void *p) {
      delete ((::CLHEP::HepGenMatrix*)p);
   }
   static void deleteArray_CLHEPcLcLHepGenMatrix(void *p) {
      delete [] ((::CLHEP::HepGenMatrix*)p);
   }
   static void destruct_CLHEPcLcLHepGenMatrix(void *p) {
      typedef ::CLHEP::HepGenMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepGenMatrix

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepMatrix_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepMatrix.
      typedef ::ROOT::Shadow::CLHEP::HepMatrix ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepMatrix*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m", (void*)&sobj->m);
      R__insp.InspectMember("vector<double>", (void*)&sobj->m, "m.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrow", &sobj->nrow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncol", &sobj->ncol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &sobj->size);
      R__insp.GenericShowMembers("CLHEP::HepGenMatrix", ( ::CLHEP::HepGenMatrix * )( (::CLHEP::HepMatrix*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepMatrix(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepMatrix : new ::CLHEP::HepMatrix;
   }
   static void *newArray_CLHEPcLcLHepMatrix(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepMatrix[nElements] : new ::CLHEP::HepMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepMatrix(void *p) {
      delete ((::CLHEP::HepMatrix*)p);
   }
   static void deleteArray_CLHEPcLcLHepMatrix(void *p) {
      delete [] ((::CLHEP::HepMatrix*)p);
   }
   static void destruct_CLHEPcLcLHepMatrix(void *p) {
      typedef ::CLHEP::HepMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepMatrix

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepSymMatrix_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepSymMatrix.
      typedef ::ROOT::Shadow::CLHEP::HepSymMatrix ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepSymMatrix*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m", (void*)&sobj->m);
      R__insp.InspectMember("vector<double>", (void*)&sobj->m, "m.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrow", &sobj->nrow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &sobj->size);
      R__insp.GenericShowMembers("CLHEP::HepGenMatrix", ( ::CLHEP::HepGenMatrix * )( (::CLHEP::HepSymMatrix*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepSymMatrix(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepSymMatrix : new ::CLHEP::HepSymMatrix;
   }
   static void *newArray_CLHEPcLcLHepSymMatrix(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepSymMatrix[nElements] : new ::CLHEP::HepSymMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepSymMatrix(void *p) {
      delete ((::CLHEP::HepSymMatrix*)p);
   }
   static void deleteArray_CLHEPcLcLHepSymMatrix(void *p) {
      delete [] ((::CLHEP::HepSymMatrix*)p);
   }
   static void destruct_CLHEPcLcLHepSymMatrix(void *p) {
      typedef ::CLHEP::HepSymMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepSymMatrix

//______________________________________________________________________________
namespace ROOT {
   void CLHEPcLcLHepVector_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class CLHEP::HepVector.
      typedef ::ROOT::Shadow::CLHEP::HepVector ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::CLHEP::HepVector*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m", (void*)&sobj->m);
      R__insp.InspectMember("vector<double>", (void*)&sobj->m, "m.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nrow", &sobj->nrow);
      R__insp.GenericShowMembers("CLHEP::HepGenMatrix", ( ::CLHEP::HepGenMatrix * )( (::CLHEP::HepVector*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepVector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepVector : new ::CLHEP::HepVector;
   }
   static void *newArray_CLHEPcLcLHepVector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepVector[nElements] : new ::CLHEP::HepVector[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepVector(void *p) {
      delete ((::CLHEP::HepVector*)p);
   }
   static void deleteArray_CLHEPcLcLHepVector(void *p) {
      delete [] ((::CLHEP::HepVector*)p);
   }
   static void destruct_CLHEPcLcLHepVector(void *p) {
      typedef ::CLHEP::HepVector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepVector

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepRep3x3(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRep3x3 : new ::CLHEP::HepRep3x3;
   }
   static void *newArray_CLHEPcLcLHepRep3x3(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRep3x3[nElements] : new ::CLHEP::HepRep3x3[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepRep3x3(void *p) {
      delete ((::CLHEP::HepRep3x3*)p);
   }
   static void deleteArray_CLHEPcLcLHepRep3x3(void *p) {
      delete [] ((::CLHEP::HepRep3x3*)p);
   }
   static void destruct_CLHEPcLcLHepRep3x3(void *p) {
      typedef ::CLHEP::HepRep3x3 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepRep3x3

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepRep4x4(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRep4x4 : new ::CLHEP::HepRep4x4;
   }
   static void *newArray_CLHEPcLcLHepRep4x4(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRep4x4[nElements] : new ::CLHEP::HepRep4x4[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepRep4x4(void *p) {
      delete ((::CLHEP::HepRep4x4*)p);
   }
   static void deleteArray_CLHEPcLcLHepRep4x4(void *p) {
      delete [] ((::CLHEP::HepRep4x4*)p);
   }
   static void destruct_CLHEPcLcLHepRep4x4(void *p) {
      typedef ::CLHEP::HepRep4x4 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepRep4x4

namespace ROOT {
   // Wrappers around operator new
   static void *new_CLHEPcLcLHepRep4x4Symmetric(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRep4x4Symmetric : new ::CLHEP::HepRep4x4Symmetric;
   }
   static void *newArray_CLHEPcLcLHepRep4x4Symmetric(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::CLHEP::HepRep4x4Symmetric[nElements] : new ::CLHEP::HepRep4x4Symmetric[nElements];
   }
   // Wrapper around operator delete
   static void delete_CLHEPcLcLHepRep4x4Symmetric(void *p) {
      delete ((::CLHEP::HepRep4x4Symmetric*)p);
   }
   static void deleteArray_CLHEPcLcLHepRep4x4Symmetric(void *p) {
      delete [] ((::CLHEP::HepRep4x4Symmetric*)p);
   }
   static void destruct_CLHEPcLcLHepRep4x4Symmetric(void *p) {
      typedef ::CLHEP::HepRep4x4Symmetric current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CLHEP::HepRep4x4Symmetric

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

/********************************************************
* ../src/CLHEPIncDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCLHEPIncDict();

extern "C" void G__set_cpp_environmentCLHEPIncDict() {
  G__cpp_reset_tagtableCLHEPIncDict();
}
#include <new>
extern "C" int G__cpp_dllrevCLHEPIncDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CLHEP::HepRotation */
static int G__CLHEPIncDict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotation[n];
     } else {
       p = new((void*) gvp) CLHEP::HepRotation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotation;
     } else {
       p = new((void*) gvp) CLHEP::HepRotation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::HepRotation*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::HepRotation*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::HepRotationX*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::HepRotationX*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::HepRotationY*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::HepRotationY*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::HepRotationZ*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::HepRotationZ*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::HepAxisAngle*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::HepAxisAngle*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::HepAxisAngle*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::HepEulerAngles*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::HepEulerAngles*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::HepEulerAngles*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(
*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref
, *(CLHEP::Hep3Vector*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(
*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref
, *(CLHEP::Hep3Vector*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref
, *(CLHEP::Hep3Vector*) libp->para[2].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->setRows(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref
, *(CLHEP::Hep3Vector*) libp->para[2].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator=(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator=(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator=(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator=(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->set(*(CLHEP::HepRep3x3*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotation(*(CLHEP::HepRep3x3*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotation(*(CLHEP::HepRep3x3*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->colX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->colY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->colZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->rowX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->rowY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->rowZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep3x3* pobj;
         const CLHEP::HepRep3x3 xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->rep3x3();
         pobj = new CLHEP::HepRep3x3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation::HepRotation_row* pobj;
         const CLHEP::HepRotation::HepRotation_row xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepRotation::HepRotation_row(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->operator()((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->getPsi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->psi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles* pobj;
         const CLHEP::HepEulerAngles xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->eulerAngles();
         pobj = new CLHEP::HepEulerAngles(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->getDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->getAxis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->delta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->axis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepAxisAngle* pobj;
         const CLHEP::HepAxisAngle xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->axisAngle();
         pobj = new CLHEP::HepAxisAngle(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotation*) G__getstructoffset())->getAngleAxis(*(double*) G__Doubleref(&libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->phiX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->phiY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->phiZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->thetaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->thetaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->thetaZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotation*) G__getstructoffset())->setPhi((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotation*) G__getstructoffset())->setTheta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotation*) G__getstructoffset())->setPsi((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotation*) G__getstructoffset())->setAxis(*(CLHEP::Hep3Vector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotation*) G__getstructoffset())->setDelta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotation*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotation*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->compare(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->operator==(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->operator!=(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->operator<(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->operator>(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->operator<=(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->operator>=(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotation*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotation*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotation*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator()(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator*(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation* pobj;
         const CLHEP::HepRotation xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator*(*(CLHEP::HepRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation* pobj;
         const CLHEP::HepRotation xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator*(*(CLHEP::HepRotationX*) libp->para[0].ref);
         pobj = new CLHEP::HepRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation* pobj;
         const CLHEP::HepRotation xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator*(*(CLHEP::HepRotationY*) libp->para[0].ref);
         pobj = new CLHEP::HepRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation* pobj;
         const CLHEP::HepRotation xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->operator*(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         pobj = new CLHEP::HepRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator*=(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->transform(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator*=(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator*=(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->operator*=(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->transform(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->transform(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->transform(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->rotateX((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->rotateY((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->rotateZ((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (CLHEP::Hep3Vector*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->rotateAxes(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref
, *(CLHEP::Hep3Vector*) libp->para[2].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation* pobj;
         const CLHEP::HepRotation xobj = ((const CLHEP::HepRotation*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotation& obj = ((CLHEP::HepRotation*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepRotation*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotation::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_169_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotation::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepRotation G__TCLHEPcLcLHepRotation;
static int G__CLHEPIncDict_169_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepRotation*) (soff+(sizeof(CLHEP::HepRotation)*i)))->~G__TCLHEPcLcLHepRotation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepRotation*) (soff))->~G__TCLHEPcLcLHepRotation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepEulerAngles */
static int G__CLHEPIncDict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepEulerAngles* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepEulerAngles[n];
     } else {
       p = new((void*) gvp) CLHEP::HepEulerAngles[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepEulerAngles;
     } else {
       p = new((void*) gvp) CLHEP::HepEulerAngles;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepEulerAngles* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepEulerAngles(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) CLHEP::HepEulerAngles(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles& obj = ((CLHEP::HepEulerAngles*) G__getstructoffset())->setPhi((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles& obj = ((CLHEP::HepEulerAngles*) G__getstructoffset())->setTheta((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->getPsi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->psi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles& obj = ((CLHEP::HepEulerAngles*) G__getstructoffset())->setPsi((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles& obj = ((CLHEP::HepEulerAngles*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->compare(*(CLHEP::HepEulerAngles*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->operator==(*(CLHEP::HepEulerAngles*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->operator!=(*(CLHEP::HepEulerAngles*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->operator<(*(CLHEP::HepEulerAngles*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->operator<=(*(CLHEP::HepEulerAngles*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->operator>(*(CLHEP::HepEulerAngles*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->operator>=(*(CLHEP::HepEulerAngles*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepEulerAngles::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepEulerAngles::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->isNear(*(CLHEP::HepEulerAngles::EA*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->isNear(*(CLHEP::HepEulerAngles::EA*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepEulerAngles*) G__getstructoffset())->howNear(*(CLHEP::HepEulerAngles::EA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CLHEPIncDict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CLHEP::HepEulerAngles* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CLHEP::HepEulerAngles(*(CLHEP::HepEulerAngles*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepEulerAngles G__TCLHEPcLcLHepEulerAngles;
static int G__CLHEPIncDict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepEulerAngles*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepEulerAngles*) (soff+(sizeof(CLHEP::HepEulerAngles)*i)))->~G__TCLHEPcLcLHepEulerAngles();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepEulerAngles*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepEulerAngles*) (soff))->~G__TCLHEPcLcLHepEulerAngles();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CLHEPIncDict_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepEulerAngles* dest = (CLHEP::HepEulerAngles*) G__getstructoffset();
   *dest = *(CLHEP::HepEulerAngles*) libp->para[0].ref;
   const CLHEP::HepEulerAngles& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepAxisAngle */
static int G__CLHEPIncDict_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepAxisAngle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepAxisAngle[n];
     } else {
       p = new((void*) gvp) CLHEP::HepAxisAngle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepAxisAngle;
     } else {
       p = new((void*) gvp) CLHEP::HepAxisAngle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepAxisAngle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepAxisAngle(*((const CLHEP::Hep3Vector*) G__int(libp->para[0])), (CLHEP::HepAxisAngle::Scalar) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepAxisAngle(*((const CLHEP::Hep3Vector*) G__int(libp->para[0])), (CLHEP::HepAxisAngle::Scalar) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepAxisAngle*) G__getstructoffset())->getAxis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepAxisAngle*) G__getstructoffset())->axis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepAxisAngle& obj = ((CLHEP::HepAxisAngle*) G__getstructoffset())->setAxis(*((const CLHEP::Hep3Vector*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->getDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->delta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepAxisAngle& obj = ((CLHEP::HepAxisAngle*) G__getstructoffset())->setDelta((CLHEP::HepAxisAngle::Scalar) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepAxisAngle& obj = ((CLHEP::HepAxisAngle*) G__getstructoffset())->set(*((const CLHEP::Hep3Vector*) G__int(libp->para[0])), (CLHEP::HepAxisAngle::Scalar) G__double(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->compare(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->operator==(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->operator!=(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->operator<(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->operator<=(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->operator>(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->operator>=(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepAxisAngle::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepAxisAngle::setTolerance((CLHEP::HepAxisAngle::Scalar) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->isNear(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref, (CLHEP::HepAxisAngle::Scalar) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->isNear(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_171_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepAxisAngle*) G__getstructoffset())->howNear(*(CLHEP::HepAxisAngle::AA*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CLHEPIncDict_171_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CLHEP::HepAxisAngle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CLHEP::HepAxisAngle(*(CLHEP::HepAxisAngle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepAxisAngle G__TCLHEPcLcLHepAxisAngle;
static int G__CLHEPIncDict_171_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepAxisAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepAxisAngle*) (soff+(sizeof(CLHEP::HepAxisAngle)*i)))->~G__TCLHEPcLcLHepAxisAngle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepAxisAngle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepAxisAngle*) (soff))->~G__TCLHEPcLcLHepAxisAngle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CLHEPIncDict_171_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepAxisAngle* dest = (CLHEP::HepAxisAngle*) G__getstructoffset();
   *dest = *(CLHEP::HepAxisAngle*) libp->para[0].ref;
   const CLHEP::HepAxisAngle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::Hep3Vector */
static int G__CLHEPIncDict_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep3Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::Hep3Vector[n];
     } else {
       p = new((void*) gvp) CLHEP::Hep3Vector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::Hep3Vector;
     } else {
       p = new((void*) gvp) CLHEP::Hep3Vector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep3Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::Hep3Vector((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::Hep3Vector((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep3Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::Hep3Vector((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::Hep3Vector((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep3Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::Hep3Vector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) CLHEP::Hep3Vector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep3Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::Hep3Vector(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::Hep3Vector(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator()((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator[]((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator()((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->x());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setX((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setY((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setZ((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->cosTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->cos2Theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->mag2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->mag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setPhi((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setTheta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setMag((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->perp2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->perp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setPerp((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setCylTheta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->perp2(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->perp(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator=(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator==(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator!=(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->isNear(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->isNear(*(CLHEP::Hep3Vector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->howNear(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->deltaR(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator+=(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator-=(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator-();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->unit();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->orthogonal();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->dot(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->cross(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->angle(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->pseudoRapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setEta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setCylEta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotateX((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotateY((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotateZ((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotateUz(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->operator*=(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->transform(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setRThetaPhi((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setREtaPhi((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setRhoPhiZ((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setRhoPhiTheta((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setRhoPhiEta((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->r());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->rho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getRho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->eta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->getEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setR((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep3Vector*) G__getstructoffset())->setRho((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->compare(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator>(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator<(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator>=(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->operator<=(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->diff2(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::Hep3Vector::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::Hep3Vector::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->isParallel(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->isParallel(*(CLHEP::Hep3Vector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->isOrthogonal(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::Hep3Vector*) G__getstructoffset())->isOrthogonal(*(CLHEP::Hep3Vector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->howParallel(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->howOrthogonal(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->beta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->gamma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->coLinearRapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->angle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->theta(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->cosTheta(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->cos2Theta(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->project();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->project(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->perpPart();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep3Vector*) G__getstructoffset())->perpPart(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->rapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->rapidity(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->eta(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->polarAngle(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->deltaPhi(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->azimAngle(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->polarAngle(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep3Vector*) G__getstructoffset())->azimAngle(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotate(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotate(*(CLHEP::HepAxisAngle*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotate(*(CLHEP::HepEulerAngles*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_172_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector& obj = ((CLHEP::Hep3Vector*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::Hep3Vector G__TCLHEPcLcLHep3Vector;
static int G__CLHEPIncDict_172_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::Hep3Vector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::Hep3Vector*) (soff+(sizeof(CLHEP::Hep3Vector)*i)))->~G__TCLHEPcLcLHep3Vector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::Hep3Vector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::Hep3Vector*) (soff))->~G__TCLHEPcLcLHep3Vector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepLorentzVector */
static int G__CLHEPIncDict_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepLorentzVector[n];
     } else {
       p = new((void*) gvp) CLHEP::HepLorentzVector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepLorentzVector;
     } else {
       p = new((void*) gvp) CLHEP::HepLorentzVector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector((double) G__double(libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector((double) G__double(libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->x());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->t());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setX((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setY((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setZ((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setT((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->px());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->py());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->pz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->e());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setPx((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setPy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setPz((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setE((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->vect();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setVect(*(CLHEP::Hep3Vector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->cosTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->rho());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setTheta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setPhi((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setRho((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator()((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator=(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator+(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator+=(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator-(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator-=(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator-();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator==(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator!=(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->perp2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->perp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setPerp((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->perp2(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->perp(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->angle(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->mag2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->m2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->mag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->m());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->mt2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->mt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->et2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->et());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->dot(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->invariantMass2(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->invariantMass(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setVectMag(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setVectM(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->plus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->minus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->boostVector();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->boost((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->boost(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->boostX((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->boostY((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->boostZ((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->rapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->pseudoRapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isTimelike());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isSpacelike());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isLightlike((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isLightlike());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotateX((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotateY((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotateZ((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotateUz(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator*=(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->transform(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator*=(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->transform(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CLHEP::HepLorentzVector::setMetric((CLHEP::ZMpvMetric_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CLHEP::HepLorentzVector::getMetric());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), *((CLHEP::Tcomponent*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), *((CLHEP::Tcomponent*) G__int(libp->para[3])));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), *((CLHEP::Tcomponent*) G__int(libp->para[3])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set(*((CLHEP::Tcomponent*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(
*((CLHEP::Tcomponent*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(
*((CLHEP::Tcomponent*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set(*((CLHEP::Tcomponent*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(*((CLHEP::Tcomponent*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(*((CLHEP::Tcomponent*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set(*(CLHEP::Hep3Vector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzVector(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzVector(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->operator=(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->set((double) G__double(libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->getT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->v();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->getV();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setV(*(CLHEP::Hep3Vector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setV((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setRThetaPhi((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setREtaPhi((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzVector*) G__getstructoffset())->setRhoPhiZ((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->compare(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator>(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator<(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator>=(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->operator<=(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzVector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isNearCM(*(CLHEP::HepLorentzVector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isNearCM(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->howNearCM(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isParallel(*(CLHEP::HepLorentzVector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->isParallel(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->howParallel(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepLorentzVector::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepLorentzVector::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->deltaR(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->howLightlike());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->euclideanNorm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_133(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->euclideanNorm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->restMass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->invariantMass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->restMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->invariantMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->rest4Vector();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->beta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->gamma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->eta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->eta(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->rapidity(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->coLinearRapidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->findBoostToCM();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepLorentzVector*) G__getstructoffset())->findBoostToCM(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_147(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->et2(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_148(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->et(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->diff2(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->delta2Euclidean(*(CLHEP::HepLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->plus(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzVector*) G__getstructoffset())->minus(*(CLHEP::Hep3Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotate(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotate(*(CLHEP::HepAxisAngle*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_155(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotate(*(CLHEP::HepEulerAngles*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_156(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_175_0_157(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector& obj = ((CLHEP::HepLorentzVector*) G__getstructoffset())->boost(*(CLHEP::Hep3Vector*) libp->para[0].ref, (double) G__double(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepLorentzVector G__TCLHEPcLcLHepLorentzVector;
static int G__CLHEPIncDict_175_0_158(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepLorentzVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepLorentzVector*) (soff+(sizeof(CLHEP::HepLorentzVector)*i)))->~G__TCLHEPcLcLHepLorentzVector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepLorentzVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepLorentzVector*) (soff))->~G__TCLHEPcLcLHepLorentzVector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepLorentzRotation */
static int G__CLHEPIncDict_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepLorentzRotation[n];
     } else {
       p = new((void*) gvp) CLHEP::HepLorentzRotation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepLorentzRotation;
     } else {
       p = new((void*) gvp) CLHEP::HepLorentzRotation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepRotation*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepRotation*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepRotationX*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepRotationX*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepRotationY*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepRotationY*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepRotationZ*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepRotationZ*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepBoost*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepBoost*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepBoostX*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepBoostX*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepBoostY*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepBoostY*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepBoostZ*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepBoostZ*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->operator=(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->operator=(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->operator=(*(CLHEP::HepBoost*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepBoost*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepBoostX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepBoostY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepBoostZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(
*(CLHEP::HepLorentzVector*) libp->para[0].ref, *(CLHEP::HepLorentzVector*) libp->para[1].ref
, *(CLHEP::HepLorentzVector*) libp->para[2].ref, *(CLHEP::HepLorentzVector*) libp->para[3].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(
*(CLHEP::HepLorentzVector*) libp->para[0].ref, *(CLHEP::HepLorentzVector*) libp->para[1].ref
, *(CLHEP::HepLorentzVector*) libp->para[2].ref, *(CLHEP::HepLorentzVector*) libp->para[3].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepLorentzVector*) libp->para[0].ref, *(CLHEP::HepLorentzVector*) libp->para[1].ref
, *(CLHEP::HepLorentzVector*) libp->para[2].ref, *(CLHEP::HepLorentzVector*) libp->para[3].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->setRows(*(CLHEP::HepLorentzVector*) libp->para[0].ref, *(CLHEP::HepLorentzVector*) libp->para[1].ref
, *(CLHEP::HepLorentzVector*) libp->para[2].ref, *(CLHEP::HepLorentzVector*) libp->para[3].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->set(*(CLHEP::HepRep4x4*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepLorentzRotation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepLorentzRotation(*(CLHEP::HepRep4x4*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepLorentzRotation(*(CLHEP::HepRep4x4*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation::HepLorentzRotation_row* pobj;
         const CLHEP::HepLorentzRotation::HepLorentzRotation_row xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepLorentzRotation::HepLorentzRotation_row(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator()((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->compare(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator==(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator!=(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator<=(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator>=(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator<(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator>(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepLorentzRotation*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->vectorMultiplication(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->matrixMultiplication(*(CLHEP::HepRep4x4*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator*(*(CLHEP::HepBoost*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator*(*(CLHEP::HepRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->operator*=(*(CLHEP::HepBoost*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->operator*=(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->operator*=(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->transform(*(CLHEP::HepBoost*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->transform(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->transform(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->rotateX((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->rotateY((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->rotateZ((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (CLHEP::Hep3Vector*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->boostX((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->boostY((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->boostZ((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->boost((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->boost(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation& obj = ((CLHEP::HepLorentzRotation*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepLorentzRotation*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepLorentzRotation::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_176_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepLorentzRotation::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepLorentzRotation G__TCLHEPcLcLHepLorentzRotation;
static int G__CLHEPIncDict_176_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepLorentzRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepLorentzRotation*) (soff+(sizeof(CLHEP::HepLorentzRotation)*i)))->~G__TCLHEPcLcLHepLorentzRotation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepLorentzRotation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepLorentzRotation*) (soff))->~G__TCLHEPcLcLHepLorentzRotation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepRep3x3 */
static int G__CLHEPIncDict_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep3x3* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRep3x3[n];
     } else {
       p = new((void*) gvp) CLHEP::HepRep3x3[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRep3x3;
     } else {
       p = new((void*) gvp) CLHEP::HepRep3x3;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep3x3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 9
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRep3x3(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]));
   } else {
     p = new((void*) gvp) CLHEP::HepRep3x3(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep3x3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRep3x3((double*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepRep3x3((double*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRep3x3*) G__getstructoffset())->setToIdentity();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRep3x3*) G__getstructoffset())->getArray((double*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CLHEPIncDict_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CLHEP::HepRep3x3* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CLHEP::HepRep3x3(*(CLHEP::HepRep3x3*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepRep3x3 G__TCLHEPcLcLHepRep3x3;
static int G__CLHEPIncDict_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepRep3x3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepRep3x3*) (soff+(sizeof(CLHEP::HepRep3x3)*i)))->~G__TCLHEPcLcLHepRep3x3();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepRep3x3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepRep3x3*) (soff))->~G__TCLHEPcLcLHepRep3x3();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CLHEPIncDict_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep3x3* dest = (CLHEP::HepRep3x3*) G__getstructoffset();
   *dest = *(CLHEP::HepRep3x3*) libp->para[0].ref;
   const CLHEP::HepRep3x3& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepRep4x4 */
static int G__CLHEPIncDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRep4x4[n];
     } else {
       p = new((void*) gvp) CLHEP::HepRep4x4[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRep4x4;
     } else {
       p = new((void*) gvp) CLHEP::HepRep4x4;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 16
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRep4x4(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11])
, (double) G__double(libp->para[12]), (double) G__double(libp->para[13])
, (double) G__double(libp->para[14]), (double) G__double(libp->para[15]));
   } else {
     p = new((void*) gvp) CLHEP::HepRep4x4(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9])
, (double) G__double(libp->para[10]), (double) G__double(libp->para[11])
, (double) G__double(libp->para[12]), (double) G__double(libp->para[13])
, (double) G__double(libp->para[14]), (double) G__double(libp->para[15]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRep4x4(*(CLHEP::HepRep4x4Symmetric*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRep4x4(*(CLHEP::HepRep4x4Symmetric*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRep4x4((double*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepRep4x4((double*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRep4x4*) G__getstructoffset())->setToIdentity();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRep4x4*) G__getstructoffset())->getArray((double*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRep4x4*) G__getstructoffset())->operator==(*(CLHEP::HepRep4x4*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRep4x4*) G__getstructoffset())->operator!=(*(CLHEP::HepRep4x4*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRep4x4*) G__getstructoffset())->operator==(*(CLHEP::HepRep4x4*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRep4x4*) G__getstructoffset())->operator!=(*(CLHEP::HepRep4x4*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CLHEPIncDict_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CLHEP::HepRep4x4* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CLHEP::HepRep4x4(*(CLHEP::HepRep4x4*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepRep4x4 G__TCLHEPcLcLHepRep4x4;
static int G__CLHEPIncDict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepRep4x4*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepRep4x4*) (soff+(sizeof(CLHEP::HepRep4x4)*i)))->~G__TCLHEPcLcLHepRep4x4();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepRep4x4*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepRep4x4*) (soff))->~G__TCLHEPcLcLHepRep4x4();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CLHEPIncDict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4* dest = (CLHEP::HepRep4x4*) G__getstructoffset();
   *dest = *(CLHEP::HepRep4x4*) libp->para[0].ref;
   const CLHEP::HepRep4x4& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepRep4x4Symmetric */
static int G__CLHEPIncDict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4Symmetric* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRep4x4Symmetric[n];
     } else {
       p = new((void*) gvp) CLHEP::HepRep4x4Symmetric[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRep4x4Symmetric;
     } else {
       p = new((void*) gvp) CLHEP::HepRep4x4Symmetric;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4Symmetric* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRep4x4Symmetric(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9]));
   } else {
     p = new((void*) gvp) CLHEP::HepRep4x4Symmetric(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (double) G__double(libp->para[7])
, (double) G__double(libp->para[8]), (double) G__double(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4Symmetric* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRep4x4Symmetric((double*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepRep4x4Symmetric((double*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRep4x4Symmetric*) G__getstructoffset())->setToIdentity();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRep4x4Symmetric*) G__getstructoffset())->getArray((double*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CLHEPIncDict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CLHEP::HepRep4x4Symmetric* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CLHEP::HepRep4x4Symmetric(*(CLHEP::HepRep4x4Symmetric*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepRep4x4Symmetric G__TCLHEPcLcLHepRep4x4Symmetric;
static int G__CLHEPIncDict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepRep4x4Symmetric*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepRep4x4Symmetric*) (soff+(sizeof(CLHEP::HepRep4x4Symmetric)*i)))->~G__TCLHEPcLcLHepRep4x4Symmetric();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepRep4x4Symmetric*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepRep4x4Symmetric*) (soff))->~G__TCLHEPcLcLHepRep4x4Symmetric();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CLHEPIncDict_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRep4x4Symmetric* dest = (CLHEP::HepRep4x4Symmetric*) G__getstructoffset();
   *dest = *(CLHEP::HepRep4x4Symmetric*) libp->para[0].ref;
   const CLHEP::HepRep4x4Symmetric& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepRotationX */
static int G__CLHEPIncDict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationX* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotationX[n];
     } else {
       p = new((void*) gvp) CLHEP::HepRotationX[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotationX;
     } else {
       p = new((void*) gvp) CLHEP::HepRotationX;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotationX((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepRotationX((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotationX(*(CLHEP::HepRotationX*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotationX(*(CLHEP::HepRotationX*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationX& obj = ((CLHEP::HepRotationX*) G__getstructoffset())->operator=(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationX& obj = ((CLHEP::HepRotationX*) G__getstructoffset())->set((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->colX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->colY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->colZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->rowX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->rowY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->rowZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep3x3* pobj;
         const CLHEP::HepRep3x3 xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->rep3x3();
         pobj = new CLHEP::HepRep3x3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->getPsi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->psi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles* pobj;
         const CLHEP::HepEulerAngles xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->eulerAngles();
         pobj = new CLHEP::HepEulerAngles(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->getDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->getAxis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->delta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->axis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepAxisAngle* pobj;
         const CLHEP::HepAxisAngle xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->axisAngle();
         pobj = new CLHEP::HepAxisAngle(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationX*) G__getstructoffset())->getAngleAxis(*(double*) G__Doubleref(&libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->phiX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->phiY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->phiZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->thetaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->thetaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->thetaZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotationX*) G__getstructoffset())->setDelta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationX*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationX*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationX*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationX*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->compare(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->operator==(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->operator!=(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->operator<(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->operator>(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->operator<=(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->operator>=(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->distance2(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->howNear(*(CLHEP::HepRotationX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepRotationX*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepRotationX*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationX*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationX*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotationX*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->operator()(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->operator*(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationX* pobj;
         const CLHEP::HepRotationX xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->operator*(*(CLHEP::HepRotationX*) libp->para[0].ref);
         pobj = new CLHEP::HepRotationX(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationX& obj = ((CLHEP::HepRotationX*) G__getstructoffset())->operator*=(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationX& obj = ((CLHEP::HepRotationX*) G__getstructoffset())->transform(*(CLHEP::HepRotationX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationX* pobj;
         const CLHEP::HepRotationX xobj = ((const CLHEP::HepRotationX*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepRotationX(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationX& obj = ((CLHEP::HepRotationX*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepRotationX*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotationX::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_206_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotationX::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepRotationX G__TCLHEPcLcLHepRotationX;
static int G__CLHEPIncDict_206_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepRotationX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepRotationX*) (soff+(sizeof(CLHEP::HepRotationX)*i)))->~G__TCLHEPcLcLHepRotationX();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepRotationX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepRotationX*) (soff))->~G__TCLHEPcLcLHepRotationX();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepRotationY */
static int G__CLHEPIncDict_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationY* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotationY[n];
     } else {
       p = new((void*) gvp) CLHEP::HepRotationY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotationY;
     } else {
       p = new((void*) gvp) CLHEP::HepRotationY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotationY((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepRotationY((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotationY(*(CLHEP::HepRotationY*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotationY(*(CLHEP::HepRotationY*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationY& obj = ((CLHEP::HepRotationY*) G__getstructoffset())->operator=(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationY& obj = ((CLHEP::HepRotationY*) G__getstructoffset())->set((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->colX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->colY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->colZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->rowX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->rowY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->rowZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep3x3* pobj;
         const CLHEP::HepRep3x3 xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->rep3x3();
         pobj = new CLHEP::HepRep3x3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->getPsi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->psi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles* pobj;
         const CLHEP::HepEulerAngles xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->eulerAngles();
         pobj = new CLHEP::HepEulerAngles(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->getDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->getAxis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->delta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->axis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepAxisAngle* pobj;
         const CLHEP::HepAxisAngle xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->axisAngle();
         pobj = new CLHEP::HepAxisAngle(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationY*) G__getstructoffset())->getAngleAxis(*(double*) G__Doubleref(&libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->phiX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->phiY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->phiZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->thetaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->thetaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->thetaZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotationY*) G__getstructoffset())->setDelta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationY*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationY*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationY*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationY*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->compare(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->operator==(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->operator!=(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->operator<(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->operator>(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->operator<=(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->operator>=(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->distance2(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->howNear(*(CLHEP::HepRotationY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepRotationY*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepRotationY*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationY*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationY*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotationY*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->operator()(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->operator*(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationY* pobj;
         const CLHEP::HepRotationY xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->operator*(*(CLHEP::HepRotationY*) libp->para[0].ref);
         pobj = new CLHEP::HepRotationY(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationY& obj = ((CLHEP::HepRotationY*) G__getstructoffset())->operator*=(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationY& obj = ((CLHEP::HepRotationY*) G__getstructoffset())->transform(*(CLHEP::HepRotationY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationY* pobj;
         const CLHEP::HepRotationY xobj = ((const CLHEP::HepRotationY*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepRotationY(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationY& obj = ((CLHEP::HepRotationY*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepRotationY*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotationY::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_207_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotationY::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepRotationY G__TCLHEPcLcLHepRotationY;
static int G__CLHEPIncDict_207_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepRotationY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepRotationY*) (soff+(sizeof(CLHEP::HepRotationY)*i)))->~G__TCLHEPcLcLHepRotationY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepRotationY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepRotationY*) (soff))->~G__TCLHEPcLcLHepRotationY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepRotationZ */
static int G__CLHEPIncDict_208_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotationZ[n];
     } else {
       p = new((void*) gvp) CLHEP::HepRotationZ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepRotationZ;
     } else {
       p = new((void*) gvp) CLHEP::HepRotationZ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotationZ((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepRotationZ((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepRotationZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepRotationZ(*(CLHEP::HepRotationZ*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepRotationZ(*(CLHEP::HepRotationZ*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationZ& obj = ((CLHEP::HepRotationZ*) G__getstructoffset())->operator=(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationZ& obj = ((CLHEP::HepRotationZ*) G__getstructoffset())->set((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->colX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->colY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->colZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->rowX();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->rowY();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->rowZ();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep3x3* pobj;
         const CLHEP::HepRep3x3 xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->rep3x3();
         pobj = new CLHEP::HepRep3x3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->getPsi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->theta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->psi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepEulerAngles* pobj;
         const CLHEP::HepEulerAngles xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->eulerAngles();
         pobj = new CLHEP::HepEulerAngles(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->getDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->getAxis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->delta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->axis();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepAxisAngle* pobj;
         const CLHEP::HepAxisAngle xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->axisAngle();
         pobj = new CLHEP::HepAxisAngle(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationZ*) G__getstructoffset())->getAngleAxis(*(double*) G__Doubleref(&libp->para[0]), *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->phiX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->phiY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->phiZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->thetaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->thetaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->thetaZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotationZ*) G__getstructoffset())->setDelta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationZ*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationZ*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationZ*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepRotationZ*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->compare(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator==(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator!=(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator<(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator>(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator<=(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator>=(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->distance2(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->howNear(*(CLHEP::HepRotationZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepRotationZ*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepRotationZ*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepRotationZ*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepRotationZ*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepRotationZ*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator()(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator*(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationZ* pobj;
         const CLHEP::HepRotationZ xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->operator*(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         pobj = new CLHEP::HepRotationZ(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationZ& obj = ((CLHEP::HepRotationZ*) G__getstructoffset())->operator*=(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationZ& obj = ((CLHEP::HepRotationZ*) G__getstructoffset())->transform(*(CLHEP::HepRotationZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationZ* pobj;
         const CLHEP::HepRotationZ xobj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepRotationZ(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRotationZ& obj = ((CLHEP::HepRotationZ*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepRotationZ*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotationZ::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_208_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepRotationZ::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepRotationZ G__TCLHEPcLcLHepRotationZ;
static int G__CLHEPIncDict_208_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepRotationZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepRotationZ*) (soff+(sizeof(CLHEP::HepRotationZ)*i)))->~G__TCLHEPcLcLHepRotationZ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepRotationZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepRotationZ*) (soff))->~G__TCLHEPcLcLHepRotationZ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepBoost */
static int G__CLHEPIncDict_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoost[n];
     } else {
       p = new((void*) gvp) CLHEP::HepBoost[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoost;
     } else {
       p = new((void*) gvp) CLHEP::HepBoost;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(*(CLHEP::HepBoost*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(*(CLHEP::HepBoost*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->operator=(*(CLHEP::HepBoost*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->set(*(CLHEP::HepRep4x4Symmetric*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(*(CLHEP::HepRep4x4Symmetric*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(*(CLHEP::HepRep4x4Symmetric*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->set(*((CLHEP::Hep3Vector*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(*((CLHEP::Hep3Vector*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(*((CLHEP::Hep3Vector*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->set(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->set(*(CLHEP::HepBoostX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->set(*(CLHEP::HepBoostY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->set(*(CLHEP::HepBoostZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(*(CLHEP::HepBoostX*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(*(CLHEP::HepBoostX*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(*(CLHEP::HepBoostY*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(*(CLHEP::HepBoostY*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoost* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoost(*(CLHEP::HepBoostZ*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoost(*(CLHEP::HepBoostZ*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->beta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->gamma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->boostVector();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->getDirection();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->direction();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4Symmetric* pobj;
         const CLHEP::HepRep4x4Symmetric xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->rep4x4Symmetric();
         pobj = new CLHEP::HepRep4x4Symmetric(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoost*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoost*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoost*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoost*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->compare(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->operator==(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->operator!=(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->operator<=(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->operator>=(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->operator<(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->operator>(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->distance2(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->distance2(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->distance2(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoost*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoost*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepBoost*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->operator*(*(CLHEP::HepBoost*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->operator*(*(CLHEP::HepRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost* pobj;
         const CLHEP::HepBoost xobj = ((const CLHEP::HepBoost*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepBoost(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoost& obj = ((CLHEP::HepBoost*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepBoost*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoost::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_209_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoost::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepBoost G__TCLHEPcLcLHepBoost;
static int G__CLHEPIncDict_209_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepBoost*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepBoost*) (soff+(sizeof(CLHEP::HepBoost)*i)))->~G__TCLHEPcLcLHepBoost();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepBoost*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepBoost*) (soff))->~G__TCLHEPcLcLHepBoost();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepBoostX */
static int G__CLHEPIncDict_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostX* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoostX[n];
     } else {
       p = new((void*) gvp) CLHEP::HepBoostX[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoostX;
     } else {
       p = new((void*) gvp) CLHEP::HepBoostX;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoostX(*(CLHEP::HepBoostX*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoostX(*(CLHEP::HepBoostX*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostX& obj = ((CLHEP::HepBoostX*) G__getstructoffset())->operator=(*(CLHEP::HepBoostX*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostX& obj = ((CLHEP::HepBoostX*) G__getstructoffset())->set((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostX* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoostX((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepBoostX((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->beta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->gamma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->boostVector();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->getDirection();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4Symmetric* pobj;
         const CLHEP::HepRep4x4Symmetric xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->rep4x4Symmetric();
         pobj = new CLHEP::HepRep4x4Symmetric(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostX*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostX*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostX*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostX*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->compare(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->operator==(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->operator!=(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->operator<=(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->operator>=(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->operator<(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->operator>(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->distance2(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->howNear(*(CLHEP::HepBoostX*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepBoostX*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepBoostX*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostX*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostX*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepBoostX*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostX* pobj;
         const CLHEP::HepBoostX xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->operator*(*(CLHEP::HepBoostX*) libp->para[0].ref);
         pobj = new CLHEP::HepBoostX(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->operator*(*(CLHEP::HepBoost*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->operator*(*(CLHEP::HepRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostX* pobj;
         const CLHEP::HepBoostX xobj = ((const CLHEP::HepBoostX*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepBoostX(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostX& obj = ((CLHEP::HepBoostX*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepBoostX*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoostX::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_210_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoostX::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepBoostX G__TCLHEPcLcLHepBoostX;
static int G__CLHEPIncDict_210_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepBoostX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepBoostX*) (soff+(sizeof(CLHEP::HepBoostX)*i)))->~G__TCLHEPcLcLHepBoostX();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepBoostX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepBoostX*) (soff))->~G__TCLHEPcLcLHepBoostX();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepBoostY */
static int G__CLHEPIncDict_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostY* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoostY[n];
     } else {
       p = new((void*) gvp) CLHEP::HepBoostY[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoostY;
     } else {
       p = new((void*) gvp) CLHEP::HepBoostY;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoostY(*(CLHEP::HepBoostY*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoostY(*(CLHEP::HepBoostY*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostY& obj = ((CLHEP::HepBoostY*) G__getstructoffset())->operator=(*(CLHEP::HepBoostY*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostY& obj = ((CLHEP::HepBoostY*) G__getstructoffset())->set((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostY* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoostY((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepBoostY((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->beta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->gamma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->boostVector();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->getDirection();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4Symmetric* pobj;
         const CLHEP::HepRep4x4Symmetric xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->rep4x4Symmetric();
         pobj = new CLHEP::HepRep4x4Symmetric(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostY*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostY*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostY*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostY*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->compare(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->operator==(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->operator!=(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->operator<=(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->operator>=(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->operator<(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->operator>(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->distance2(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->howNear(*(CLHEP::HepBoostY*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepBoostY*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepBoostY*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostY*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostY*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepBoostY*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostY* pobj;
         const CLHEP::HepBoostY xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->operator*(*(CLHEP::HepBoostY*) libp->para[0].ref);
         pobj = new CLHEP::HepBoostY(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->operator*(*(CLHEP::HepBoost*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->operator*(*(CLHEP::HepRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostY* pobj;
         const CLHEP::HepBoostY xobj = ((const CLHEP::HepBoostY*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepBoostY(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostY& obj = ((CLHEP::HepBoostY*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepBoostY*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoostY::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_211_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoostY::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepBoostY G__TCLHEPcLcLHepBoostY;
static int G__CLHEPIncDict_211_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepBoostY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepBoostY*) (soff+(sizeof(CLHEP::HepBoostY)*i)))->~G__TCLHEPcLcLHepBoostY();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepBoostY*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepBoostY*) (soff))->~G__TCLHEPcLcLHepBoostY();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepBoostZ */
static int G__CLHEPIncDict_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoostZ[n];
     } else {
       p = new((void*) gvp) CLHEP::HepBoostZ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepBoostZ;
     } else {
       p = new((void*) gvp) CLHEP::HepBoostZ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoostZ(*(CLHEP::HepBoostZ*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepBoostZ(*(CLHEP::HepBoostZ*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostZ& obj = ((CLHEP::HepBoostZ*) G__getstructoffset())->operator=(*(CLHEP::HepBoostZ*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostZ& obj = ((CLHEP::HepBoostZ*) G__getstructoffset())->set((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepBoostZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepBoostZ((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepBoostZ((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->beta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->gamma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->boostVector();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->getDirection();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->xx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->xy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->xz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->xt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->yx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->yy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->yz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->yt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->zx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->zy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->zz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->zt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->tx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->ty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->tz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->tt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->col1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->col2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->col3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->col4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->row1();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->row2();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->row3();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->row4();
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4* pobj;
         const CLHEP::HepRep4x4 xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->rep4x4();
         pobj = new CLHEP::HepRep4x4(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepRep4x4Symmetric* pobj;
         const CLHEP::HepRep4x4Symmetric xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->rep4x4Symmetric();
         pobj = new CLHEP::HepRep4x4Symmetric(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostZ*) G__getstructoffset())->decompose(*(CLHEP::HepRotation*) libp->para[0].ref, *(CLHEP::HepBoost*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostZ*) G__getstructoffset())->decompose(*(CLHEP::HepAxisAngle*) libp->para[0].ref, *(CLHEP::Hep3Vector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostZ*) G__getstructoffset())->decompose(*(CLHEP::HepBoost*) libp->para[0].ref, *(CLHEP::HepRotation*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const CLHEP::HepBoostZ*) G__getstructoffset())->decompose(*(CLHEP::Hep3Vector*) libp->para[0].ref, *(CLHEP::HepAxisAngle*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->compare(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator==(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator!=(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator<=(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator>=(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator<(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator>(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isIdentity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->distance2(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->distance2(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->distance2(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->distance2(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->howNear(*(CLHEP::HepBoostZ*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->howNear(*(CLHEP::HepBoost*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->howNear(*(CLHEP::HepRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->howNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepBoostZ*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepBoostZ*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepBoost*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::HepBoostZ*) G__getstructoffset())->isNear(*(CLHEP::HepLorentzRotation*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepBoostZ*) G__getstructoffset())->norm2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepBoostZ*) G__getstructoffset())->rectify();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator()(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzVector* pobj;
         const CLHEP::HepLorentzVector xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzVector*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostZ* pobj;
         const CLHEP::HepBoostZ xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator*(*(CLHEP::HepBoostZ*) libp->para[0].ref);
         pobj = new CLHEP::HepBoostZ(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator*(*(CLHEP::HepBoost*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator*(*(CLHEP::HepRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepLorentzRotation* pobj;
         const CLHEP::HepLorentzRotation xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->operator*(*(CLHEP::HepLorentzRotation*) libp->para[0].ref);
         pobj = new CLHEP::HepLorentzRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostZ* pobj;
         const CLHEP::HepBoostZ xobj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->inverse();
         pobj = new CLHEP::HepBoostZ(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepBoostZ& obj = ((CLHEP::HepBoostZ*) G__getstructoffset())->invert();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = ((const CLHEP::HepBoostZ*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoostZ::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_212_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::HepBoostZ::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepBoostZ G__TCLHEPcLcLHepBoostZ;
static int G__CLHEPIncDict_212_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepBoostZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepBoostZ*) (soff+(sizeof(CLHEP::HepBoostZ)*i)))->~G__TCLHEPcLcLHepBoostZ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepBoostZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepBoostZ*) (soff))->~G__TCLHEPcLcLHepBoostZ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::Hep4RotationInterface */
static int G__CLHEPIncDict_213_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::Hep4RotationInterface::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_213_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::Hep4RotationInterface::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__CLHEPIncDict_213_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep4RotationInterface *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     p = 0;
     G__genericerror("Error: Array construction with private/protected destructor is illegal");
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::Hep4RotationInterface;
     } else {
       p = new((void*) gvp) CLHEP::Hep4RotationInterface;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CLHEPIncDict_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CLHEP::Hep4RotationInterface* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CLHEP::Hep4RotationInterface(*(CLHEP::Hep4RotationInterface*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CLHEPIncDict_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep4RotationInterface* dest = (CLHEP::Hep4RotationInterface*) G__getstructoffset();
   *dest = *(CLHEP::Hep4RotationInterface*) libp->para[0].ref;
   const CLHEP::Hep4RotationInterface& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::Hep3RotationInterface */
// automatic default constructor
static int G__CLHEPIncDict_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep3RotationInterface *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     p = 0;
     G__genericerror("Error: Array construction with private/protected destructor is illegal");
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::Hep3RotationInterface;
     } else {
       p = new((void*) gvp) CLHEP::Hep3RotationInterface;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CLHEPIncDict_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CLHEP::Hep3RotationInterface* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CLHEP::Hep3RotationInterface(*(CLHEP::Hep3RotationInterface*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CLHEPIncDict_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep3RotationInterface* dest = (CLHEP::Hep3RotationInterface*) G__getstructoffset();
   *dest = *(CLHEP::Hep3RotationInterface*) libp->para[0].ref;
   const CLHEP::Hep3RotationInterface& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::Hep2Vector */
static int G__CLHEPIncDict_218_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep2Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::Hep2Vector((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) CLHEP::Hep2Vector((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::Hep2Vector((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) CLHEP::Hep2Vector((double) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new CLHEP::Hep2Vector[n];
       } else {
         p = new((void*) gvp) CLHEP::Hep2Vector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new CLHEP::Hep2Vector;
       } else {
         p = new((void*) gvp) CLHEP::Hep2Vector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep2Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::Hep2Vector(*(CLHEP::Hep2Vector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::Hep2Vector(*(CLHEP::Hep2Vector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::Hep2Vector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::Hep2Vector(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::Hep2Vector(*(CLHEP::Hep3Vector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->x());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator()((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator[]((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::Hep2Vector*) G__getstructoffset())->operator()((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::Hep2Vector*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->setX((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->setY((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->phi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->mag2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->mag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->r());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->setPhi((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->setMag((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->setR((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->setPolar((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep2Vector& obj = ((CLHEP::Hep2Vector*) G__getstructoffset())->operator=(*(CLHEP::Hep2Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator==(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator!=(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->compare(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator>(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator<(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator>=(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator<=(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::Hep2Vector::getTolerance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) CLHEP::Hep2Vector::setTolerance((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->howNear(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->isNear(*(CLHEP::Hep2Vector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->isNear(*(CLHEP::Hep2Vector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->howParallel(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->isParallel(*(CLHEP::Hep2Vector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->isParallel(*(CLHEP::Hep2Vector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->howOrthogonal(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->isOrthogonal(*(CLHEP::Hep2Vector*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const CLHEP::Hep2Vector*) G__getstructoffset())->isOrthogonal(*(CLHEP::Hep2Vector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep2Vector& obj = ((CLHEP::Hep2Vector*) G__getstructoffset())->operator+=(*(CLHEP::Hep2Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep2Vector& obj = ((CLHEP::Hep2Vector*) G__getstructoffset())->operator-=(*(CLHEP::Hep2Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep2Vector* pobj;
         const CLHEP::Hep2Vector xobj = ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator-();
         pobj = new CLHEP::Hep2Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep2Vector& obj = ((CLHEP::Hep2Vector*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep2Vector* pobj;
         const CLHEP::Hep2Vector xobj = ((const CLHEP::Hep2Vector*) G__getstructoffset())->unit();
         pobj = new CLHEP::Hep2Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep2Vector* pobj;
         const CLHEP::Hep2Vector xobj = ((const CLHEP::Hep2Vector*) G__getstructoffset())->orthogonal();
         pobj = new CLHEP::Hep2Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->dot(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::Hep2Vector*) G__getstructoffset())->angle(*(CLHEP::Hep2Vector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::Hep2Vector*) G__getstructoffset())->rotate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_218_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::Hep3Vector* pobj;
         const CLHEP::Hep3Vector xobj = ((const CLHEP::Hep2Vector*) G__getstructoffset())->operator ::CLHEP::Hep3Vector();
         pobj = new CLHEP::Hep3Vector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::Hep2Vector G__TCLHEPcLcLHep2Vector;
static int G__CLHEPIncDict_218_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::Hep2Vector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::Hep2Vector*) (soff+(sizeof(CLHEP::Hep2Vector)*i)))->~G__TCLHEPcLcLHep2Vector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::Hep2Vector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::Hep2Vector*) (soff))->~G__TCLHEPcLcLHep2Vector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepGenMatrix */
static int G__CLHEPIncDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepGenMatrix*) G__getstructoffset())->num_row());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const CLHEP::HepGenMatrix*) G__getstructoffset())->num_col());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const CLHEP::HepGenMatrix*) G__getstructoffset())->operator()((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::HepGenMatrix*) G__getstructoffset())->operator()((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepGenMatrix*) G__getstructoffset())->invert(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CLHEP::HepGenMatrix::HepGenMatrix_row* pobj;
         CLHEP::HepGenMatrix::HepGenMatrix_row xobj = ((CLHEP::HepGenMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepGenMatrix::HepGenMatrix_row(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepGenMatrix::HepGenMatrix_row_const* pobj;
         const CLHEP::HepGenMatrix::HepGenMatrix_row_const xobj = ((const CLHEP::HepGenMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepGenMatrix::HepGenMatrix_row_const(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CLHEP::HepGenMatrix::swap(*(int*) G__Intref(&libp->para[0]), *(int*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CLHEP::HepGenMatrix::swap(*(vector<double>*) libp->para[0].ref, *(vector<double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const CLHEP::HepGenMatrix*) G__getstructoffset())->operator==(*(CLHEP::HepGenMatrix*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CLHEP::HepGenMatrix::error((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepGenMatrix G__TCLHEPcLcLHepGenMatrix;
static int G__CLHEPIncDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepGenMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepGenMatrix*) (soff+(sizeof(CLHEP::HepGenMatrix)*i)))->~G__TCLHEPcLcLHepGenMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepGenMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepGenMatrix*) (soff))->~G__TCLHEPcLcLHepGenMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepMatrix */
static int G__CLHEPIncDict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepMatrix[n];
     } else {
       p = new((void*) gvp) CLHEP::HepMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepMatrix;
     } else {
       p = new((void*) gvp) CLHEP::HepMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepMatrix((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepMatrix((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepMatrix(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) CLHEP::HepMatrix(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepMatrix(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(CLHEP::HepRandom*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepMatrix(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(CLHEP::HepRandom*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepMatrix(*(CLHEP::HepMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepMatrix(*(CLHEP::HepMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepMatrix(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepMatrix(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepMatrix(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepMatrix(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepMatrix(*(CLHEP::HepVector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepMatrix(*(CLHEP::HepVector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator+=(*(CLHEP::HepMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator+=(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator+=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator+=(*(CLHEP::HepVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator-=(*(CLHEP::HepMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator-=(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator-=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator-=(*(CLHEP::HepVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix& obj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepRotation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix* pobj;
         const CLHEP::HepMatrix xobj = ((const CLHEP::HepMatrix*) G__getstructoffset())->operator-();
         pobj = new CLHEP::HepMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix* pobj;
         const CLHEP::HepMatrix xobj = ((const CLHEP::HepMatrix*) G__getstructoffset())->apply((double (*)(double, int, int)) G__int(libp->para[0]));
         pobj = new CLHEP::HepMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix* pobj;
         const CLHEP::HepMatrix xobj = ((const CLHEP::HepMatrix*) G__getstructoffset())->T();
         pobj = new CLHEP::HepMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix* pobj;
         const CLHEP::HepMatrix xobj = ((const CLHEP::HepMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
         pobj = new CLHEP::HepMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(CLHEP::HepMatrix*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix* pobj;
         const CLHEP::HepMatrix xobj = ((const CLHEP::HepMatrix*) G__getstructoffset())->inverse(*(int*) G__Intref(&libp->para[0]));
         pobj = new CLHEP::HepMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepMatrix*) G__getstructoffset())->determinant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepMatrix*) G__getstructoffset())->trace());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CLHEP::HepMatrix::HepMatrix_row* pobj;
         CLHEP::HepMatrix::HepMatrix_row xobj = ((CLHEP::HepMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepMatrix::HepMatrix_row(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_227_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix::HepMatrix_row_const* pobj;
         const CLHEP::HepMatrix::HepMatrix_row_const xobj = ((const CLHEP::HepMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepMatrix::HepMatrix_row_const(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepMatrix G__TCLHEPcLcLHepMatrix;
static int G__CLHEPIncDict_227_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepMatrix*) (soff+(sizeof(CLHEP::HepMatrix)*i)))->~G__TCLHEPcLcLHepMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepMatrix*) (soff))->~G__TCLHEPcLcLHepMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepSymMatrix */
static int G__CLHEPIncDict_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepSymMatrix[n];
     } else {
       p = new((void*) gvp) CLHEP::HepSymMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepSymMatrix;
     } else {
       p = new((void*) gvp) CLHEP::HepSymMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepSymMatrix((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepSymMatrix((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepSymMatrix((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepSymMatrix((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepSymMatrix((int) G__int(libp->para[0]), *(CLHEP::HepRandom*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepSymMatrix((int) G__int(libp->para[0]), *(CLHEP::HepRandom*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepSymMatrix(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepSymMatrix(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepSymMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepSymMatrix(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepSymMatrix(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->fast((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->fast((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->assign(*(CLHEP::HepMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->assign(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator+=(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator+=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator-=(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator-=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix& obj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->operator-();
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->T();
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->apply((double (*)(double, int, int)) G__int(libp->para[0]));
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->similarity(*(CLHEP::HepMatrix*) libp->para[0].ref);
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->similarity(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->similarityT(*(CLHEP::HepMatrix*) libp->para[0].ref);
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepSymMatrix*) G__getstructoffset())->similarity(*(CLHEP::HepVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), *(CLHEP::HepSymMatrix*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CLHEP::HepSymMatrix* pobj;
         CLHEP::HepSymMatrix xobj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->inverse(*(int*) G__Intref(&libp->para[0]));
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepSymMatrix*) G__getstructoffset())->determinant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepSymMatrix*) G__getstructoffset())->trace());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CLHEP::HepSymMatrix::HepSymMatrix_row* pobj;
         CLHEP::HepSymMatrix::HepSymMatrix_row xobj = ((CLHEP::HepSymMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepSymMatrix::HepSymMatrix_row(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix::HepSymMatrix_row_const* pobj;
         const CLHEP::HepSymMatrix::HepSymMatrix_row_const xobj = ((const CLHEP::HepSymMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepSymMatrix::HepSymMatrix_row_const(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->invertCholesky5(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->invertCholesky6(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->invertHaywood4(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->invertHaywood5(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->invertHaywood6(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_228_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepSymMatrix*) G__getstructoffset())->invertBunchKaufman(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepSymMatrix G__TCLHEPcLcLHepSymMatrix;
static int G__CLHEPIncDict_228_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepSymMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepSymMatrix*) (soff+(sizeof(CLHEP::HepSymMatrix)*i)))->~G__TCLHEPcLcLHepSymMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepSymMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepSymMatrix*) (soff))->~G__TCLHEPcLcLHepSymMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepVector */
static int G__CLHEPIncDict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepVector[n];
     } else {
       p = new((void*) gvp) CLHEP::HepVector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepVector;
     } else {
       p = new((void*) gvp) CLHEP::HepVector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepVector((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepVector((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepVector((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepVector((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepVector((int) G__int(libp->para[0]), *(CLHEP::HepRandom*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepVector((int) G__int(libp->para[0]), *(CLHEP::HepRandom*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepVector(*(CLHEP::HepVector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepVector(*(CLHEP::HepVector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepVector(*(CLHEP::HepMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepVector(*(CLHEP::HepMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const CLHEP::HepVector*) G__getstructoffset())->operator()((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator()((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const CLHEP::HepVector*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator+=(*(CLHEP::HepMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator+=(*(CLHEP::HepVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator-=(*(CLHEP::HepMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator-=(*(CLHEP::HepVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator=(*(CLHEP::HepVector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator=(*(CLHEP::HepMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector& obj = ((CLHEP::HepVector*) G__getstructoffset())->operator=(*(CLHEP::Hep3Vector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector* pobj;
         const CLHEP::HepVector xobj = ((const CLHEP::HepVector*) G__getstructoffset())->operator-();
         pobj = new CLHEP::HepVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector* pobj;
         const CLHEP::HepVector xobj = ((const CLHEP::HepVector*) G__getstructoffset())->apply((double (*)(double, int)) G__int(libp->para[0]));
         pobj = new CLHEP::HepVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepVector* pobj;
         const CLHEP::HepVector xobj = ((const CLHEP::HepVector*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new CLHEP::HepVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CLHEP::HepVector* pobj;
         CLHEP::HepVector xobj = ((CLHEP::HepVector*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new CLHEP::HepVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepVector*) G__getstructoffset())->sub((int) G__int(libp->para[0]), *(CLHEP::HepVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepVector*) G__getstructoffset())->normsq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepVector*) G__getstructoffset())->norm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_229_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepMatrix* pobj;
         const CLHEP::HepMatrix xobj = ((const CLHEP::HepVector*) G__getstructoffset())->T();
         pobj = new CLHEP::HepMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepVector G__TCLHEPcLcLHepVector;
static int G__CLHEPIncDict_229_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepVector*) (soff+(sizeof(CLHEP::HepVector)*i)))->~G__TCLHEPcLcLHepVector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepVector*) (soff))->~G__TCLHEPcLcLHepVector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CLHEP::HepDiagMatrix */
static int G__CLHEPIncDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepDiagMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepDiagMatrix[n];
     } else {
       p = new((void*) gvp) CLHEP::HepDiagMatrix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CLHEP::HepDiagMatrix;
     } else {
       p = new((void*) gvp) CLHEP::HepDiagMatrix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepDiagMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepDiagMatrix((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) CLHEP::HepDiagMatrix((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepDiagMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepDiagMatrix((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) CLHEP::HepDiagMatrix((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepDiagMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepDiagMatrix((int) G__int(libp->para[0]), *(CLHEP::HepRandom*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepDiagMatrix((int) G__int(libp->para[0]), *(CLHEP::HepRandom*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CLHEP::HepDiagMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CLHEP::HepDiagMatrix(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CLHEP::HepDiagMatrix(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->fast((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->fast((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepDiagMatrix*) G__getstructoffset())->assign(*(CLHEP::HepMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepDiagMatrix*) G__getstructoffset())->assign(*(CLHEP::HepSymMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepDiagMatrix*) G__getstructoffset())->assign(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix& obj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix& obj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix& obj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->operator+=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix& obj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->operator-=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix& obj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->operator=(*(CLHEP::HepDiagMatrix*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix* pobj;
         const CLHEP::HepDiagMatrix xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->operator-();
         pobj = new CLHEP::HepDiagMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix* pobj;
         const CLHEP::HepDiagMatrix xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->T();
         pobj = new CLHEP::HepDiagMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix* pobj;
         const CLHEP::HepDiagMatrix xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->apply((double (*)(double, int, int)) G__int(libp->para[0]));
         pobj = new CLHEP::HepDiagMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->similarity(*(CLHEP::HepMatrix*) libp->para[0].ref);
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepSymMatrix* pobj;
         const CLHEP::HepSymMatrix xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->similarityT(*(CLHEP::HepMatrix*) libp->para[0].ref);
         pobj = new CLHEP::HepSymMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->similarity(*(CLHEP::HepVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix* pobj;
         const CLHEP::HepDiagMatrix xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new CLHEP::HepDiagMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CLHEP::HepDiagMatrix* pobj;
         CLHEP::HepDiagMatrix xobj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new CLHEP::HepDiagMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CLHEP::HepDiagMatrix*) G__getstructoffset())->sub((int) G__int(libp->para[0]), *(CLHEP::HepDiagMatrix*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix* pobj;
         const CLHEP::HepDiagMatrix xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->inverse(*(int*) G__Intref(&libp->para[0]));
         pobj = new CLHEP::HepDiagMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->determinant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->trace());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         CLHEP::HepDiagMatrix::HepDiagMatrix_row* pobj;
         CLHEP::HepDiagMatrix::HepDiagMatrix_row xobj = ((CLHEP::HepDiagMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepDiagMatrix::HepDiagMatrix_row(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CLHEPIncDict_230_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const CLHEP::HepDiagMatrix::HepDiagMatrix_row_const* pobj;
         const CLHEP::HepDiagMatrix::HepDiagMatrix_row_const xobj = ((const CLHEP::HepDiagMatrix*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         pobj = new CLHEP::HepDiagMatrix::HepDiagMatrix_row_const(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CLHEP::HepDiagMatrix G__TCLHEPcLcLHepDiagMatrix;
static int G__CLHEPIncDict_230_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CLHEP::HepDiagMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CLHEP::HepDiagMatrix*) (soff+(sizeof(CLHEP::HepDiagMatrix)*i)))->~G__TCLHEPcLcLHepDiagMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CLHEP::HepDiagMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CLHEP::HepDiagMatrix*) (soff))->~G__TCLHEPcLcLHepDiagMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CLHEP::HepRotation */

/* CLHEP::HepEulerAngles */

/* CLHEP::HepAxisAngle */

/* CLHEP::Hep3Vector */

/* CLHEP::HepLorentzVector */

/* CLHEP::HepLorentzRotation */

/* CLHEP::HepRep3x3 */

/* CLHEP::HepRep4x4 */

/* CLHEP::HepRep4x4Symmetric */

/* CLHEP::HepRotationX */

/* CLHEP::HepRotationY */

/* CLHEP::HepRotationZ */

/* CLHEP::HepBoost */

/* CLHEP::HepBoostX */

/* CLHEP::HepBoostY */

/* CLHEP::HepBoostZ */

/* CLHEP::Hep4RotationInterface */

/* CLHEP::Hep3RotationInterface */

/* CLHEP::Hep2Vector */

/* CLHEP::HepGenMatrix */

/* CLHEP::HepMatrix */

/* CLHEP::HepSymMatrix */

/* CLHEP::HepVector */

/* CLHEP::HepDiagMatrix */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCLHEPIncDict {
 public:
  G__Sizep2memfuncCLHEPIncDict(): p(&G__Sizep2memfuncCLHEPIncDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCLHEPIncDict::*p)();
};

size_t G__get_sizep2memfuncCLHEPIncDict()
{
  G__Sizep2memfuncCLHEPIncDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCLHEPIncDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface))) {
     CLHEP::Hep3RotationInterface *G__Lderived;
     G__Lderived=(CLHEP::Hep3RotationInterface*)0x1000;
     {
       CLHEP::Hep4RotationInterface *G__Lpbase=(CLHEP::Hep4RotationInterface*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface),G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix))) {
     CLHEP::HepMatrix *G__Lderived;
     G__Lderived=(CLHEP::HepMatrix*)0x1000;
     {
       CLHEP::HepGenMatrix *G__Lpbase=(CLHEP::HepGenMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix),G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix))) {
     CLHEP::HepSymMatrix *G__Lderived;
     G__Lderived=(CLHEP::HepSymMatrix*)0x1000;
     {
       CLHEP::HepGenMatrix *G__Lpbase=(CLHEP::HepGenMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix),G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector))) {
     CLHEP::HepVector *G__Lderived;
     G__Lderived=(CLHEP::HepVector*)0x1000;
     {
       CLHEP::HepGenMatrix *G__Lpbase=(CLHEP::HepGenMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector),G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix))) {
     CLHEP::HepDiagMatrix *G__Lderived;
     G__Lderived=(CLHEP::HepDiagMatrix*)0x1000;
     {
       CLHEP::HepGenMatrix *G__Lpbase=(CLHEP::HepGenMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix),G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCLHEPIncDict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Scalar",100,-1,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("AA",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle));
   G__setnewtype(-1,"just an abbreviation",0);
   G__search_typename2("EA",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles));
   G__setnewtype(-1,"just an abbreviation",0);
   G__search_typename2("mIter",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mcIter",117,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("double (*)(double, int, int)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("double (*)(double, int)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CLHEP::HepRotation */
static void G__setup_memvarCLHEPcLcLHepRotation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   { CLHEP::HepRotation *p; p=(CLHEP::HepRotation*)0x1000; if (p) { }
   G__memvar_setup((void*)(&CLHEP::HepRotation::IDENTITY),117,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation),-1,-2,1,"IDENTITY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"rxx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"rxy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"rxz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"ryx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"ryy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"ryz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"rzx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"rzy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"rzz=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepEulerAngles */
static void G__setup_memvarCLHEPcLcLHepEulerAngles(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles));
   { CLHEP::HepEulerAngles *p; p=(CLHEP::HepEulerAngles*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,2,"tolerance=",0,"to determine relative nearness");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"phi_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"theta_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"psi_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepAxisAngle */
static void G__setup_memvarCLHEPcLcLHepAxisAngle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle));
   { CLHEP::HepAxisAngle *p; p=(CLHEP::HepAxisAngle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Scalar"),-2,2,"tolerance=",0,"to determine relative nearness");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector),-1,-1,4,"axis_=",0,"Note:  After construction, this is always of mag 1");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"delta_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::Hep3Vector */
static void G__setup_memvarCLHEPcLcLHep3Vector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector));
   { CLHEP::Hep3Vector *p; p=(CLHEP::Hep3Vector*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("X=%lldLL",(long long)CLHEP::Hep3Vector::X).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("Y=%lldLL",(long long)CLHEP::Hep3Vector::Y).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("Z=%lldLL",(long long)CLHEP::Hep3Vector::Z).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("NUM_COORDINATES=%lldLL",(long long)CLHEP::Hep3Vector::NUM_COORDINATES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("SIZE=%lldLL",(long long)CLHEP::Hep3Vector::SIZE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("ToleranceTicks=%lldLL",(long long)CLHEP::Hep3Vector::ToleranceTicks).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"dx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"dy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,2,"tolerance=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepLorentzVector */
static void G__setup_memvarCLHEPcLcLHepLorentzVector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   { CLHEP::HepLorentzVector *p; p=(CLHEP::HepLorentzVector*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("X=%lldLL",(long long)CLHEP::HepLorentzVector::X).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("Y=%lldLL",(long long)CLHEP::HepLorentzVector::Y).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("Z=%lldLL",(long long)CLHEP::HepLorentzVector::Z).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("T=%lldLL",(long long)CLHEP::HepLorentzVector::T).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("NUM_COORDINATES=%lldLL",(long long)CLHEP::HepLorentzVector::NUM_COORDINATES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("SIZE=%lldLL",(long long)CLHEP::HepLorentzVector::SIZE).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector),-1,-1,4,"pp=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"ee=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,4,"tolerance=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,4,"metric=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepLorentzRotation */
static void G__setup_memvarCLHEPcLcLHepLorentzRotation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   { CLHEP::HepLorentzRotation *p; p=(CLHEP::HepLorentzRotation*)0x1000; if (p) { }
   G__memvar_setup((void*)(&CLHEP::HepLorentzRotation::IDENTITY),117,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation),-1,-2,1,"IDENTITY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mxx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mxy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mxz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mxt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"myx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"myy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"myz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"myt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mzx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mzy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mzz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mzt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mtx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mty=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mtz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"mtt=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepRep3x3 */
static void G__setup_memvarCLHEPcLcLHepRep3x3(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3));
   { CLHEP::HepRep3x3 *p; p=(CLHEP::HepRep3x3*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xx_)-(long)(p)),100,0,0,-1,-1,-1,1,"xx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xy_)-(long)(p)),100,0,0,-1,-1,-1,1,"xy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xz_)-(long)(p)),100,0,0,-1,-1,-1,1,"xz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yx_)-(long)(p)),100,0,0,-1,-1,-1,1,"yx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yy_)-(long)(p)),100,0,0,-1,-1,-1,1,"yy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yz_)-(long)(p)),100,0,0,-1,-1,-1,1,"yz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zx_)-(long)(p)),100,0,0,-1,-1,-1,1,"zx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zy_)-(long)(p)),100,0,0,-1,-1,-1,1,"zy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zz_)-(long)(p)),100,0,0,-1,-1,-1,1,"zz_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepRep4x4 */
static void G__setup_memvarCLHEPcLcLHepRep4x4(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4));
   { CLHEP::HepRep4x4 *p; p=(CLHEP::HepRep4x4*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xx_)-(long)(p)),100,0,0,-1,-1,-1,1,"xx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xy_)-(long)(p)),100,0,0,-1,-1,-1,1,"xy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xz_)-(long)(p)),100,0,0,-1,-1,-1,1,"xz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xt_)-(long)(p)),100,0,0,-1,-1,-1,1,"xt_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yx_)-(long)(p)),100,0,0,-1,-1,-1,1,"yx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yy_)-(long)(p)),100,0,0,-1,-1,-1,1,"yy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yz_)-(long)(p)),100,0,0,-1,-1,-1,1,"yz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yt_)-(long)(p)),100,0,0,-1,-1,-1,1,"yt_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zx_)-(long)(p)),100,0,0,-1,-1,-1,1,"zx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zy_)-(long)(p)),100,0,0,-1,-1,-1,1,"zy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zz_)-(long)(p)),100,0,0,-1,-1,-1,1,"zz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zt_)-(long)(p)),100,0,0,-1,-1,-1,1,"zt_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tx_)-(long)(p)),100,0,0,-1,-1,-1,1,"tx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ty_)-(long)(p)),100,0,0,-1,-1,-1,1,"ty_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tz_)-(long)(p)),100,0,0,-1,-1,-1,1,"tz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tt_)-(long)(p)),100,0,0,-1,-1,-1,1,"tt_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepRep4x4Symmetric */
static void G__setup_memvarCLHEPcLcLHepRep4x4Symmetric(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric));
   { CLHEP::HepRep4x4Symmetric *p; p=(CLHEP::HepRep4x4Symmetric*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->xx_)-(long)(p)),100,0,0,-1,-1,-1,1,"xx_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xy_)-(long)(p)),100,0,0,-1,-1,-1,1,"xy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xz_)-(long)(p)),100,0,0,-1,-1,-1,1,"xz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xt_)-(long)(p)),100,0,0,-1,-1,-1,1,"xt_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yy_)-(long)(p)),100,0,0,-1,-1,-1,1,"yy_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yz_)-(long)(p)),100,0,0,-1,-1,-1,1,"yz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yt_)-(long)(p)),100,0,0,-1,-1,-1,1,"yt_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zz_)-(long)(p)),100,0,0,-1,-1,-1,1,"zz_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zt_)-(long)(p)),100,0,0,-1,-1,-1,1,"zt_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tt_)-(long)(p)),100,0,0,-1,-1,-1,1,"tt_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepRotationX */
static void G__setup_memvarCLHEPcLcLHepRotationX(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX));
   { CLHEP::HepRotationX *p; p=(CLHEP::HepRotationX*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"d=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"s=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"c=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepRotationY */
static void G__setup_memvarCLHEPcLcLHepRotationY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY));
   { CLHEP::HepRotationY *p; p=(CLHEP::HepRotationY*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"d=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"s=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"c=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepRotationZ */
static void G__setup_memvarCLHEPcLcLHepRotationZ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ));
   { CLHEP::HepRotationZ *p; p=(CLHEP::HepRotationZ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"d=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"s=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"c=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepBoost */
static void G__setup_memvarCLHEPcLcLHepBoost(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   { CLHEP::HepBoost *p; p=(CLHEP::HepBoost*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric),-1,-1,2,"rep_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepBoostX */
static void G__setup_memvarCLHEPcLcLHepBoostX(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX));
   { CLHEP::HepBoostX *p; p=(CLHEP::HepBoostX*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"beta_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"gamma_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepBoostY */
static void G__setup_memvarCLHEPcLcLHepBoostY(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY));
   { CLHEP::HepBoostY *p; p=(CLHEP::HepBoostY*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"beta_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"gamma_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepBoostZ */
static void G__setup_memvarCLHEPcLcLHepBoostZ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ));
   { CLHEP::HepBoostZ *p; p=(CLHEP::HepBoostZ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"beta_=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"gamma_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::Hep4RotationInterface */
static void G__setup_memvarCLHEPcLcLHep4RotationInterface(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface));
   { CLHEP::Hep4RotationInterface *p; p=(CLHEP::Hep4RotationInterface*)0x1000; if (p) { }
   G__memvar_setup((void*)(&CLHEP::Hep4RotationInterface::tolerance),100,0,0,-1,-1,-2,1,"tolerance=",0,"to determine relative nearness");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterfacecLcLdA),-1,-2,1,G__FastAllocString(2048).Format("ToleranceTicks=%lldLL",(long long)CLHEP::Hep4RotationInterface::ToleranceTicks).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::Hep3RotationInterface */
static void G__setup_memvarCLHEPcLcLHep3RotationInterface(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface));
   { CLHEP::Hep3RotationInterface *p; p=(CLHEP::Hep3RotationInterface*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* CLHEP::Hep2Vector */
static void G__setup_memvarCLHEPcLcLHep2Vector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector));
   { CLHEP::Hep2Vector *p; p=(CLHEP::Hep2Vector*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("X=%lldLL",(long long)CLHEP::Hep2Vector::X).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("Y=%lldLL",(long long)CLHEP::Hep2Vector::Y).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("NUM_COORDINATES=%lldLL",(long long)CLHEP::Hep2Vector::NUM_COORDINATES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("SIZE=%lldLL",(long long)CLHEP::Hep2Vector::SIZE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("ZMpvToleranceTicks=%lldLL",(long long)CLHEP::Hep2Vector::ZMpvToleranceTicks).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,4,"tolerance=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepGenMatrix */
static void G__setup_memvarCLHEPcLcLHepGenMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix));
   { CLHEP::HepGenMatrix *p; p=(CLHEP::HepGenMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("size_max=%lldLL",(long long)CLHEP::HepGenMatrix::size_max).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepMatrix */
static void G__setup_memvarCLHEPcLcLHepMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   { CLHEP::HepMatrix *p; p=(CLHEP::HepMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"m=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nrow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"ncol=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"size=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepSymMatrix */
static void G__setup_memvarCLHEPcLcLHepSymMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   { CLHEP::HepSymMatrix *p; p=(CLHEP::HepSymMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"m=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nrow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"size=",0,"total number of elements");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,4,"posDefFraction5x5=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,4,"adjustment5x5=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,-1,-2,4,"CHOLESKY_THRESHOLD_5x5=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,-1,-2,4,"CHOLESKY_CREEP_5x5=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,4,"posDefFraction6x6=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-2,4,"adjustment6x6=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,-1,-2,4,"CHOLESKY_THRESHOLD_6x6=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,-1,-2,4,"CHOLESKY_CREEP_6x6=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepVector */
static void G__setup_memvarCLHEPcLcLHepVector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   { CLHEP::HepVector *p; p=(CLHEP::HepVector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"m=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nrow=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CLHEP::HepDiagMatrix */
static void G__setup_memvarCLHEPcLcLHepDiagMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix));
   { CLHEP::HepDiagMatrix *p; p=(CLHEP::HepDiagMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"m=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"nrow=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,-1,-2,4,"zero=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCLHEPIncDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCLHEPcLcLHepRotation(void) {
   /* CLHEP::HepRotation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation));
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - rx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - ry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - rz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_6, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - axis d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_7, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - axis d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepAxisAngle' - 11 - ax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_9, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepAxisAngle' - 11 - ax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_10, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 3, 1, 1, 0, 
"d - - 0 - phi d - - 0 - theta "
"d - - 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_11, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 3, 1, 1, 0, 
"d - - 0 - phi d - - 0 - theta "
"d - - 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_12, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepEulerAngles' - 11 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_13, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepEulerAngles' - 11 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_14, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 3, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - colX u 'CLHEP::Hep3Vector' - 11 - colY "
"u 'CLHEP::Hep3Vector' - 11 - colZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_15, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 3, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - colX u 'CLHEP::Hep3Vector' - 11 - colY "
"u 'CLHEP::Hep3Vector' - 11 - colZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRows",759,G__CLHEPIncDict_169_0_16, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 3, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - rowX u 'CLHEP::Hep3Vector' - 11 - rowY "
"u 'CLHEP::Hep3Vector' - 11 - rowZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_17, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_18, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_19, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_169_0_20, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_169_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_169_0_22, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_169_0_23, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_169_0_24, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRep3x3' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotation",1133,G__CLHEPIncDict_169_0_25, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRep3x3' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colX",406,G__CLHEPIncDict_169_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colY",407,G__CLHEPIncDict_169_0_27, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colZ",408,G__CLHEPIncDict_169_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowX",432,G__CLHEPIncDict_169_0_29, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowY",433,G__CLHEPIncDict_169_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowZ",434,G__CLHEPIncDict_169_0_31, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_169_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_169_0_33, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_169_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_169_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_169_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_169_0_37, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_169_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_169_0_39, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_169_0_40, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep3x3",549,G__CLHEPIncDict_169_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_169_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationcLcLHepRotation_row), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_169_0_43, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__CLHEPIncDict_169_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__CLHEPIncDict_169_0_45, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPsi",620,G__CLHEPIncDict_169_0_46, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_169_0_47, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_169_0_48, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("psi",332,G__CLHEPIncDict_169_0_49, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eulerAngles",1143,G__CLHEPIncDict_169_0_50, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDelta",810,G__CLHEPIncDict_169_0_51, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAxis",725,G__CLHEPIncDict_169_0_52, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delta",522,G__CLHEPIncDict_169_0_53, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axis",437,G__CLHEPIncDict_169_0_54, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axisAngle",924,G__CLHEPIncDict_169_0_55, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleAxis",1212,G__CLHEPIncDict_169_0_56, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - delta u 'CLHEP::Hep3Vector' - 1 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiX",409,G__CLHEPIncDict_169_0_57, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiY",410,G__CLHEPIncDict_169_0_58, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiZ",411,G__CLHEPIncDict_169_0_59, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaX",622,G__CLHEPIncDict_169_0_60, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaY",623,G__CLHEPIncDict_169_0_61, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaZ",624,G__CLHEPIncDict_169_0_62, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_169_0_63, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_169_0_64, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_169_0_65, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_169_0_66, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_169_0_67, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_169_0_68, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_169_0_69, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_169_0_70, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_169_0_71, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_169_0_72, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_169_0_73, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_169_0_74, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_169_0_75, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_169_0_76, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_169_0_77, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_169_0_78, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__CLHEPIncDict_169_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__CLHEPIncDict_169_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPsi",632,G__CLHEPIncDict_169_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAxis",737,G__CLHEPIncDict_169_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDelta",822,G__CLHEPIncDict_169_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_169_0_84, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_169_0_85, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_169_0_86, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_169_0_87, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_169_0_88, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_169_0_89, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_169_0_90, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_169_0_91, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_169_0_92, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_169_0_93, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_169_0_94, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_169_0_95, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_169_0_96, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_169_0_97, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_169_0_98, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_169_0_99, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_169_0_100, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_169_0_101, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_169_0_102, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_169_0_103, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_169_0_104, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_169_0_105, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_169_0_106, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_169_0_107, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_169_0_108, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_169_0_109, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_169_0_110, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - rx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_169_0_111, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - ry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_169_0_112, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - rz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_169_0_113, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_169_0_114, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_169_0_115, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_169_0_116, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_169_0_117, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_169_0_118, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_169_0_119, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_169_0_120, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateX",743,G__CLHEPIncDict_169_0_121, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateY",744,G__CLHEPIncDict_169_0_122, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateZ",745,G__CLHEPIncDict_169_0_123, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_169_0_124, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 2, 1, 1, 0, 
"d - - 0 - delta u 'CLHEP::Hep3Vector' - 11 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_169_0_125, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 2, 1, 1, 0, 
"d - - 0 - delta U 'CLHEP::Hep3Vector' - 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateAxes",1056,G__CLHEPIncDict_169_0_126, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 3, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - newX u 'CLHEP::Hep3Vector' - 11 - newY "
"u 'CLHEP::Hep3Vector' - 11 - newZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_169_0_127, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_169_0_128, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_169_0_129, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_169_0_130, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepRotation::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_169_0_131, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepRotation::setTolerance) ), 0);
   G__memfunc_setup("HepRotation",1133,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation), -1, 0, 9, 1, 2, 0, 
"d - - 0 - mxx d - - 0 - mxy "
"d - - 0 - mxz d - - 0 - myx "
"d - - 0 - myy d - - 0 - myz "
"d - - 0 - mzx d - - 0 - mzy "
"d - - 0 - mzz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCols",733,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 7, 1, 4, 8, 
"u 'CLHEP::Hep3Vector' - 11 - u1 u 'CLHEP::Hep3Vector' - 11 - u2 "
"u 'CLHEP::Hep3Vector' - 11 - u3 d - - 0 - u1u2 "
"u 'CLHEP::Hep3Vector' - 1 - v1 u 'CLHEP::Hep3Vector' - 1 - v2 "
"u 'CLHEP::Hep3Vector' - 1 - v3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setArbitrarily",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 8, 
"u 'CLHEP::Hep3Vector' - 11 - colX u 'CLHEP::Hep3Vector' - 1 - v1 "
"u 'CLHEP::Hep3Vector' - 1 - v2 u 'CLHEP::Hep3Vector' - 1 - v3", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepRotation", 1259, G__CLHEPIncDict_169_0_135, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepEulerAngles(void) {
   /* CLHEP::HepEulerAngles */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles));
   G__memfunc_setup("HepEulerAngles",1396,G__CLHEPIncDict_170_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 0, 0, 1, 1, 0, "", "HepEulerAngles::HepEulerAngles()", (void*) NULL, 0);
   G__memfunc_setup("HepEulerAngles",1396,G__CLHEPIncDict_170_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 0, 3, 1, 1, 0, 
"d - - 0 - phi d - - 0 - theta "
"d - - 0 - psi", "HepEulerAngles::HepEulerAngles()", (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__CLHEPIncDict_170_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepEulerAngles::getPhi()", (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_170_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepEulerAngles::phi()", (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__CLHEPIncDict_170_0_5, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 1, 1, 1, 1, 0, "d - - 0 - phi", "HepEulerAngles::setPhi()", (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__CLHEPIncDict_170_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepEulerAngles::getTheta()", (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_170_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepEulerAngles::theta()", (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__CLHEPIncDict_170_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 1, 1, 1, 1, 0, "d - - 0 - theta", "HepEulerAngles::setTheta()", (void*) NULL, 0);
   G__memfunc_setup("getPsi",620,G__CLHEPIncDict_170_0_9, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepEulerAngles::getPsi()", (void*) NULL, 0);
   G__memfunc_setup("psi",332,G__CLHEPIncDict_170_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepEulerAngles::psi()", (void*) NULL, 0);
   G__memfunc_setup("setPsi",632,G__CLHEPIncDict_170_0_11, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 1, 1, 1, 1, 0, "d - - 0 - psi", "HepEulerAngles::setPsi()", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_170_0_12, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 1, 3, 1, 1, 0, 
"d - - 0 - phi d - - 0 - theta "
"d - - 0 - psi", "HepEulerAngles::set()", (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_170_0_13, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' - 11 - ea", "HepEulerAngles::compare()", (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_170_0_14, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' - 11 - ea", "HepEulerAngles::operator==()", (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_170_0_15, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' - 11 - ea", "HepEulerAngles::operator!=()", (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_170_0_16, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' - 11 - ea", "HepEulerAngles::operator<()", (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_170_0_17, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' - 11 - ea", "HepEulerAngles::operator<=()", (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_170_0_18, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' - 11 - ea", "HepEulerAngles::operator>()", (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_170_0_19, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' - 11 - ea", "HepEulerAngles::operator>=()", (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_170_0_20, 100, -1, -1, 0, 0, 3, 1, 0, "", "HepEulerAngles::getTolerance()", (void*) G__func2void( (double (*)())(&CLHEP::HepEulerAngles::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_170_0_21, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", "HepEulerAngles::setTolerance()", (void*) G__func2void( (double (*)(double))(&CLHEP::HepEulerAngles::setTolerance) ), 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_170_0_22, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepEulerAngles' 'CLHEP::HepEulerAngles::EA' 11 - ea d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_170_0_23, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepEulerAngles' 'CLHEP::HepEulerAngles::EA' 11 - ea", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance",843,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepEulerAngles' - 11 - ex", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HepEulerAngles", 1396, G__CLHEPIncDict_170_0_25, (int) ('i'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepEulerAngles' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepEulerAngles", 1522, G__CLHEPIncDict_170_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CLHEPIncDict_170_0_27, (int) ('u'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepEulerAngles' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepAxisAngle(void) {
   /* CLHEP::HepAxisAngle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle));
   G__memfunc_setup("HepAxisAngle",1177,G__CLHEPIncDict_171_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 0, 0, 1, 1, 0, "", "HepAxisAngle::HepAxisAngle()", (void*) NULL, 0);
   G__memfunc_setup("HepAxisAngle",1177,G__CLHEPIncDict_171_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 10 - axis d - 'CLHEP::HepAxisAngle::Scalar' 0 - delta", "HepAxisAngle::HepAxisAngle()", (void*) NULL, 0);
   G__memfunc_setup("getAxis",725,G__CLHEPIncDict_171_0_3, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", "HepAxisAngle::getAxis()", (void*) NULL, 0);
   G__memfunc_setup("axis",437,G__CLHEPIncDict_171_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", "HepAxisAngle::axis()", (void*) NULL, 0);
   G__memfunc_setup("setAxis",737,G__CLHEPIncDict_171_0_5, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 10 - axis", "HepAxisAngle::setAxis()", (void*) NULL, 0);
   G__memfunc_setup("getDelta",810,G__CLHEPIncDict_171_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepAxisAngle::getDelta()", (void*) NULL, 0);
   G__memfunc_setup("delta",522,G__CLHEPIncDict_171_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", "HepAxisAngle::delta()", (void*) NULL, 0);
   G__memfunc_setup("setDelta",822,G__CLHEPIncDict_171_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 1, 1, 1, 1, 0, "d - 'CLHEP::HepAxisAngle::Scalar' 0 - delta", "HepAxisAngle::setDelta()", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_171_0_9, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 10 - axis d - 'CLHEP::HepAxisAngle::Scalar' 0 - delta", "HepAxisAngle::set()", (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_171_0_10, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", "HepAxisAngle::compare()", (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_171_0_11, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", "HepAxisAngle::operator==()", (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_171_0_12, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", "HepAxisAngle::operator!=()", (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_171_0_13, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", "HepAxisAngle::operator<()", (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_171_0_14, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", "HepAxisAngle::operator<=()", (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_171_0_15, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", "HepAxisAngle::operator>()", (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_171_0_16, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", "HepAxisAngle::operator>=()", (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_171_0_17, 100, -1, -1, 0, 0, 3, 1, 0, "", "HepAxisAngle::getTolerance()", (void*) G__func2void( (double (*)())(&CLHEP::HepAxisAngle::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_171_0_18, 100, -1, -1, 0, 1, 3, 1, 0, "d - 'CLHEP::HepAxisAngle::Scalar' 0 - tol", "HepAxisAngle::setTolerance()", (void*) G__func2void( (double (*)(CLHEP::HepAxisAngle::Scalar))(&CLHEP::HepAxisAngle::setTolerance) ), 0);
   G__memfunc_setup("distance",843,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepAxisAngle' - 11 - aa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_171_0_20, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa d - 'CLHEP::HepAxisAngle::Scalar' 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_171_0_21, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepAxisAngle' 'CLHEP::HepAxisAngle::AA' 11 - aa", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HepAxisAngle", 1177, G__CLHEPIncDict_171_0_22, (int) ('i'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepAxisAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepAxisAngle", 1303, G__CLHEPIncDict_171_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CLHEPIncDict_171_0_24, (int) ('u'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepAxisAngle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHep3Vector(void) {
   /* CLHEP::Hep3Vector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector));
   G__memfunc_setup("Hep3Vector",963,G__CLHEPIncDict_172_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hep3Vector",963,G__CLHEPIncDict_172_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 5, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hep3Vector",963,G__CLHEPIncDict_172_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 2, 1, 1, 0, 
"d - - 0 - x d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hep3Vector",963,G__CLHEPIncDict_172_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hep3Vector",963,G__CLHEPIncDict_172_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_172_0_6, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_172_0_7, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_172_0_8, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_172_0_9, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__CLHEPIncDict_172_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__CLHEPIncDict_172_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("z",122,G__CLHEPIncDict_172_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__CLHEPIncDict_172_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__CLHEPIncDict_172_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__CLHEPIncDict_172_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_172_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_172_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_172_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cosTheta",827,G__CLHEPIncDict_172_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cos2Theta",877,G__CLHEPIncDict_172_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag2",359,G__CLHEPIncDict_172_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag",309,G__CLHEPIncDict_172_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__CLHEPIncDict_172_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__CLHEPIncDict_172_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMag",609,G__CLHEPIncDict_172_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp2",489,G__CLHEPIncDict_172_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp",439,G__CLHEPIncDict_172_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPerp",739,G__CLHEPIncDict_172_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCylTheta",1130,G__CLHEPIncDict_172_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp2",489,G__CLHEPIncDict_172_0_30, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp",439,G__CLHEPIncDict_172_0_31, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_172_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_172_0_33, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_172_0_34, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_172_0_35, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 11 - - d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_172_0_36, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deltaR",604,G__CLHEPIncDict_172_0_37, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_172_0_38, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_172_0_39, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_172_0_40, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_172_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__CLHEPIncDict_172_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unit",448,G__CLHEPIncDict_172_0_43, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("orthogonal",1085,G__CLHEPIncDict_172_0_44, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dot",327,G__CLHEPIncDict_172_0_45, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cross",554,G__CLHEPIncDict_172_0_46, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angle",519,G__CLHEPIncDict_172_0_47, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pseudoRapidity",1494,G__CLHEPIncDict_172_0_48, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEta",614,G__CLHEPIncDict_172_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCylEta",910,G__CLHEPIncDict_172_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateX",743,G__CLHEPIncDict_172_0_51, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateY",744,G__CLHEPIncDict_172_0_52, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateZ",745,G__CLHEPIncDict_172_0_53, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateUz",862,G__CLHEPIncDict_172_0_54, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_172_0_55, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 2, 1, 1, 0, 
"d - - 0 - - u 'CLHEP::Hep3Vector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_172_0_56, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_172_0_57, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRThetaPhi",1205,G__CLHEPIncDict_172_0_58, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - r d - - 0 - theta "
"d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setREtaPhi",985,G__CLHEPIncDict_172_0_59, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - r d - - 0 - eta "
"d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRhoPhiZ",1008,G__CLHEPIncDict_172_0_60, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - rho d - - 0 - phi "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRhoPhiTheta",1420,G__CLHEPIncDict_172_0_61, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - rho d - - 0 - phi "
"d - - 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRhoPhiEta",1200,G__CLHEPIncDict_172_0_62, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - rho d - - 0 - phi "
"d - - 0 - eta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__CLHEPIncDict_172_0_63, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__CLHEPIncDict_172_0_64, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__CLHEPIncDict_172_0_65, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR",402,G__CLHEPIncDict_172_0_66, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__CLHEPIncDict_172_0_67, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__CLHEPIncDict_172_0_68, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("r",114,G__CLHEPIncDict_172_0_69, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rho",329,G__CLHEPIncDict_172_0_70, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRho",617,G__CLHEPIncDict_172_0_71, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eta",314,G__CLHEPIncDict_172_0_72, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEta",602,G__CLHEPIncDict_172_0_73, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR",414,G__CLHEPIncDict_172_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRho",629,G__CLHEPIncDict_172_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rho", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_172_0_76, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_172_0_77, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_172_0_78, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_172_0_79, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_172_0_80, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("diff2",459,G__CLHEPIncDict_172_0_81, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_172_0_82, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::Hep3Vector::setTolerance) ), 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_172_0_83, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::Hep3Vector::getTolerance) ), 0);
   G__memfunc_setup("isParallel",1033,G__CLHEPIncDict_172_0_84, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 11 - v d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOrthogonal",1273,G__CLHEPIncDict_172_0_85, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 11 - v d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howParallel",1147,G__CLHEPIncDict_172_0_86, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howOrthogonal",1387,G__CLHEPIncDict_172_0_87, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beta",412,G__CLHEPIncDict_172_0_88, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gamma",515,G__CLHEPIncDict_172_0_89, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coLinearRapidity",1651,G__CLHEPIncDict_172_0_90, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angle",519,G__CLHEPIncDict_172_0_91, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_172_0_92, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cosTheta",827,G__CLHEPIncDict_172_0_93, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cos2Theta",877,G__CLHEPIncDict_172_0_94, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("project",759,G__CLHEPIncDict_172_0_95, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("project",759,G__CLHEPIncDict_172_0_96, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perpPart",846,G__CLHEPIncDict_172_0_97, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perpPart",846,G__CLHEPIncDict_172_0_98, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rapidity",870,G__CLHEPIncDict_172_0_99, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rapidity",870,G__CLHEPIncDict_172_0_100, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eta",314,G__CLHEPIncDict_172_0_101, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("polarAngle",1029,G__CLHEPIncDict_172_0_102, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deltaPhi",811,G__CLHEPIncDict_172_0_103, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("azimAngle",920,G__CLHEPIncDict_172_0_104, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("polarAngle",1029,G__CLHEPIncDict_172_0_105, 100, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 11 - v2 u 'CLHEP::Hep3Vector' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("azimAngle",920,G__CLHEPIncDict_172_0_106, 100, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 11 - v2 u 'CLHEP::Hep3Vector' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_172_0_107, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - axis d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_172_0_108, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepAxisAngle' - 11 - ax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_172_0_109, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepEulerAngles' - 11 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_172_0_110, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 3, 1, 1, 0, 
"d - - 0 - phi d - - 0 - theta "
"d - - 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSpherical",1255,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"d - - 0 - r d - - 0 - theta "
"d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCylindrical",1466,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"d - - 0 - r d - - 0 - phi "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("negativeInfinity",1693,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Hep3Vector", 1089, G__CLHEPIncDict_172_0_114, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepLorentzVector(void) {
   /* CLHEP::HepLorentzVector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector));
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 4, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - p d - - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_6, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 2, 1, 1, 0, 
"d - - 0 - e u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_7, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator const Hep3Vector&",2492,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator Hep3Vector&",1909,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 1, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__CLHEPIncDict_175_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__CLHEPIncDict_175_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("z",122,G__CLHEPIncDict_175_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("t",116,G__CLHEPIncDict_175_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__CLHEPIncDict_175_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__CLHEPIncDict_175_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__CLHEPIncDict_175_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setT",416,G__CLHEPIncDict_175_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("px",232,G__CLHEPIncDict_175_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("py",233,G__CLHEPIncDict_175_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pz",234,G__CLHEPIncDict_175_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("e",101,G__CLHEPIncDict_175_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPx",532,G__CLHEPIncDict_175_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPy",533,G__CLHEPIncDict_175_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPz",534,G__CLHEPIncDict_175_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setE",401,G__CLHEPIncDict_175_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vect",434,G__CLHEPIncDict_175_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVect",734,G__CLHEPIncDict_175_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_175_0_28, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cosTheta",827,G__CLHEPIncDict_175_0_29, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_175_0_30, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rho",329,G__CLHEPIncDict_175_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__CLHEPIncDict_175_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__CLHEPIncDict_175_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRho",629,G__CLHEPIncDict_175_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 4, 8, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 4, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_175_0_37, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_175_0_38, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_175_0_39, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__CLHEPIncDict_175_0_40, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_175_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_175_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_175_0_43, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_175_0_44, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_175_0_45, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__CLHEPIncDict_175_0_46, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_175_0_47, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_175_0_48, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp2",489,G__CLHEPIncDict_175_0_49, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp",439,G__CLHEPIncDict_175_0_50, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPerp",739,G__CLHEPIncDict_175_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp2",489,G__CLHEPIncDict_175_0_52, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("perp",439,G__CLHEPIncDict_175_0_53, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angle",519,G__CLHEPIncDict_175_0_54, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag2",359,G__CLHEPIncDict_175_0_55, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("m2",159,G__CLHEPIncDict_175_0_56, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag",309,G__CLHEPIncDict_175_0_57, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("m",109,G__CLHEPIncDict_175_0_58, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mt2",275,G__CLHEPIncDict_175_0_59, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mt",225,G__CLHEPIncDict_175_0_60, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("et2",267,G__CLHEPIncDict_175_0_61, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("et",217,G__CLHEPIncDict_175_0_62, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dot",327,G__CLHEPIncDict_175_0_63, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_175_0_64, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invariantMass2",1426,G__CLHEPIncDict_175_0_65, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", "invariantMass2 */", (void*) NULL, 0);
   G__memfunc_setup("invariantMass",1376,G__CLHEPIncDict_175_0_66, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVectMag",1011,G__CLHEPIncDict_175_0_67, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - spatial d - - 0 - magnitude", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVectM",811,G__CLHEPIncDict_175_0_68, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - spatial d - - 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plus",452,G__CLHEPIncDict_175_0_69, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minus",556,G__CLHEPIncDict_175_0_70, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostVector",1178,G__CLHEPIncDict_175_0_71, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boost",551,G__CLHEPIncDict_175_0_72, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boost",551,G__CLHEPIncDict_175_0_73, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostX",639,G__CLHEPIncDict_175_0_74, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostY",640,G__CLHEPIncDict_175_0_75, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostZ",641,G__CLHEPIncDict_175_0_76, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rapidity",870,G__CLHEPIncDict_175_0_77, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pseudoRapidity",1494,G__CLHEPIncDict_175_0_78, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTimelike",1040,G__CLHEPIncDict_175_0_79, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSpacelike",1133,G__CLHEPIncDict_175_0_80, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLightlike",1145,G__CLHEPIncDict_175_0_81, 103, -1, -1, 0, 1, 1, 1, 8, "d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateX",743,G__CLHEPIncDict_175_0_82, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateY",744,G__CLHEPIncDict_175_0_83, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateZ",745,G__CLHEPIncDict_175_0_84, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateUz",862,G__CLHEPIncDict_175_0_85, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_175_0_86, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 2, 1, 1, 0, 
"d - - 0 - - u 'CLHEP::Hep3Vector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_175_0_87, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_175_0_88, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_175_0_89, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzRotation' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_175_0_90, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzRotation' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMetric",944,G__CLHEPIncDict_175_0_91, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLZMpvMetric_t), -1, 0, 1, 3, 1, 0, "i 'CLHEP::ZMpvMetric_t' - 0 - m", (char*)NULL, (void*) G__func2void( (CLHEP::ZMpvMetric_t (*)(CLHEP::ZMpvMetric_t))(&CLHEP::HepLorentzVector::setMetric) ), 0);
   G__memfunc_setup("getMetric",932,G__CLHEPIncDict_175_0_92, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLZMpvMetric_t), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (CLHEP::ZMpvMetric_t (*)())(&CLHEP::HepLorentzVector::getMetric) ), 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_93, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_94, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z u 'CLHEP::Tcomponent' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_95, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 4, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z u 'CLHEP::Tcomponent' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_96, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'CLHEP::Tcomponent' - 0 - t d - - 0 - x "
"d - - 0 - y d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_97, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 4, 1, 1, 0, 
"u 'CLHEP::Tcomponent' - 0 - t d - - 0 - x "
"d - - 0 - y d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_98, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_99, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::Tcomponent' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_100, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 5, 1, 0, "u 'CLHEP::Tcomponent' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_101, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzVector",1662,G__CLHEPIncDict_175_0_102, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 5, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_175_0_103, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_104, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - v d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_175_0_105, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - t u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__CLHEPIncDict_175_0_106, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__CLHEPIncDict_175_0_107, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__CLHEPIncDict_175_0_108, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT",404,G__CLHEPIncDict_175_0_109, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("v",118,G__CLHEPIncDict_175_0_110, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getV",406,G__CLHEPIncDict_175_0_111, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setV",418,G__CLHEPIncDict_175_0_112, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setV",418,G__CLHEPIncDict_175_0_113, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRThetaPhi",1205,G__CLHEPIncDict_175_0_114, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - r d - - 0 - theta "
"d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setREtaPhi",985,G__CLHEPIncDict_175_0_115, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - r d - - 0 - eta "
"d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRhoPhiZ",1008,G__CLHEPIncDict_175_0_116, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - rho d - - 0 - phi "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_175_0_117, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_175_0_118, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_175_0_119, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_175_0_120, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_175_0_121, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_175_0_122, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzVector' - 11 - w d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_175_0_123, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNearCM",754,G__CLHEPIncDict_175_0_124, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzVector' - 11 - w d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNearCM",868,G__CLHEPIncDict_175_0_125, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isParallel",1033,G__CLHEPIncDict_175_0_126, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzVector' - 11 - w d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howParallel",1147,G__CLHEPIncDict_175_0_127, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_175_0_128, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepLorentzVector::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_175_0_129, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepLorentzVector::setTolerance) ), 0);
   G__memfunc_setup("deltaR",604,G__CLHEPIncDict_175_0_130, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howLightlike",1259,G__CLHEPIncDict_175_0_131, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("euclideanNorm2",1400,G__CLHEPIncDict_175_0_132, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("euclideanNorm",1350,G__CLHEPIncDict_175_0_133, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("restMass2",900,G__CLHEPIncDict_175_0_134, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invariantMass2",1426,G__CLHEPIncDict_175_0_135, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("restMass",850,G__CLHEPIncDict_175_0_136, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invariantMass",1376,G__CLHEPIncDict_175_0_137, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rest4Vector",1125,G__CLHEPIncDict_175_0_138, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beta",412,G__CLHEPIncDict_175_0_139, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gamma",515,G__CLHEPIncDict_175_0_140, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eta",314,G__CLHEPIncDict_175_0_141, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eta",314,G__CLHEPIncDict_175_0_142, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rapidity",870,G__CLHEPIncDict_175_0_143, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coLinearRapidity",1651,G__CLHEPIncDict_175_0_144, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findBoostToCM",1275,G__CLHEPIncDict_175_0_145, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findBoostToCM",1275,G__CLHEPIncDict_175_0_146, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("et2",267,G__CLHEPIncDict_175_0_147, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("et",217,G__CLHEPIncDict_175_0_148, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("diff2",459,G__CLHEPIncDict_175_0_149, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delta2Euclidean",1478,G__CLHEPIncDict_175_0_150, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plus",452,G__CLHEPIncDict_175_0_151, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minus",556,G__CLHEPIncDict_175_0_152, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_175_0_153, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - axis d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_175_0_154, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepAxisAngle' - 11 - ax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_175_0_155, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepEulerAngles' - 11 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_175_0_156, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 3, 1, 1, 0, 
"d - - 0 - phi d - - 0 - theta "
"d - - 0 - psi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boost",551,G__CLHEPIncDict_175_0_157, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 11 - axis d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepLorentzVector", 1788, G__CLHEPIncDict_175_0_158, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepLorentzRotation(void) {
   /* CLHEP::HepLorentzRotation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation));
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 5, 1, 0, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 5, 1, 0, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_6, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 5, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_7, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_8, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 5, 1, 0, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_9, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 5, 1, 0, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_10, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 5, 1, 0, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_176_0_11, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_176_0_12, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_176_0_13, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoost' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_14, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 3, 1, 1, 0, 
"d - - 0 - bx d - - 0 - by "
"d - - 0 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_15, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_16, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_17, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_18, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_19, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_20, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoost' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostX' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_22, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostY' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_23, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostZ' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_24, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 3, 1, 1, 0, 
"d - - 0 - bx d - - 0 - by "
"d - - 0 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_25, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::HepBoost' - 11 - B u 'CLHEP::HepRotation' - 11 - R", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_27, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::HepBoost' - 11 - B u 'CLHEP::HepRotation' - 11 - R", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::HepRotation' - 11 - R u 'CLHEP::HepBoost' - 11 - B", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_29, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::HepRotation' - 11 - R u 'CLHEP::HepBoost' - 11 - B", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_30, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 4, 1, 1, 0, 
"u 'CLHEP::HepLorentzVector' - 11 - col1 u 'CLHEP::HepLorentzVector' - 11 - col2 "
"u 'CLHEP::HepLorentzVector' - 11 - col3 u 'CLHEP::HepLorentzVector' - 11 - col4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_31, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 4, 1, 1, 0, 
"u 'CLHEP::HepLorentzVector' - 11 - col1 u 'CLHEP::HepLorentzVector' - 11 - col2 "
"u 'CLHEP::HepLorentzVector' - 11 - col3 u 'CLHEP::HepLorentzVector' - 11 - col4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRows",759,G__CLHEPIncDict_176_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 4, 1, 1, 0, 
"u 'CLHEP::HepLorentzVector' - 11 - row1 u 'CLHEP::HepLorentzVector' - 11 - row2 "
"u 'CLHEP::HepLorentzVector' - 11 - row3 u 'CLHEP::HepLorentzVector' - 11 - row4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_176_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4' - 11 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepLorentzRotation",1883,G__CLHEPIncDict_176_0_34, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4' - 11 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_176_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_176_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_176_0_37, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_176_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_176_0_39, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_176_0_40, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_176_0_41, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_176_0_42, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_176_0_43, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_176_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_176_0_45, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_176_0_46, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_176_0_47, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_176_0_48, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_176_0_49, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_176_0_50, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_176_0_51, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_176_0_52, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_176_0_53, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_176_0_54, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_176_0_55, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_176_0_56, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_176_0_57, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_176_0_58, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_176_0_59, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_176_0_60, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotationcLcLHepLorentzRotation_row), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_176_0_61, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_176_0_62, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_176_0_63, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_176_0_64, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_176_0_65, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_176_0_66, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_176_0_67, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_176_0_68, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_176_0_69, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_176_0_70, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_176_0_71, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_176_0_72, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_176_0_73, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_176_0_74, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_176_0_75, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_176_0_76, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_176_0_77, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_176_0_78, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_176_0_79, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_176_0_80, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_176_0_81, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_176_0_82, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_176_0_83, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_176_0_84, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vectorMultiplication",2145,G__CLHEPIncDict_176_0_85, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_176_0_86, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_176_0_87, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,G__CLHEPIncDict_176_0_88, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRep4x4' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_176_0_89, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_176_0_90, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_176_0_91, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_176_0_92, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_176_0_93, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_176_0_94, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_176_0_95, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_176_0_96, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_176_0_97, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateX",743,G__CLHEPIncDict_176_0_98, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateY",744,G__CLHEPIncDict_176_0_99, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotateZ",745,G__CLHEPIncDict_176_0_100, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_176_0_101, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 2, 1, 1, 0, 
"d - - 0 - angle u 'CLHEP::Hep3Vector' - 11 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_176_0_102, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 2, 1, 1, 0, 
"d - - 0 - angle U 'CLHEP::Hep3Vector' - 10 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostX",639,G__CLHEPIncDict_176_0_103, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostY",640,G__CLHEPIncDict_176_0_104, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostZ",641,G__CLHEPIncDict_176_0_105, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boost",551,G__CLHEPIncDict_176_0_106, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 3, 1, 1, 0, 
"d - - 0 - bx d - - 0 - by "
"d - - 0 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boost",551,G__CLHEPIncDict_176_0_107, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_176_0_108, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_176_0_109, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_176_0_110, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_176_0_111, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepLorentzRotation::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_176_0_112, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepLorentzRotation::setTolerance) ), 0);
   G__memfunc_setup("HepLorentzRotation",1883,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 16, 1, 2, 0, 
"d - - 0 - rxx d - - 0 - rxy "
"d - - 0 - rxz d - - 0 - rxt "
"d - - 0 - ryx d - - 0 - ryy "
"d - - 0 - ryz d - - 0 - ryt "
"d - - 0 - rzx d - - 0 - rzy "
"d - - 0 - rzz d - - 0 - rzt "
"d - - 0 - rtx d - - 0 - rty "
"d - - 0 - rtz d - - 0 - rtt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBoost",851,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"d - - 0 - bx d - - 0 - by "
"d - - 0 - bz", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepLorentzRotation", 2009, G__CLHEPIncDict_176_0_115, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepRep3x3(void) {
   /* CLHEP::HepRep3x3 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3));
   G__memfunc_setup("HepRep3x3",802,G__CLHEPIncDict_203_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRep3x3",802,G__CLHEPIncDict_203_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 9, 1, 1, 0, 
"d - - 0 - xx d - - 0 - xy "
"d - - 0 - xz d - - 0 - yx "
"d - - 0 - yy d - - 0 - yz "
"d - - 0 - zx d - - 0 - zy "
"d - - 0 - zz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRep3x3",802,G__CLHEPIncDict_203_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 1, 1, 1, 0, "D - - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setToIdentity",1369,G__CLHEPIncDict_203_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__CLHEPIncDict_203_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "D - - 0 - array", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HepRep3x3", 802, G__CLHEPIncDict_203_0_6, (int) ('i'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRep3x3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepRep3x3", 928, G__CLHEPIncDict_203_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CLHEPIncDict_203_0_8, (int) ('u'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRep3x3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepRep4x4(void) {
   /* CLHEP::HepRep4x4 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4));
   G__memfunc_setup("HepRep4x4",804,G__CLHEPIncDict_204_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRep4x4",804,G__CLHEPIncDict_204_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 16, 1, 1, 0, 
"d - - 0 - xx d - - 0 - xy "
"d - - 0 - xz d - - 0 - xt "
"d - - 0 - yx d - - 0 - yy "
"d - - 0 - yz d - - 0 - yt "
"d - - 0 - zx d - - 0 - zy "
"d - - 0 - zz d - - 0 - zt "
"d - - 0 - tx d - - 0 - ty "
"d - - 0 - tz d - - 0 - tt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRep4x4",804,G__CLHEPIncDict_204_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4Symmetric' - 11 - rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRep4x4",804,G__CLHEPIncDict_204_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 1, 1, 1, 0, "D - - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setToIdentity",1369,G__CLHEPIncDict_204_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__CLHEPIncDict_204_0_6, 121, -1, -1, 0, 1, 1, 1, 8, "D - - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_204_0_7, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRep4x4' - 41 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_204_0_8, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRep4x4' - 41 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_204_0_9, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRep4x4' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_204_0_10, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRep4x4' - 11 - r", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HepRep4x4", 804, G__CLHEPIncDict_204_0_11, (int) ('i'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepRep4x4", 930, G__CLHEPIncDict_204_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CLHEPIncDict_204_0_13, (int) ('u'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepRep4x4Symmetric(void) {
   /* CLHEP::HepRep4x4Symmetric */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric));
   G__memfunc_setup("HepRep4x4Symmetric",1761,G__CLHEPIncDict_205_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRep4x4Symmetric",1761,G__CLHEPIncDict_205_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 10, 1, 1, 0, 
"d - - 0 - xx d - - 0 - xy "
"d - - 0 - xz d - - 0 - xt "
"d - - 0 - yy d - - 0 - yz "
"d - - 0 - yt d - - 0 - zz "
"d - - 0 - zt d - - 0 - tt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRep4x4Symmetric",1761,G__CLHEPIncDict_205_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 1, 1, 1, 0, "D - - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setToIdentity",1369,G__CLHEPIncDict_205_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__CLHEPIncDict_205_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "D - - 0 - array", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HepRep4x4Symmetric", 1761, G__CLHEPIncDict_205_0_6, (int) ('i'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4Symmetric' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepRep4x4Symmetric", 1887, G__CLHEPIncDict_205_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CLHEPIncDict_205_0_8, (int) ('u'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4Symmetric' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepRotationX(void) {
   /* CLHEP::HepRotationX */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX));
   G__memfunc_setup("HepRotationX",1221,G__CLHEPIncDict_206_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotationX",1221,G__CLHEPIncDict_206_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 0, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotationX",1221,G__CLHEPIncDict_206_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_206_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_206_0_5, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colX",406,G__CLHEPIncDict_206_0_6, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colY",407,G__CLHEPIncDict_206_0_7, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colZ",408,G__CLHEPIncDict_206_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowX",432,G__CLHEPIncDict_206_0_9, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowY",433,G__CLHEPIncDict_206_0_10, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowZ",434,G__CLHEPIncDict_206_0_11, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_206_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_206_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_206_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_206_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_206_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_206_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_206_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_206_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_206_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep3x3",549,G__CLHEPIncDict_206_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__CLHEPIncDict_206_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__CLHEPIncDict_206_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPsi",620,G__CLHEPIncDict_206_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_206_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_206_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("psi",332,G__CLHEPIncDict_206_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eulerAngles",1143,G__CLHEPIncDict_206_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDelta",810,G__CLHEPIncDict_206_0_29, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAxis",725,G__CLHEPIncDict_206_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delta",522,G__CLHEPIncDict_206_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axis",437,G__CLHEPIncDict_206_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axisAngle",924,G__CLHEPIncDict_206_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleAxis",1212,G__CLHEPIncDict_206_0_34, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - delta u 'CLHEP::Hep3Vector' - 1 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiX",409,G__CLHEPIncDict_206_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiY",410,G__CLHEPIncDict_206_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiZ",411,G__CLHEPIncDict_206_0_37, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaX",622,G__CLHEPIncDict_206_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaY",623,G__CLHEPIncDict_206_0_39, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaZ",624,G__CLHEPIncDict_206_0_40, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_206_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_206_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_206_0_43, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_206_0_44, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_206_0_45, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_206_0_46, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_206_0_47, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_206_0_48, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_206_0_49, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_206_0_50, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_206_0_51, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_206_0_52, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_206_0_53, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_206_0_54, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_206_0_55, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_206_0_56, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDelta",822,G__CLHEPIncDict_206_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_206_0_58, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_206_0_59, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_206_0_60, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_206_0_61, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_206_0_62, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_206_0_63, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_206_0_64, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_206_0_65, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_206_0_66, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_206_0_67, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_206_0_68, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_206_0_69, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_206_0_70, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_206_0_71, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_206_0_72, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_206_0_73, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_206_0_74, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotationX' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_206_0_75, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_206_0_76, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_206_0_77, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_206_0_78, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_206_0_79, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_206_0_80, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_206_0_81, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_206_0_82, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_206_0_83, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_206_0_84, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_206_0_85, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_206_0_86, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_206_0_87, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_206_0_88, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationX' - 11 - rx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_206_0_89, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_206_0_90, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationX' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_206_0_91, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_206_0_92, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_206_0_93, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_206_0_94, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepRotationX::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_206_0_95, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepRotationX::setTolerance) ), 0);
   G__memfunc_setup("HepRotationX",1221,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX), -1, 0, 3, 1, 2, 0, 
"d - - 0 - dd d - - 0 - ss "
"d - - 0 - cc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("proper",664,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 3, 2, 0, "d - - 0 - delta", "proper()", (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepRotationX", 1347, G__CLHEPIncDict_206_0_98, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepRotationY(void) {
   /* CLHEP::HepRotationY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY));
   G__memfunc_setup("HepRotationY",1222,G__CLHEPIncDict_207_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotationY",1222,G__CLHEPIncDict_207_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 0, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotationY",1222,G__CLHEPIncDict_207_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_207_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_207_0_5, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colX",406,G__CLHEPIncDict_207_0_6, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colY",407,G__CLHEPIncDict_207_0_7, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colZ",408,G__CLHEPIncDict_207_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowX",432,G__CLHEPIncDict_207_0_9, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowY",433,G__CLHEPIncDict_207_0_10, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowZ",434,G__CLHEPIncDict_207_0_11, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_207_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_207_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_207_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_207_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_207_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_207_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_207_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_207_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_207_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep3x3",549,G__CLHEPIncDict_207_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__CLHEPIncDict_207_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__CLHEPIncDict_207_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPsi",620,G__CLHEPIncDict_207_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_207_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_207_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("psi",332,G__CLHEPIncDict_207_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eulerAngles",1143,G__CLHEPIncDict_207_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDelta",810,G__CLHEPIncDict_207_0_29, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAxis",725,G__CLHEPIncDict_207_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delta",522,G__CLHEPIncDict_207_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axis",437,G__CLHEPIncDict_207_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axisAngle",924,G__CLHEPIncDict_207_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleAxis",1212,G__CLHEPIncDict_207_0_34, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - delta u 'CLHEP::Hep3Vector' - 1 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiX",409,G__CLHEPIncDict_207_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiY",410,G__CLHEPIncDict_207_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiZ",411,G__CLHEPIncDict_207_0_37, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaX",622,G__CLHEPIncDict_207_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaY",623,G__CLHEPIncDict_207_0_39, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaZ",624,G__CLHEPIncDict_207_0_40, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_207_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_207_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_207_0_43, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_207_0_44, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_207_0_45, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_207_0_46, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_207_0_47, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_207_0_48, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_207_0_49, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_207_0_50, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_207_0_51, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_207_0_52, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_207_0_53, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_207_0_54, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_207_0_55, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_207_0_56, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDelta",822,G__CLHEPIncDict_207_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_207_0_58, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_207_0_59, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_207_0_60, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_207_0_61, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_207_0_62, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_207_0_63, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_207_0_64, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_207_0_65, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_207_0_66, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_207_0_67, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_207_0_68, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_207_0_69, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_207_0_70, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_207_0_71, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_207_0_72, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_207_0_73, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_207_0_74, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotationY' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_207_0_75, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_207_0_76, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_207_0_77, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_207_0_78, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_207_0_79, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_207_0_80, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_207_0_81, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_207_0_82, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_207_0_83, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_207_0_84, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_207_0_85, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_207_0_86, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_207_0_87, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_207_0_88, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationY' - 11 - ry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_207_0_89, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_207_0_90, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationY' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_207_0_91, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_207_0_92, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_207_0_93, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_207_0_94, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepRotationY::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_207_0_95, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepRotationY::setTolerance) ), 0);
   G__memfunc_setup("HepRotationY",1222,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY), -1, 0, 3, 1, 2, 0, 
"d - - 0 - dd d - - 0 - ss "
"d - - 0 - cc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("proper",664,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 3, 2, 0, "d - - 0 - delta", "proper()", (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepRotationY", 1348, G__CLHEPIncDict_207_0_98, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepRotationZ(void) {
   /* CLHEP::HepRotationZ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ));
   G__memfunc_setup("HepRotationZ",1223,G__CLHEPIncDict_208_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotationZ",1223,G__CLHEPIncDict_208_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 0, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepRotationZ",1223,G__CLHEPIncDict_208_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_208_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_208_0_5, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 1, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colX",406,G__CLHEPIncDict_208_0_6, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colY",407,G__CLHEPIncDict_208_0_7, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("colZ",408,G__CLHEPIncDict_208_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowX",432,G__CLHEPIncDict_208_0_9, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowY",433,G__CLHEPIncDict_208_0_10, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rowZ",434,G__CLHEPIncDict_208_0_11, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_208_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_208_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_208_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_208_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_208_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_208_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_208_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_208_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_208_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep3x3",549,G__CLHEPIncDict_208_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__CLHEPIncDict_208_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__CLHEPIncDict_208_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPsi",620,G__CLHEPIncDict_208_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_208_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__CLHEPIncDict_208_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("psi",332,G__CLHEPIncDict_208_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eulerAngles",1143,G__CLHEPIncDict_208_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDelta",810,G__CLHEPIncDict_208_0_29, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAxis",725,G__CLHEPIncDict_208_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delta",522,G__CLHEPIncDict_208_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axis",437,G__CLHEPIncDict_208_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axisAngle",924,G__CLHEPIncDict_208_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleAxis",1212,G__CLHEPIncDict_208_0_34, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - delta u 'CLHEP::Hep3Vector' - 1 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiX",409,G__CLHEPIncDict_208_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiY",410,G__CLHEPIncDict_208_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiZ",411,G__CLHEPIncDict_208_0_37, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaX",622,G__CLHEPIncDict_208_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaY",623,G__CLHEPIncDict_208_0_39, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("thetaZ",624,G__CLHEPIncDict_208_0_40, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_208_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_208_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_208_0_43, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_208_0_44, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_208_0_45, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_208_0_46, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_208_0_47, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_208_0_48, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_208_0_49, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_208_0_50, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_208_0_51, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_208_0_52, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_208_0_53, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_208_0_54, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_208_0_55, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_208_0_56, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDelta",822,G__CLHEPIncDict_208_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_208_0_58, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_208_0_59, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_208_0_60, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_208_0_61, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_208_0_62, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_208_0_63, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_208_0_64, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_208_0_65, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_208_0_66, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_208_0_67, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_208_0_68, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_208_0_69, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_208_0_70, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_208_0_71, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_208_0_72, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_208_0_73, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_208_0_74, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotationZ' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_208_0_75, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_208_0_76, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_208_0_77, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_208_0_78, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_208_0_79, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_208_0_80, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_208_0_81, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_208_0_82, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_208_0_83, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_208_0_84, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_208_0_85, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep3Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_208_0_86, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_208_0_87, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_208_0_88, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotationZ' - 11 - rz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_208_0_89, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__CLHEPIncDict_208_0_90, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotationZ' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_208_0_91, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_208_0_92, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_208_0_93, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_208_0_94, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepRotationZ::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_208_0_95, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepRotationZ::setTolerance) ), 0);
   G__memfunc_setup("HepRotationZ",1223,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ), -1, 0, 3, 1, 2, 0, 
"d - - 0 - dd d - - 0 - ss "
"d - - 0 - cc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("proper",664,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 3, 2, 0, "d - - 0 - delta", "proper()", (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepRotationZ", 1349, G__CLHEPIncDict_208_0_98, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepBoost(void) {
   /* CLHEP::HepBoost */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost));
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoost' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_209_0_3, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoost' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_209_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 3, 1, 1, 0, 
"d - - 0 - betaX d - - 0 - betaY "
"d - - 0 - betaZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 3, 1, 1, 0, 
"d - - 0 - betaX d - - 0 - betaY "
"d - - 0 - betaZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_209_0_6, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4Symmetric' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_7, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepRep4x4Symmetric' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_209_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 0 - direction d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_9, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 2, 1, 1, 0, 
"u 'CLHEP::Hep3Vector' - 0 - direction d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_209_0_10, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_11, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_209_0_12, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostX' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_209_0_13, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostY' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_209_0_14, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostZ' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_15, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoostX' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_16, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoostY' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,G__CLHEPIncDict_209_0_17, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoostZ' - 11 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beta",412,G__CLHEPIncDict_209_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gamma",515,G__CLHEPIncDict_209_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostVector",1178,G__CLHEPIncDict_209_0_20, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirection",1249,G__CLHEPIncDict_209_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("direction",961,G__CLHEPIncDict_209_0_22, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_209_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_209_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_209_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_209_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_209_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_209_0_28, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_209_0_29, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_209_0_30, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_209_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_209_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_209_0_33, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_209_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_209_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_209_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_209_0_37, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_209_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_209_0_39, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_209_0_40, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_209_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_209_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_209_0_43, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_209_0_44, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_209_0_45, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_209_0_46, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_209_0_47, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4Symmetric",1508,G__CLHEPIncDict_209_0_48, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_209_0_49, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_209_0_50, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_209_0_51, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_209_0_52, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_209_0_53, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_209_0_54, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_209_0_55, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_209_0_56, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_209_0_57, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_209_0_58, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_209_0_59, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_209_0_60, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_209_0_61, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_209_0_62, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - bx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_209_0_63, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - by", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_209_0_64, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - bz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_209_0_65, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_209_0_66, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_209_0_67, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_209_0_68, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_209_0_69, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_209_0_70, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_209_0_71, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_209_0_72, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_209_0_73, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_209_0_74, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_209_0_75, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_209_0_76, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_209_0_77, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_209_0_78, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_209_0_79, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_209_0_80, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_209_0_81, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_209_0_82, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_209_0_83, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepBoost::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_209_0_84, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepBoost::setTolerance) ), 0);
   G__memfunc_setup("vectorMultiplication",2145,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4Symmetric' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoost",804,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost), -1, 0, 10, 1, 2, 0, 
"d - - 0 - xx d - - 0 - xy "
"d - - 0 - xz d - - 0 - xt "
"d - - 0 - yy d - - 0 - yz "
"d - - 0 - yt d - - 0 - zz "
"d - - 0 - zt d - - 0 - tt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBoost",851,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"d - - 0 - bx d - - 0 - by "
"d - - 0 - bz", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepBoost", 930, G__CLHEPIncDict_209_0_90, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepBoostX(void) {
   /* CLHEP::HepBoostX */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX));
   G__memfunc_setup("HepBoostX",892,G__CLHEPIncDict_210_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostX",892,G__CLHEPIncDict_210_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_210_0_3, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_210_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostX",892,G__CLHEPIncDict_210_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 0, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beta",412,G__CLHEPIncDict_210_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gamma",515,G__CLHEPIncDict_210_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostVector",1178,G__CLHEPIncDict_210_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirection",1249,G__CLHEPIncDict_210_0_9, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_210_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_210_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_210_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_210_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_210_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_210_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_210_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_210_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_210_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_210_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_210_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_210_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_210_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_210_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_210_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_210_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_210_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_210_0_27, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_210_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_210_0_29, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_210_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_210_0_31, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_210_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_210_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_210_0_34, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4Symmetric",1508,G__CLHEPIncDict_210_0_35, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_210_0_36, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_210_0_37, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_210_0_38, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_210_0_39, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_210_0_40, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_210_0_41, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_210_0_42, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_210_0_43, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_210_0_44, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_210_0_45, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_210_0_46, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_210_0_47, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_210_0_48, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_210_0_49, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_210_0_50, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_210_0_51, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_210_0_52, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_210_0_53, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_210_0_54, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_210_0_55, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_210_0_56, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoostX' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_210_0_57, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_210_0_58, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_210_0_59, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_210_0_60, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_210_0_61, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_210_0_62, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_210_0_63, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_210_0_64, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostX' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_210_0_65, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_210_0_66, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_210_0_67, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_210_0_68, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_210_0_69, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_210_0_70, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_210_0_71, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepBoostX::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_210_0_72, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepBoostX::setTolerance) ), 0);
   G__memfunc_setup("vectorMultiplication",2145,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4Symmetric' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostX",892,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX), -1, 0, 2, 1, 2, 0, 
"d - - 0 - beta d - - 0 - gamma", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepBoostX", 1018, G__CLHEPIncDict_210_0_77, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepBoostY(void) {
   /* CLHEP::HepBoostY */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY));
   G__memfunc_setup("HepBoostY",893,G__CLHEPIncDict_211_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostY",893,G__CLHEPIncDict_211_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_211_0_3, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_211_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostY",893,G__CLHEPIncDict_211_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 0, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beta",412,G__CLHEPIncDict_211_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gamma",515,G__CLHEPIncDict_211_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostVector",1178,G__CLHEPIncDict_211_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirection",1249,G__CLHEPIncDict_211_0_9, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_211_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_211_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_211_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_211_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_211_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_211_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_211_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_211_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_211_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_211_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_211_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_211_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_211_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_211_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_211_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_211_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_211_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_211_0_27, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_211_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_211_0_29, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_211_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_211_0_31, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_211_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_211_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_211_0_34, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4Symmetric",1508,G__CLHEPIncDict_211_0_35, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_211_0_36, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_211_0_37, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_211_0_38, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_211_0_39, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_211_0_40, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_211_0_41, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_211_0_42, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_211_0_43, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_211_0_44, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_211_0_45, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_211_0_46, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_211_0_47, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_211_0_48, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_211_0_49, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_211_0_50, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_211_0_51, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_211_0_52, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_211_0_53, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_211_0_54, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_211_0_55, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_211_0_56, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoostY' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_211_0_57, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_211_0_58, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_211_0_59, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_211_0_60, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_211_0_61, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_211_0_62, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_211_0_63, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_211_0_64, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostY' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_211_0_65, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_211_0_66, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_211_0_67, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_211_0_68, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_211_0_69, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_211_0_70, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_211_0_71, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepBoostY::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_211_0_72, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepBoostY::setTolerance) ), 0);
   G__memfunc_setup("vectorMultiplication",2145,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4Symmetric' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostY",893,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY), -1, 0, 2, 1, 2, 0, 
"d - - 0 - beta d - - 0 - gamma", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepBoostY", 1019, G__CLHEPIncDict_211_0_77, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepBoostZ(void) {
   /* CLHEP::HepBoostZ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ));
   G__memfunc_setup("HepBoostZ",894,G__CLHEPIncDict_212_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostZ",894,G__CLHEPIncDict_212_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_212_0_3, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_212_0_4, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 1, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostZ",894,G__CLHEPIncDict_212_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 0, 1, 1, 1, 0, "d - - 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("beta",412,G__CLHEPIncDict_212_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gamma",515,G__CLHEPIncDict_212_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("boostVector",1178,G__CLHEPIncDict_212_0_8, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirection",1249,G__CLHEPIncDict_212_0_9, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xx",240,G__CLHEPIncDict_212_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xy",241,G__CLHEPIncDict_212_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xz",242,G__CLHEPIncDict_212_0_12, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xt",236,G__CLHEPIncDict_212_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yx",241,G__CLHEPIncDict_212_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yy",242,G__CLHEPIncDict_212_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yz",243,G__CLHEPIncDict_212_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yt",237,G__CLHEPIncDict_212_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zx",242,G__CLHEPIncDict_212_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zy",243,G__CLHEPIncDict_212_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zz",244,G__CLHEPIncDict_212_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("zt",238,G__CLHEPIncDict_212_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tx",236,G__CLHEPIncDict_212_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ty",237,G__CLHEPIncDict_212_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tz",238,G__CLHEPIncDict_212_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tt",232,G__CLHEPIncDict_212_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col1",367,G__CLHEPIncDict_212_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col2",368,G__CLHEPIncDict_212_0_27, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col3",369,G__CLHEPIncDict_212_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("col4",370,G__CLHEPIncDict_212_0_29, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row1",393,G__CLHEPIncDict_212_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row2",394,G__CLHEPIncDict_212_0_31, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row3",395,G__CLHEPIncDict_212_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("row4",396,G__CLHEPIncDict_212_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4",551,G__CLHEPIncDict_212_0_34, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rep4x4Symmetric",1508,G__CLHEPIncDict_212_0_35, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_212_0_36, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 1 - rotation u 'CLHEP::HepBoost' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_212_0_37, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepAxisAngle' - 1 - rotation u 'CLHEP::Hep3Vector' - 1 - boost", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_212_0_38, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 1 - boost u 'CLHEP::HepRotation' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decompose",959,G__CLHEPIncDict_212_0_39, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep3Vector' - 1 - boost u 'CLHEP::HepAxisAngle' - 1 - rotation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_212_0_40, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_212_0_41, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_212_0_42, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_212_0_43, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_212_0_44, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_212_0_45, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_212_0_46, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isIdentity",1062,G__CLHEPIncDict_212_0_47, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_212_0_48, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_212_0_49, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_212_0_50, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distance2",893,G__CLHEPIncDict_212_0_51, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_212_0_52, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_212_0_53, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_212_0_54, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_212_0_55, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_212_0_56, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoostZ' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_212_0_57, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepBoost' - 11 - b d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_212_0_58, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepRotation' - 11 - r d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_212_0_59, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::HepLorentzRotation' - 11 - lt d - - 0 'Hep4RotationInterface::tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm2",494,G__CLHEPIncDict_212_0_60, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rectify",758,G__CLHEPIncDict_212_0_61, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_212_0_62, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_212_0_63, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_212_0_64, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoostZ' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_212_0_65, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepBoost' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_212_0_66, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepRotation' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__CLHEPIncDict_212_0_67, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepLorentzRotation' - 11 - lt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_212_0_68, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_212_0_69, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__CLHEPIncDict_212_0_70, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - os", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_212_0_71, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::HepBoostZ::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_212_0_72, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::HepBoostZ::setTolerance) ), 0);
   G__memfunc_setup("vectorMultiplication",2145,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepLorentzVector' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("matrixMultiplication",2147,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation), -1, 0, 1, 1, 2, 8, "u 'CLHEP::HepRep4x4Symmetric' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepBoostZ",894,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ), -1, 0, 2, 1, 2, 0, 
"d - - 0 - beta d - - 0 - gamma", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepBoostZ", 1020, G__CLHEPIncDict_212_0_77, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHep4RotationInterface(void) {
   /* CLHEP::Hep4RotationInterface */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface));
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_213_0_1, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::Hep4RotationInterface::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_213_0_2, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::Hep4RotationInterface::setTolerance) ), 0);
   // automatic default constructor
   G__memfunc_setup("Hep4RotationInterface", 2098, G__CLHEPIncDict_213_0_3, (int) ('i'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Hep4RotationInterface", 2098, G__CLHEPIncDict_213_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface), -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep4RotationInterface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CLHEPIncDict_213_0_5, (int) ('u'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep4RotationInterface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHep3RotationInterface(void) {
   /* CLHEP::Hep3RotationInterface */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface));
   // automatic default constructor
   G__memfunc_setup("Hep3RotationInterface", 2097, G__CLHEPIncDict_215_0_1, (int) ('i'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Hep3RotationInterface", 2097, G__CLHEPIncDict_215_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface), -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep3RotationInterface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CLHEPIncDict_215_0_3, (int) ('u'), G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3RotationInterface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHep2Vector(void) {
   /* CLHEP::Hep2Vector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector));
   G__memfunc_setup("Hep2Vector",962,G__CLHEPIncDict_218_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 0, 2, 1, 1, 0, 
"d - - 0 '0.0' x d - - 0 '0.0' y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hep2Vector",962,G__CLHEPIncDict_218_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 0, 1, 1, 1, 0, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hep2Vector",962,G__CLHEPIncDict_218_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 0, 1, 5, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__CLHEPIncDict_218_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__CLHEPIncDict_218_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_218_0_6, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_218_0_7, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_218_0_8, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_218_0_9, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__CLHEPIncDict_218_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__CLHEPIncDict_218_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__CLHEPIncDict_218_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - x d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__CLHEPIncDict_218_0_13, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag2",359,G__CLHEPIncDict_218_0_14, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mag",309,G__CLHEPIncDict_218_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("r",114,G__CLHEPIncDict_218_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__CLHEPIncDict_218_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMag",609,G__CLHEPIncDict_218_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR",414,G__CLHEPIncDict_218_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPolar",842,G__CLHEPIncDict_218_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - r d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_218_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_218_0_22, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__CLHEPIncDict_218_0_23, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__CLHEPIncDict_218_0_24, 105, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__CLHEPIncDict_218_0_25, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__CLHEPIncDict_218_0_26, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__CLHEPIncDict_218_0_27, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__CLHEPIncDict_218_0_28, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTolerance",1245,G__CLHEPIncDict_218_0_29, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&CLHEP::Hep2Vector::getTolerance) ), 0);
   G__memfunc_setup("setTolerance",1257,G__CLHEPIncDict_218_0_30, 100, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - tol", (char*)NULL, (void*) G__func2void( (double (*)(double))(&CLHEP::Hep2Vector::setTolerance) ), 0);
   G__memfunc_setup("howNear",724,G__CLHEPIncDict_218_0_31, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNear",610,G__CLHEPIncDict_218_0_32, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep2Vector' - 11 - p d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howParallel",1147,G__CLHEPIncDict_218_0_33, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isParallel",1033,G__CLHEPIncDict_218_0_34, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep2Vector' - 11 - p d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howOrthogonal",1387,G__CLHEPIncDict_218_0_35, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOrthogonal",1273,G__CLHEPIncDict_218_0_36, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'CLHEP::Hep2Vector' - 11 - p d - - 0 'tolerance' epsilon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_218_0_37, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_218_0_38, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_218_0_39, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_218_0_40, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 1, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unit",448,G__CLHEPIncDict_218_0_41, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("orthogonal",1085,G__CLHEPIncDict_218_0_42, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dot",327,G__CLHEPIncDict_218_0_43, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("angle",519,G__CLHEPIncDict_218_0_44, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::Hep2Vector' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__CLHEPIncDict_218_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator CLHEP::Hep3Vector",2351,G__CLHEPIncDict_218_0_46, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Hep2Vector", 1088, G__CLHEPIncDict_218_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepGenMatrix(void) {
   /* CLHEP::HepGenMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix));
   G__memfunc_setup("num_row",775,G__CLHEPIncDict_222_0_1, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("num_col",749,G__CLHEPIncDict_222_0_2, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_222_0_3, 100, -1, -1, 1, 2, 1, 1, 9, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_222_0_4, 100, -1, -1, 1, 2, 1, 1, 0, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("invert",664,G__CLHEPIncDict_222_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_222_0_6, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row), -1, 0, 1, 1, 1, 0, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_222_0_7, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row_const), -1, 0, 1, 1, 1, 9, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__CLHEPIncDict_222_0_8, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - - 1 - i i - - 1 - j", (char*)NULL, (void*) G__func2void( (void (*)(int&, int&))(&CLHEP::HepGenMatrix::swap) ), 0);
   G__memfunc_setup("swap",443,G__CLHEPIncDict_222_0_9, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<double>' 1 - i u 'vector<double,allocator<double> >' 'vector<double>' 1 - j", (char*)NULL, (void*) G__func2void( (void (*)(vector<double>&, vector<double>&))(&CLHEP::HepGenMatrix::swap) ), 0);
   G__memfunc_setup("operator==",998,G__CLHEPIncDict_222_0_10, 103, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepGenMatrix' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("error",554,G__CLHEPIncDict_222_0_11, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - s", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&CLHEP::HepGenMatrix::error) ), 0);
   G__memfunc_setup("num_size",874,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("delete_m",831,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - - 0 - size D - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("new_m",534,(G__InterfaceMethod) NULL, 68, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'CLHEP::HepGenMatrix' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepGenMatrix", 1322, G__CLHEPIncDict_222_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepMatrix(void) {
   /* CLHEP::HepMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix));
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 2, 1, 1, 0, 
"i - - 0 - p i - - 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 3, 1, 1, 0, 
"i - - 0 - p i - - 0 - q "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 3, 1, 1, 0, 
"i - - 0 - p i - - 0 - q "
"u 'CLHEP::HepRandom' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_6, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_7, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepMatrix",914,G__CLHEPIncDict_227_0_8, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_row",775,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("num_col",749,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 9, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 0, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_227_0_13, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__CLHEPIncDict_227_0_14, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_227_0_15, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_227_0_16, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_227_0_17, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_227_0_18, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_227_0_19, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_227_0_20, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_227_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_227_0_22, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_227_0_23, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_227_0_24, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_227_0_25, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_227_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_227_0_27, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepRotation' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_227_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apply",550,G__CLHEPIncDict_227_0_29, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 1, 1, 1, 8, "1 - 'double (*)(double, int, int)' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("T",84,G__CLHEPIncDict_227_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_227_0_31, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 4, 1, 1, 8, 
"i - - 0 - min_row i - - 0 - max_row "
"i - - 0 - min_col i - - 0 - max_col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_227_0_32, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - row i - - 0 - col "
"u 'CLHEP::HepMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_227_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 1, 1, 1, 8, "i - - 1 - ierr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ierr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("determinant",1179,G__CLHEPIncDict_227_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trace",527,G__CLHEPIncDict_227_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_227_0_37, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row), -1, 0, 1, 1, 1, 0, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_227_0_38, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row_const), -1, 0, 1, 1, 1, 9, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_size",874,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("invertHaywood4",1447,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 1 - ierr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("invertHaywood5",1448,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 1 - ierr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("invertHaywood6",1449,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 1 - ierr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("dfact_matrix",1270,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 4, 0, 
"d - - 1 - det I - - 0 - ir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dfinv_matrix",1291,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "I - - 0 - ir", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepMatrix", 1040, G__CLHEPIncDict_227_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepSymMatrix(void) {
   /* CLHEP::HepSymMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix));
   G__memfunc_setup("HepSymMatrix",1227,G__CLHEPIncDict_228_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepSymMatrix",1227,G__CLHEPIncDict_228_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 5, 1, 0, "i - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepSymMatrix",1227,G__CLHEPIncDict_228_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 2, 1, 1, 0, 
"i - - 0 - p i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepSymMatrix",1227,G__CLHEPIncDict_228_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 2, 1, 1, 0, 
"i - - 0 - p u 'CLHEP::HepRandom' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepSymMatrix",1227,G__CLHEPIncDict_228_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepSymMatrix",1227,G__CLHEPIncDict_228_0_6, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_row",775,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("num_col",749,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 9, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 0, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fast",430,G__CLHEPIncDict_228_0_11, 100, -1, -1, 1, 2, 1, 1, 9, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fast",430,G__CLHEPIncDict_228_0_12, 100, -1, -1, 1, 2, 1, 1, 0, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__CLHEPIncDict_228_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__CLHEPIncDict_228_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_228_0_15, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__CLHEPIncDict_228_0_16, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_228_0_17, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_228_0_18, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_228_0_19, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_228_0_20, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_228_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_228_0_22, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_228_0_23, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("T",84,G__CLHEPIncDict_228_0_24, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apply",550,G__CLHEPIncDict_228_0_25, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 8, "1 - 'double (*)(double, int, int)' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("similarity",1095,G__CLHEPIncDict_228_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("similarity",1095,G__CLHEPIncDict_228_0_27, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepSymMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("similarityT",1179,G__CLHEPIncDict_228_0_28, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("similarity",1095,G__CLHEPIncDict_228_0_29, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_228_0_30, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 2, 1, 1, 8, 
"i - - 0 - min_row i - - 0 - max_row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_228_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - row u 'CLHEP::HepSymMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_228_0_32, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 2, 1, 1, 0, 
"i - - 0 - min_row i - - 0 - max_row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_228_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 8, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("determinant",1179,G__CLHEPIncDict_228_0_35, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trace",527,G__CLHEPIncDict_228_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_228_0_37, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row), -1, 0, 1, 1, 1, 0, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_228_0_38, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row_const), -1, 0, 1, 1, 1, 8, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invertCholesky5",1551,G__CLHEPIncDict_228_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invertCholesky6",1552,G__CLHEPIncDict_228_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invertHaywood4",1447,G__CLHEPIncDict_228_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invertHaywood5",1448,G__CLHEPIncDict_228_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invertHaywood6",1449,G__CLHEPIncDict_228_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invertBunchKaufman",1867,G__CLHEPIncDict_228_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_size",874,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("invert4",716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert5",717,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert6",718,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 1 - ifail", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepSymMatrix", 1353, G__CLHEPIncDict_228_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepVector(void) {
   /* CLHEP::HepVector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector));
   G__memfunc_setup("HepVector",912,G__CLHEPIncDict_229_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepVector",912,G__CLHEPIncDict_229_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 1, 5, 1, 0, "i - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepVector",912,G__CLHEPIncDict_229_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 2, 1, 1, 0, 
"i - - 0 - p i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepVector",912,G__CLHEPIncDict_229_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 2, 1, 1, 0, 
"i - - 0 - p u 'CLHEP::HepRandom' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepVector",912,G__CLHEPIncDict_229_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepVector",912,G__CLHEPIncDict_229_0_6, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_229_0_7, 100, -1, -1, 1, 1, 1, 1, 9, "i - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__CLHEPIncDict_229_0_8, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_229_0_9, 100, -1, -1, 1, 1, 1, 1, 9, "i - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_229_0_10, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 9, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 0, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_229_0_13, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__CLHEPIncDict_229_0_14, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_229_0_15, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_229_0_16, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_229_0_17, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_229_0_18, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_229_0_19, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepVector' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_229_0_20, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_229_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 1, 1, 1, 1, 0, "u 'CLHEP::Hep3Vector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_229_0_22, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apply",550,G__CLHEPIncDict_229_0_23, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 1, 1, 1, 8, "1 - 'double (*)(double, int)' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_229_0_24, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 2, 1, 1, 8, 
"i - - 0 - min_row i - - 0 - max_row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_229_0_25, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepVector), -1, 0, 2, 1, 1, 0, 
"i - - 0 - min_row i - - 0 - max_row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_229_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - row u 'CLHEP::HepVector' - 11 - v1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("normsq",672,G__CLHEPIncDict_229_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm",444,G__CLHEPIncDict_229_0_28, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_row",775,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("num_col",749,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("T",84,G__CLHEPIncDict_229_0_31, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_size",874,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("invert",664,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 1 - -", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~HepVector", 1038, G__CLHEPIncDict_229_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCLHEPcLcLHepDiagMatrix(void) {
   /* CLHEP::HepDiagMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix));
   G__memfunc_setup("HepDiagMatrix",1287,G__CLHEPIncDict_230_0_1, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepDiagMatrix",1287,G__CLHEPIncDict_230_0_2, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 1, 5, 1, 0, "i - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepDiagMatrix",1287,G__CLHEPIncDict_230_0_3, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 2, 1, 1, 0, 
"i - - 0 - p i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepDiagMatrix",1287,G__CLHEPIncDict_230_0_4, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 2, 1, 1, 0, 
"i - - 0 - p u 'CLHEP::HepRandom' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HepDiagMatrix",1287,G__CLHEPIncDict_230_0_5, 105, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_row",775,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("num_col",749,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 0, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, -1, 1, 2, 1, 1, 9, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fast",430,G__CLHEPIncDict_230_0_10, 100, -1, -1, 1, 2, 1, 1, 0, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fast",430,G__CLHEPIncDict_230_0_11, 100, -1, -1, 1, 2, 1, 1, 9, 
"i - - 0 - row i - - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__CLHEPIncDict_230_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__CLHEPIncDict_230_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepSymMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__CLHEPIncDict_230_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__CLHEPIncDict_230_0_15, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__CLHEPIncDict_230_0_16, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 1, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__CLHEPIncDict_230_0_17, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__CLHEPIncDict_230_0_18, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__CLHEPIncDict_230_0_19, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 1, 1, 1, 1, 0, "u 'CLHEP::HepDiagMatrix' - 11 - m2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__CLHEPIncDict_230_0_20, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("T",84,G__CLHEPIncDict_230_0_21, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apply",550,G__CLHEPIncDict_230_0_22, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 1, 1, 1, 8, "1 - 'double (*)(double, int, int)' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("similarity",1095,G__CLHEPIncDict_230_0_23, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("similarityT",1179,G__CLHEPIncDict_230_0_24, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix), -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("similarity",1095,G__CLHEPIncDict_230_0_25, 100, -1, -1, 0, 1, 1, 1, 8, "u 'CLHEP::HepVector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_230_0_26, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 2, 1, 1, 8, 
"i - - 0 - min_row i - - 0 - max_row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_230_0_27, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 2, 1, 1, 0, 
"i - - 0 - min_row i - - 0 - max_row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__CLHEPIncDict_230_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - row u 'CLHEP::HepDiagMatrix' - 11 - m1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inverse",764,G__CLHEPIncDict_230_0_29, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix), -1, 0, 1, 1, 1, 8, "i - - 1 - ierr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("invert",664,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - - 1 - ierr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("determinant",1179,G__CLHEPIncDict_230_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trace",527,G__CLHEPIncDict_230_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_230_0_33, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row), -1, 0, 1, 1, 1, 0, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CLHEPIncDict_230_0_34, 117, G__get_linked_tagnum(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row_const), -1, 0, 1, 1, 1, 8, "i - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("num_size",874,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~HepDiagMatrix", 1413, G__CLHEPIncDict_230_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCLHEPIncDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCLHEPIncDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCLHEPIncDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator = { "vector<double,allocator<double> >::iterator" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEP = { "CLHEP" , 110 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRotation = { "CLHEP::HepRotation" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles = { "CLHEP::HepEulerAngles" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle = { "CLHEP::HepAxisAngle" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHep3Vector = { "CLHEP::Hep3Vector" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA = { "CLHEP::Hep3Vector::$" , 101 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector = { "CLHEP::HepLorentzVector" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation = { "CLHEP::HepLorentzRotation" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLTcomponent = { "CLHEP::Tcomponent" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLZMpvMetric_t = { "CLHEP::ZMpvMetric_t" , 101 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA = { "CLHEP::HepLorentzVector::$" , 101 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3 = { "CLHEP::HepRep3x3" , 115 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4 = { "CLHEP::HepRep4x4" , 115 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric = { "CLHEP::HepRep4x4Symmetric" , 115 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRotationX = { "CLHEP::HepRotationX" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRotationY = { "CLHEP::HepRotationY" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ = { "CLHEP::HepRotationZ" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepBoost = { "CLHEP::HepBoost" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepBoostX = { "CLHEP::HepBoostX" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepBoostY = { "CLHEP::HepBoostY" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ = { "CLHEP::HepBoostZ" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface = { "CLHEP::Hep4RotationInterface" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterfacecLcLdA = { "CLHEP::Hep4RotationInterface::$" , 101 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface = { "CLHEP::Hep3RotationInterface" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRotationcLcLHepRotation_row = { "CLHEP::HepRotation::HepRotation_row" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotationcLcLHepLorentzRotation_row = { "CLHEP::HepLorentzRotation::HepLorentzRotation_row" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHep2Vector = { "CLHEP::Hep2Vector" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA = { "CLHEP::Hep2Vector::$" , 101 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix = { "CLHEP::HepGenMatrix" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row = { "CLHEP::HepGenMatrix::HepGenMatrix_row" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row_const = { "CLHEP::HepGenMatrix::HepGenMatrix_row_const" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLdA = { "CLHEP::HepGenMatrix::$" , 101 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepRandom = { "CLHEP::HepRandom" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepMatrix = { "CLHEP::HepMatrix" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix = { "CLHEP::HepSymMatrix" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepVector = { "CLHEP::HepVector" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix = { "CLHEP::HepDiagMatrix" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row = { "CLHEP::HepDiagMatrix::HepDiagMatrix_row" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row_const = { "CLHEP::HepDiagMatrix::HepDiagMatrix_row_const" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row = { "CLHEP::HepMatrix::HepMatrix_row" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row_const = { "CLHEP::HepMatrix::HepMatrix_row_const" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row = { "CLHEP::HepSymMatrix::HepSymMatrix_row" , 99 , -1 };
G__linked_taginfo G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row_const = { "CLHEP::HepSymMatrix::HepSymMatrix_row_const" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCLHEPIncDict() {
  G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator.tagnum = -1 ;
  G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__CLHEPIncDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CLHEPIncDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CLHEPIncDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CLHEPIncDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEP.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRotation.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHep3Vector.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLTcomponent.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLZMpvMetric_t.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRotationX.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRotationY.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepBoost.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepBoostX.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepBoostY.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterfacecLcLdA.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRotationcLcLHepRotation_row.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotationcLcLHepLorentzRotation_row.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHep2Vector.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row_const.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLdA.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepRandom.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepMatrix.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepVector.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row_const.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row_const.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row.tagnum = -1 ;
  G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row_const.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCLHEPIncDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEP);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRotation),sizeof(CLHEP::HepRotation),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepRotation,G__setup_memfuncCLHEPcLcLHepRotation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepEulerAngles),sizeof(CLHEP::HepEulerAngles),-1,295168,(char*)NULL,G__setup_memvarCLHEPcLcLHepEulerAngles,G__setup_memfuncCLHEPcLcLHepEulerAngles);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepAxisAngle),sizeof(CLHEP::HepAxisAngle),-1,295168,(char*)NULL,G__setup_memvarCLHEPcLcLHepAxisAngle,G__setup_memfuncCLHEPcLcLHepAxisAngle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHep3Vector),sizeof(CLHEP::Hep3Vector),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHep3Vector,G__setup_memfuncCLHEPcLcLHep3Vector);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHep3VectorcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVector),sizeof(CLHEP::HepLorentzVector),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepLorentzVector,G__setup_memfuncCLHEPcLcLHepLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotation),sizeof(CLHEP::HepLorentzRotation),-1,297728,(char*)NULL,G__setup_memvarCLHEPcLcLHepLorentzRotation,G__setup_memfuncCLHEPcLcLHepLorentzRotation);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLTcomponent);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLZMpvMetric_t);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzVectorcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRep3x3),sizeof(CLHEP::HepRep3x3),-1,33024,(char*)NULL,G__setup_memvarCLHEPcLcLHepRep3x3,G__setup_memfuncCLHEPcLcLHepRep3x3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4),sizeof(CLHEP::HepRep4x4),-1,33024,(char*)NULL,G__setup_memvarCLHEPcLcLHepRep4x4,G__setup_memfuncCLHEPcLcLHepRep4x4);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRep4x4Symmetric),sizeof(CLHEP::HepRep4x4Symmetric),-1,33024,(char*)NULL,G__setup_memvarCLHEPcLcLHepRep4x4Symmetric,G__setup_memfuncCLHEPcLcLHepRep4x4Symmetric);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationX),sizeof(CLHEP::HepRotationX),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepRotationX,G__setup_memfuncCLHEPcLcLHepRotationX);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationY),sizeof(CLHEP::HepRotationY),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepRotationY,G__setup_memfuncCLHEPcLcLHepRotationY);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationZ),sizeof(CLHEP::HepRotationZ),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepRotationZ,G__setup_memfuncCLHEPcLcLHepRotationZ);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepBoost),sizeof(CLHEP::HepBoost),-1,297728,(char*)NULL,G__setup_memvarCLHEPcLcLHepBoost,G__setup_memfuncCLHEPcLcLHepBoost);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostX),sizeof(CLHEP::HepBoostX),-1,297728,(char*)NULL,G__setup_memvarCLHEPcLcLHepBoostX,G__setup_memfuncCLHEPcLcLHepBoostX);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostY),sizeof(CLHEP::HepBoostY),-1,297728,(char*)NULL,G__setup_memvarCLHEPcLcLHepBoostY,G__setup_memfuncCLHEPcLcLHepBoostY);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepBoostZ),sizeof(CLHEP::HepBoostZ),-1,297728,(char*)NULL,G__setup_memvarCLHEPcLcLHepBoostZ,G__setup_memfuncCLHEPcLcLHepBoostZ);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterface),sizeof(CLHEP::Hep4RotationInterface),-1,263168,(char*)NULL,G__setup_memvarCLHEPcLcLHep4RotationInterface,G__setup_memfuncCLHEPcLcLHep4RotationInterface);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHep4RotationInterfacecLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHep3RotationInterface),sizeof(CLHEP::Hep3RotationInterface),-1,263168,(char*)NULL,G__setup_memvarCLHEPcLcLHep3RotationInterface,G__setup_memfuncCLHEPcLcLHep3RotationInterface);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRotationcLcLHepRotation_row);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepLorentzRotationcLcLHepLorentzRotation_row);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHep2Vector),sizeof(CLHEP::Hep2Vector),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHep2Vector,G__setup_memfuncCLHEPcLcLHep2Vector);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHep2VectorcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrix),sizeof(CLHEP::HepGenMatrix),-1,265222,(char*)NULL,G__setup_memvarCLHEPcLcLHepGenMatrix,G__setup_memfuncCLHEPcLcLHepGenMatrix);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLHepGenMatrix_row_const);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepGenMatrixcLcLdA);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepRandom);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrix),sizeof(CLHEP::HepMatrix),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepMatrix,G__setup_memfuncCLHEPcLcLHepMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrix),sizeof(CLHEP::HepSymMatrix),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepSymMatrix,G__setup_memfuncCLHEPcLcLHepSymMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepVector),sizeof(CLHEP::HepVector),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepVector,G__setup_memfuncCLHEPcLcLHepVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrix),sizeof(CLHEP::HepDiagMatrix),-1,298752,(char*)NULL,G__setup_memvarCLHEPcLcLHepDiagMatrix,G__setup_memfuncCLHEPcLcLHepDiagMatrix);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepDiagMatrixcLcLHepDiagMatrix_row_const);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepMatrixcLcLHepMatrix_row_const);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row);
   G__get_linked_tagnum_fwd(&G__CLHEPIncDictLN_CLHEPcLcLHepSymMatrixcLcLHepSymMatrix_row_const);
}
extern "C" void G__cpp_setupCLHEPIncDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCLHEPIncDict()");
  G__set_cpp_environmentCLHEPIncDict();
  G__cpp_setup_tagtableCLHEPIncDict();

  G__cpp_setup_inheritanceCLHEPIncDict();

  G__cpp_setup_typetableCLHEPIncDict();

  G__cpp_setup_memvarCLHEPIncDict();

  G__cpp_setup_memfuncCLHEPIncDict();
  G__cpp_setup_globalCLHEPIncDict();
  G__cpp_setup_funcCLHEPIncDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCLHEPIncDict();
  return;
}
class G__cpp_setup_initCLHEPIncDict {
  public:
    G__cpp_setup_initCLHEPIncDict() { G__add_setup_func("CLHEPIncDict",(G__incsetup)(&G__cpp_setupCLHEPIncDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCLHEPIncDict() { G__remove_setup_func("CLHEPIncDict"); }
};
G__cpp_setup_initCLHEPIncDict G__cpp_setup_initializerCLHEPIncDict;

